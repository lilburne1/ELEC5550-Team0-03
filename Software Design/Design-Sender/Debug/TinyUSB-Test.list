
TinyUSB-Test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007f18  080001c4  080001c4  000011c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000074  080080dc  080080dc  000090dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008150  08008150  0000a03c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08008150  08008150  00009150  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008158  08008158  0000a03c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008158  08008158  00009158  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800815c  0800815c  0000915c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000003c  20000000  08008160  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000d88  2000003c  0800819c  0000a03c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000dc4  0800819c  0000adc4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000a03c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001c6a0  00000000  00000000  0000a06c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003d08  00000000  00000000  0002670c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001400  00000000  00000000  0002a418  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000011a0  00000000  00000000  0002b818  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000276d6  00000000  00000000  0002c9b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001a05c  00000000  00000000  0005408e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e6568  00000000  00000000  0006e0ea  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00154652  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000055dc  00000000  00000000  00154698  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006c  00000000  00000000  00159c74  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	@ (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	@ (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	@ (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	2000003c 	.word	0x2000003c
 80001e0:	00000000 	.word	0x00000000
 80001e4:	080080c4 	.word	0x080080c4

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	@ (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	@ (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	@ (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	20000040 	.word	0x20000040
 8000200:	080080c4 	.word	0x080080c4

08000204 <__aeabi_uldivmod>:
 8000204:	b953      	cbnz	r3, 800021c <__aeabi_uldivmod+0x18>
 8000206:	b94a      	cbnz	r2, 800021c <__aeabi_uldivmod+0x18>
 8000208:	2900      	cmp	r1, #0
 800020a:	bf08      	it	eq
 800020c:	2800      	cmpeq	r0, #0
 800020e:	bf1c      	itt	ne
 8000210:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000214:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000218:	f000 b988 	b.w	800052c <__aeabi_idiv0>
 800021c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000220:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000224:	f000 f806 	bl	8000234 <__udivmoddi4>
 8000228:	f8dd e004 	ldr.w	lr, [sp, #4]
 800022c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000230:	b004      	add	sp, #16
 8000232:	4770      	bx	lr

08000234 <__udivmoddi4>:
 8000234:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000238:	9d08      	ldr	r5, [sp, #32]
 800023a:	468e      	mov	lr, r1
 800023c:	4604      	mov	r4, r0
 800023e:	4688      	mov	r8, r1
 8000240:	2b00      	cmp	r3, #0
 8000242:	d14a      	bne.n	80002da <__udivmoddi4+0xa6>
 8000244:	428a      	cmp	r2, r1
 8000246:	4617      	mov	r7, r2
 8000248:	d962      	bls.n	8000310 <__udivmoddi4+0xdc>
 800024a:	fab2 f682 	clz	r6, r2
 800024e:	b14e      	cbz	r6, 8000264 <__udivmoddi4+0x30>
 8000250:	f1c6 0320 	rsb	r3, r6, #32
 8000254:	fa01 f806 	lsl.w	r8, r1, r6
 8000258:	fa20 f303 	lsr.w	r3, r0, r3
 800025c:	40b7      	lsls	r7, r6
 800025e:	ea43 0808 	orr.w	r8, r3, r8
 8000262:	40b4      	lsls	r4, r6
 8000264:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000268:	fa1f fc87 	uxth.w	ip, r7
 800026c:	fbb8 f1fe 	udiv	r1, r8, lr
 8000270:	0c23      	lsrs	r3, r4, #16
 8000272:	fb0e 8811 	mls	r8, lr, r1, r8
 8000276:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800027a:	fb01 f20c 	mul.w	r2, r1, ip
 800027e:	429a      	cmp	r2, r3
 8000280:	d909      	bls.n	8000296 <__udivmoddi4+0x62>
 8000282:	18fb      	adds	r3, r7, r3
 8000284:	f101 30ff 	add.w	r0, r1, #4294967295	@ 0xffffffff
 8000288:	f080 80ea 	bcs.w	8000460 <__udivmoddi4+0x22c>
 800028c:	429a      	cmp	r2, r3
 800028e:	f240 80e7 	bls.w	8000460 <__udivmoddi4+0x22c>
 8000292:	3902      	subs	r1, #2
 8000294:	443b      	add	r3, r7
 8000296:	1a9a      	subs	r2, r3, r2
 8000298:	b2a3      	uxth	r3, r4
 800029a:	fbb2 f0fe 	udiv	r0, r2, lr
 800029e:	fb0e 2210 	mls	r2, lr, r0, r2
 80002a2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80002a6:	fb00 fc0c 	mul.w	ip, r0, ip
 80002aa:	459c      	cmp	ip, r3
 80002ac:	d909      	bls.n	80002c2 <__udivmoddi4+0x8e>
 80002ae:	18fb      	adds	r3, r7, r3
 80002b0:	f100 32ff 	add.w	r2, r0, #4294967295	@ 0xffffffff
 80002b4:	f080 80d6 	bcs.w	8000464 <__udivmoddi4+0x230>
 80002b8:	459c      	cmp	ip, r3
 80002ba:	f240 80d3 	bls.w	8000464 <__udivmoddi4+0x230>
 80002be:	443b      	add	r3, r7
 80002c0:	3802      	subs	r0, #2
 80002c2:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002c6:	eba3 030c 	sub.w	r3, r3, ip
 80002ca:	2100      	movs	r1, #0
 80002cc:	b11d      	cbz	r5, 80002d6 <__udivmoddi4+0xa2>
 80002ce:	40f3      	lsrs	r3, r6
 80002d0:	2200      	movs	r2, #0
 80002d2:	e9c5 3200 	strd	r3, r2, [r5]
 80002d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002da:	428b      	cmp	r3, r1
 80002dc:	d905      	bls.n	80002ea <__udivmoddi4+0xb6>
 80002de:	b10d      	cbz	r5, 80002e4 <__udivmoddi4+0xb0>
 80002e0:	e9c5 0100 	strd	r0, r1, [r5]
 80002e4:	2100      	movs	r1, #0
 80002e6:	4608      	mov	r0, r1
 80002e8:	e7f5      	b.n	80002d6 <__udivmoddi4+0xa2>
 80002ea:	fab3 f183 	clz	r1, r3
 80002ee:	2900      	cmp	r1, #0
 80002f0:	d146      	bne.n	8000380 <__udivmoddi4+0x14c>
 80002f2:	4573      	cmp	r3, lr
 80002f4:	d302      	bcc.n	80002fc <__udivmoddi4+0xc8>
 80002f6:	4282      	cmp	r2, r0
 80002f8:	f200 8105 	bhi.w	8000506 <__udivmoddi4+0x2d2>
 80002fc:	1a84      	subs	r4, r0, r2
 80002fe:	eb6e 0203 	sbc.w	r2, lr, r3
 8000302:	2001      	movs	r0, #1
 8000304:	4690      	mov	r8, r2
 8000306:	2d00      	cmp	r5, #0
 8000308:	d0e5      	beq.n	80002d6 <__udivmoddi4+0xa2>
 800030a:	e9c5 4800 	strd	r4, r8, [r5]
 800030e:	e7e2      	b.n	80002d6 <__udivmoddi4+0xa2>
 8000310:	2a00      	cmp	r2, #0
 8000312:	f000 8090 	beq.w	8000436 <__udivmoddi4+0x202>
 8000316:	fab2 f682 	clz	r6, r2
 800031a:	2e00      	cmp	r6, #0
 800031c:	f040 80a4 	bne.w	8000468 <__udivmoddi4+0x234>
 8000320:	1a8a      	subs	r2, r1, r2
 8000322:	0c03      	lsrs	r3, r0, #16
 8000324:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000328:	b280      	uxth	r0, r0
 800032a:	b2bc      	uxth	r4, r7
 800032c:	2101      	movs	r1, #1
 800032e:	fbb2 fcfe 	udiv	ip, r2, lr
 8000332:	fb0e 221c 	mls	r2, lr, ip, r2
 8000336:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800033a:	fb04 f20c 	mul.w	r2, r4, ip
 800033e:	429a      	cmp	r2, r3
 8000340:	d907      	bls.n	8000352 <__udivmoddi4+0x11e>
 8000342:	18fb      	adds	r3, r7, r3
 8000344:	f10c 38ff 	add.w	r8, ip, #4294967295	@ 0xffffffff
 8000348:	d202      	bcs.n	8000350 <__udivmoddi4+0x11c>
 800034a:	429a      	cmp	r2, r3
 800034c:	f200 80e0 	bhi.w	8000510 <__udivmoddi4+0x2dc>
 8000350:	46c4      	mov	ip, r8
 8000352:	1a9b      	subs	r3, r3, r2
 8000354:	fbb3 f2fe 	udiv	r2, r3, lr
 8000358:	fb0e 3312 	mls	r3, lr, r2, r3
 800035c:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000360:	fb02 f404 	mul.w	r4, r2, r4
 8000364:	429c      	cmp	r4, r3
 8000366:	d907      	bls.n	8000378 <__udivmoddi4+0x144>
 8000368:	18fb      	adds	r3, r7, r3
 800036a:	f102 30ff 	add.w	r0, r2, #4294967295	@ 0xffffffff
 800036e:	d202      	bcs.n	8000376 <__udivmoddi4+0x142>
 8000370:	429c      	cmp	r4, r3
 8000372:	f200 80ca 	bhi.w	800050a <__udivmoddi4+0x2d6>
 8000376:	4602      	mov	r2, r0
 8000378:	1b1b      	subs	r3, r3, r4
 800037a:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800037e:	e7a5      	b.n	80002cc <__udivmoddi4+0x98>
 8000380:	f1c1 0620 	rsb	r6, r1, #32
 8000384:	408b      	lsls	r3, r1
 8000386:	fa22 f706 	lsr.w	r7, r2, r6
 800038a:	431f      	orrs	r7, r3
 800038c:	fa0e f401 	lsl.w	r4, lr, r1
 8000390:	fa20 f306 	lsr.w	r3, r0, r6
 8000394:	fa2e fe06 	lsr.w	lr, lr, r6
 8000398:	ea4f 4917 	mov.w	r9, r7, lsr #16
 800039c:	4323      	orrs	r3, r4
 800039e:	fa00 f801 	lsl.w	r8, r0, r1
 80003a2:	fa1f fc87 	uxth.w	ip, r7
 80003a6:	fbbe f0f9 	udiv	r0, lr, r9
 80003aa:	0c1c      	lsrs	r4, r3, #16
 80003ac:	fb09 ee10 	mls	lr, r9, r0, lr
 80003b0:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 80003b4:	fb00 fe0c 	mul.w	lr, r0, ip
 80003b8:	45a6      	cmp	lr, r4
 80003ba:	fa02 f201 	lsl.w	r2, r2, r1
 80003be:	d909      	bls.n	80003d4 <__udivmoddi4+0x1a0>
 80003c0:	193c      	adds	r4, r7, r4
 80003c2:	f100 3aff 	add.w	sl, r0, #4294967295	@ 0xffffffff
 80003c6:	f080 809c 	bcs.w	8000502 <__udivmoddi4+0x2ce>
 80003ca:	45a6      	cmp	lr, r4
 80003cc:	f240 8099 	bls.w	8000502 <__udivmoddi4+0x2ce>
 80003d0:	3802      	subs	r0, #2
 80003d2:	443c      	add	r4, r7
 80003d4:	eba4 040e 	sub.w	r4, r4, lr
 80003d8:	fa1f fe83 	uxth.w	lr, r3
 80003dc:	fbb4 f3f9 	udiv	r3, r4, r9
 80003e0:	fb09 4413 	mls	r4, r9, r3, r4
 80003e4:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80003e8:	fb03 fc0c 	mul.w	ip, r3, ip
 80003ec:	45a4      	cmp	ip, r4
 80003ee:	d908      	bls.n	8000402 <__udivmoddi4+0x1ce>
 80003f0:	193c      	adds	r4, r7, r4
 80003f2:	f103 3eff 	add.w	lr, r3, #4294967295	@ 0xffffffff
 80003f6:	f080 8082 	bcs.w	80004fe <__udivmoddi4+0x2ca>
 80003fa:	45a4      	cmp	ip, r4
 80003fc:	d97f      	bls.n	80004fe <__udivmoddi4+0x2ca>
 80003fe:	3b02      	subs	r3, #2
 8000400:	443c      	add	r4, r7
 8000402:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000406:	eba4 040c 	sub.w	r4, r4, ip
 800040a:	fba0 ec02 	umull	lr, ip, r0, r2
 800040e:	4564      	cmp	r4, ip
 8000410:	4673      	mov	r3, lr
 8000412:	46e1      	mov	r9, ip
 8000414:	d362      	bcc.n	80004dc <__udivmoddi4+0x2a8>
 8000416:	d05f      	beq.n	80004d8 <__udivmoddi4+0x2a4>
 8000418:	b15d      	cbz	r5, 8000432 <__udivmoddi4+0x1fe>
 800041a:	ebb8 0203 	subs.w	r2, r8, r3
 800041e:	eb64 0409 	sbc.w	r4, r4, r9
 8000422:	fa04 f606 	lsl.w	r6, r4, r6
 8000426:	fa22 f301 	lsr.w	r3, r2, r1
 800042a:	431e      	orrs	r6, r3
 800042c:	40cc      	lsrs	r4, r1
 800042e:	e9c5 6400 	strd	r6, r4, [r5]
 8000432:	2100      	movs	r1, #0
 8000434:	e74f      	b.n	80002d6 <__udivmoddi4+0xa2>
 8000436:	fbb1 fcf2 	udiv	ip, r1, r2
 800043a:	0c01      	lsrs	r1, r0, #16
 800043c:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000440:	b280      	uxth	r0, r0
 8000442:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000446:	463b      	mov	r3, r7
 8000448:	4638      	mov	r0, r7
 800044a:	463c      	mov	r4, r7
 800044c:	46b8      	mov	r8, r7
 800044e:	46be      	mov	lr, r7
 8000450:	2620      	movs	r6, #32
 8000452:	fbb1 f1f7 	udiv	r1, r1, r7
 8000456:	eba2 0208 	sub.w	r2, r2, r8
 800045a:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 800045e:	e766      	b.n	800032e <__udivmoddi4+0xfa>
 8000460:	4601      	mov	r1, r0
 8000462:	e718      	b.n	8000296 <__udivmoddi4+0x62>
 8000464:	4610      	mov	r0, r2
 8000466:	e72c      	b.n	80002c2 <__udivmoddi4+0x8e>
 8000468:	f1c6 0220 	rsb	r2, r6, #32
 800046c:	fa2e f302 	lsr.w	r3, lr, r2
 8000470:	40b7      	lsls	r7, r6
 8000472:	40b1      	lsls	r1, r6
 8000474:	fa20 f202 	lsr.w	r2, r0, r2
 8000478:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800047c:	430a      	orrs	r2, r1
 800047e:	fbb3 f8fe 	udiv	r8, r3, lr
 8000482:	b2bc      	uxth	r4, r7
 8000484:	fb0e 3318 	mls	r3, lr, r8, r3
 8000488:	0c11      	lsrs	r1, r2, #16
 800048a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800048e:	fb08 f904 	mul.w	r9, r8, r4
 8000492:	40b0      	lsls	r0, r6
 8000494:	4589      	cmp	r9, r1
 8000496:	ea4f 4310 	mov.w	r3, r0, lsr #16
 800049a:	b280      	uxth	r0, r0
 800049c:	d93e      	bls.n	800051c <__udivmoddi4+0x2e8>
 800049e:	1879      	adds	r1, r7, r1
 80004a0:	f108 3cff 	add.w	ip, r8, #4294967295	@ 0xffffffff
 80004a4:	d201      	bcs.n	80004aa <__udivmoddi4+0x276>
 80004a6:	4589      	cmp	r9, r1
 80004a8:	d81f      	bhi.n	80004ea <__udivmoddi4+0x2b6>
 80004aa:	eba1 0109 	sub.w	r1, r1, r9
 80004ae:	fbb1 f9fe 	udiv	r9, r1, lr
 80004b2:	fb09 f804 	mul.w	r8, r9, r4
 80004b6:	fb0e 1119 	mls	r1, lr, r9, r1
 80004ba:	b292      	uxth	r2, r2
 80004bc:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80004c0:	4542      	cmp	r2, r8
 80004c2:	d229      	bcs.n	8000518 <__udivmoddi4+0x2e4>
 80004c4:	18ba      	adds	r2, r7, r2
 80004c6:	f109 31ff 	add.w	r1, r9, #4294967295	@ 0xffffffff
 80004ca:	d2c4      	bcs.n	8000456 <__udivmoddi4+0x222>
 80004cc:	4542      	cmp	r2, r8
 80004ce:	d2c2      	bcs.n	8000456 <__udivmoddi4+0x222>
 80004d0:	f1a9 0102 	sub.w	r1, r9, #2
 80004d4:	443a      	add	r2, r7
 80004d6:	e7be      	b.n	8000456 <__udivmoddi4+0x222>
 80004d8:	45f0      	cmp	r8, lr
 80004da:	d29d      	bcs.n	8000418 <__udivmoddi4+0x1e4>
 80004dc:	ebbe 0302 	subs.w	r3, lr, r2
 80004e0:	eb6c 0c07 	sbc.w	ip, ip, r7
 80004e4:	3801      	subs	r0, #1
 80004e6:	46e1      	mov	r9, ip
 80004e8:	e796      	b.n	8000418 <__udivmoddi4+0x1e4>
 80004ea:	eba7 0909 	sub.w	r9, r7, r9
 80004ee:	4449      	add	r1, r9
 80004f0:	f1a8 0c02 	sub.w	ip, r8, #2
 80004f4:	fbb1 f9fe 	udiv	r9, r1, lr
 80004f8:	fb09 f804 	mul.w	r8, r9, r4
 80004fc:	e7db      	b.n	80004b6 <__udivmoddi4+0x282>
 80004fe:	4673      	mov	r3, lr
 8000500:	e77f      	b.n	8000402 <__udivmoddi4+0x1ce>
 8000502:	4650      	mov	r0, sl
 8000504:	e766      	b.n	80003d4 <__udivmoddi4+0x1a0>
 8000506:	4608      	mov	r0, r1
 8000508:	e6fd      	b.n	8000306 <__udivmoddi4+0xd2>
 800050a:	443b      	add	r3, r7
 800050c:	3a02      	subs	r2, #2
 800050e:	e733      	b.n	8000378 <__udivmoddi4+0x144>
 8000510:	f1ac 0c02 	sub.w	ip, ip, #2
 8000514:	443b      	add	r3, r7
 8000516:	e71c      	b.n	8000352 <__udivmoddi4+0x11e>
 8000518:	4649      	mov	r1, r9
 800051a:	e79c      	b.n	8000456 <__udivmoddi4+0x222>
 800051c:	eba1 0109 	sub.w	r1, r1, r9
 8000520:	46c4      	mov	ip, r8
 8000522:	fbb1 f9fe 	udiv	r9, r1, lr
 8000526:	fb09 f804 	mul.w	r8, r9, r4
 800052a:	e7c4      	b.n	80004b6 <__udivmoddi4+0x282>

0800052c <__aeabi_idiv0>:
 800052c:	4770      	bx	lr
 800052e:	bf00      	nop

08000530 <tuh_hid_mount_cb>:
 */
#include "hid.h"

hid_queue q;

void tuh_hid_mount_cb(uint8_t dev_addr, uint8_t instance, uint8_t const *desc_report, uint16_t desc_len) {
 8000530:	b580      	push	{r7, lr}
 8000532:	b082      	sub	sp, #8
 8000534:	af00      	add	r7, sp, #0
 8000536:	603a      	str	r2, [r7, #0]
 8000538:	461a      	mov	r2, r3
 800053a:	4603      	mov	r3, r0
 800053c:	71fb      	strb	r3, [r7, #7]
 800053e:	460b      	mov	r3, r1
 8000540:	71bb      	strb	r3, [r7, #6]
 8000542:	4613      	mov	r3, r2
 8000544:	80bb      	strh	r3, [r7, #4]
	tuh_hid_receive_report(dev_addr, instance);
 8000546:	79ba      	ldrb	r2, [r7, #6]
 8000548:	79fb      	ldrb	r3, [r7, #7]
 800054a:	4611      	mov	r1, r2
 800054c:	4618      	mov	r0, r3
 800054e:	f003 f91b 	bl	8003788 <tuh_hid_receive_report>
}
 8000552:	bf00      	nop
 8000554:	3708      	adds	r7, #8
 8000556:	46bd      	mov	sp, r7
 8000558:	bd80      	pop	{r7, pc}

0800055a <tuh_hid_umount_cb>:

void tuh_hid_umount_cb(uint8_t dev_addr, uint8_t instance) {
 800055a:	b480      	push	{r7}
 800055c:	b083      	sub	sp, #12
 800055e:	af00      	add	r7, sp, #0
 8000560:	4603      	mov	r3, r0
 8000562:	460a      	mov	r2, r1
 8000564:	71fb      	strb	r3, [r7, #7]
 8000566:	4613      	mov	r3, r2
 8000568:	71bb      	strb	r3, [r7, #6]
}
 800056a:	bf00      	nop
 800056c:	370c      	adds	r7, #12
 800056e:	46bd      	mov	sp, r7
 8000570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000574:	4770      	bx	lr
	...

08000578 <tuh_hid_report_received_cb>:

void tuh_hid_report_received_cb(uint8_t dev_addr, uint8_t instance, uint8_t const *report, uint16_t len) {
 8000578:	b580      	push	{r7, lr}
 800057a:	b094      	sub	sp, #80	@ 0x50
 800057c:	af00      	add	r7, sp, #0
 800057e:	603a      	str	r2, [r7, #0]
 8000580:	461a      	mov	r2, r3
 8000582:	4603      	mov	r3, r0
 8000584:	71fb      	strb	r3, [r7, #7]
 8000586:	460b      	mov	r3, r1
 8000588:	71bb      	strb	r3, [r7, #6]
 800058a:	4613      	mov	r3, r2
 800058c:	80bb      	strh	r3, [r7, #4]
	hid_packet p;
	hid_packet_create(&p, report, len);
 800058e:	88ba      	ldrh	r2, [r7, #4]
 8000590:	f107 030c 	add.w	r3, r7, #12
 8000594:	6839      	ldr	r1, [r7, #0]
 8000596:	4618      	mov	r0, r3
 8000598:	f000 f812 	bl	80005c0 <hid_packet_create>
	hid_queue_push(&q, &p);
 800059c:	f107 030c 	add.w	r3, r7, #12
 80005a0:	4619      	mov	r1, r3
 80005a2:	4806      	ldr	r0, [pc, #24]	@ (80005bc <tuh_hid_report_received_cb+0x44>)
 80005a4:	f000 f822 	bl	80005ec <hid_queue_push>
	tuh_hid_receive_report(dev_addr, instance);
 80005a8:	79ba      	ldrb	r2, [r7, #6]
 80005aa:	79fb      	ldrb	r3, [r7, #7]
 80005ac:	4611      	mov	r1, r2
 80005ae:	4618      	mov	r0, r3
 80005b0:	f003 f8ea 	bl	8003788 <tuh_hid_receive_report>
}
 80005b4:	bf00      	nop
 80005b6:	3750      	adds	r7, #80	@ 0x50
 80005b8:	46bd      	mov	sp, r7
 80005ba:	bd80      	pop	{r7, pc}
 80005bc:	20000058 	.word	0x20000058

080005c0 <hid_packet_create>:

void hid_packet_create(hid_packet *p,uint8_t const *report, uint16_t len) {
 80005c0:	b580      	push	{r7, lr}
 80005c2:	b084      	sub	sp, #16
 80005c4:	af00      	add	r7, sp, #0
 80005c6:	60f8      	str	r0, [r7, #12]
 80005c8:	60b9      	str	r1, [r7, #8]
 80005ca:	4613      	mov	r3, r2
 80005cc:	80fb      	strh	r3, [r7, #6]
	p->len = (uint8_t) len;
 80005ce:	88fb      	ldrh	r3, [r7, #6]
 80005d0:	b2da      	uxtb	r2, r3
 80005d2:	68fb      	ldr	r3, [r7, #12]
 80005d4:	701a      	strb	r2, [r3, #0]
	memcpy(p->data, report, len);
 80005d6:	68fb      	ldr	r3, [r7, #12]
 80005d8:	3301      	adds	r3, #1
 80005da:	88fa      	ldrh	r2, [r7, #6]
 80005dc:	68b9      	ldr	r1, [r7, #8]
 80005de:	4618      	mov	r0, r3
 80005e0:	f007 fd62 	bl	80080a8 <memcpy>
}
 80005e4:	bf00      	nop
 80005e6:	3710      	adds	r7, #16
 80005e8:	46bd      	mov	sp, r7
 80005ea:	bd80      	pop	{r7, pc}

080005ec <hid_queue_push>:

bool hid_queue_push(hid_queue *q, const hid_packet *p) {
 80005ec:	b580      	push	{r7, lr}
 80005ee:	b084      	sub	sp, #16
 80005f0:	af00      	add	r7, sp, #0
 80005f2:	6078      	str	r0, [r7, #4]
 80005f4:	6039      	str	r1, [r7, #0]
	uint16_t head = q->head;
 80005f6:	687b      	ldr	r3, [r7, #4]
 80005f8:	881b      	ldrh	r3, [r3, #0]
 80005fa:	81fb      	strh	r3, [r7, #14]
	uint16_t tail = q->tail;
 80005fc:	687b      	ldr	r3, [r7, #4]
 80005fe:	885b      	ldrh	r3, [r3, #2]
 8000600:	81bb      	strh	r3, [r7, #12]
	uint16_t next_pos = ((head + 1) % QUEUE_LENGTH);
 8000602:	89fb      	ldrh	r3, [r7, #14]
 8000604:	3301      	adds	r3, #1
 8000606:	425a      	negs	r2, r3
 8000608:	f003 030f 	and.w	r3, r3, #15
 800060c:	f002 020f 	and.w	r2, r2, #15
 8000610:	bf58      	it	pl
 8000612:	4253      	negpl	r3, r2
 8000614:	817b      	strh	r3, [r7, #10]
	if(next_pos == tail) {
 8000616:	897a      	ldrh	r2, [r7, #10]
 8000618:	89bb      	ldrh	r3, [r7, #12]
 800061a:	429a      	cmp	r2, r3
 800061c:	d101      	bne.n	8000622 <hid_queue_push+0x36>
		return false;
 800061e:	2300      	movs	r3, #0
 8000620:	e010      	b.n	8000644 <hid_queue_push+0x58>
	}
	q->buffer[next_pos] = *p;
 8000622:	897a      	ldrh	r2, [r7, #10]
 8000624:	6879      	ldr	r1, [r7, #4]
 8000626:	4613      	mov	r3, r2
 8000628:	019b      	lsls	r3, r3, #6
 800062a:	4413      	add	r3, r2
 800062c:	440b      	add	r3, r1
 800062e:	683a      	ldr	r2, [r7, #0]
 8000630:	3304      	adds	r3, #4
 8000632:	4611      	mov	r1, r2
 8000634:	2241      	movs	r2, #65	@ 0x41
 8000636:	4618      	mov	r0, r3
 8000638:	f007 fd36 	bl	80080a8 <memcpy>
	q->head = next_pos;
 800063c:	687b      	ldr	r3, [r7, #4]
 800063e:	897a      	ldrh	r2, [r7, #10]
 8000640:	801a      	strh	r2, [r3, #0]
	return true;
 8000642:	2301      	movs	r3, #1
}
 8000644:	4618      	mov	r0, r3
 8000646:	3710      	adds	r7, #16
 8000648:	46bd      	mov	sp, r7
 800064a:	bd80      	pop	{r7, pc}

0800064c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800064c:	b580      	push	{r7, lr}
 800064e:	b082      	sub	sp, #8
 8000650:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000652:	f000 fb0f 	bl	8000c74 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000656:	f000 f81b 	bl	8000690 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800065a:	f000 f913 	bl	8000884 <MX_GPIO_Init>
  MX_DMA_Init();
 800065e:	f000 f8f1 	bl	8000844 <MX_DMA_Init>
  MX_TIM2_Init();
 8000662:	f000 f881 	bl	8000768 <MX_TIM2_Init>
  MX_USB_OTG_FS_HCD_Init();
 8000666:	f000 f8cb 	bl	8000800 <MX_USB_OTG_FS_HCD_Init>
  /* USER CODE BEGIN 2 */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 800066a:	2200      	movs	r2, #0
 800066c:	2120      	movs	r1, #32
 800066e:	4807      	ldr	r0, [pc, #28]	@ (800068c <main+0x40>)
 8000670:	f001 f926 	bl	80018c0 <HAL_GPIO_WritePin>

  tusb_rhport_init_t host_init = { .role = TUSB_ROLE_HOST, .speed = TUSB_SPEED_FULL };
 8000674:	2302      	movs	r3, #2
 8000676:	713b      	strb	r3, [r7, #4]
 8000678:	2300      	movs	r3, #0
 800067a:	717b      	strb	r3, [r7, #5]
  tusb_init(0, &host_init);
 800067c:	1d3b      	adds	r3, r7, #4
 800067e:	4619      	mov	r1, r3
 8000680:	2000      	movs	r0, #0
 8000682:	f007 fb01 	bl	8007c88 <tusb_rhport_init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000686:	bf00      	nop
 8000688:	e7fd      	b.n	8000686 <main+0x3a>
 800068a:	bf00      	nop
 800068c:	40020000 	.word	0x40020000

08000690 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000690:	b580      	push	{r7, lr}
 8000692:	b094      	sub	sp, #80	@ 0x50
 8000694:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000696:	f107 031c 	add.w	r3, r7, #28
 800069a:	2234      	movs	r2, #52	@ 0x34
 800069c:	2100      	movs	r1, #0
 800069e:	4618      	mov	r0, r3
 80006a0:	f007 fcd5 	bl	800804e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006a4:	f107 0308 	add.w	r3, r7, #8
 80006a8:	2200      	movs	r2, #0
 80006aa:	601a      	str	r2, [r3, #0]
 80006ac:	605a      	str	r2, [r3, #4]
 80006ae:	609a      	str	r2, [r3, #8]
 80006b0:	60da      	str	r2, [r3, #12]
 80006b2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80006b4:	2300      	movs	r3, #0
 80006b6:	607b      	str	r3, [r7, #4]
 80006b8:	4b29      	ldr	r3, [pc, #164]	@ (8000760 <SystemClock_Config+0xd0>)
 80006ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80006bc:	4a28      	ldr	r2, [pc, #160]	@ (8000760 <SystemClock_Config+0xd0>)
 80006be:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80006c2:	6413      	str	r3, [r2, #64]	@ 0x40
 80006c4:	4b26      	ldr	r3, [pc, #152]	@ (8000760 <SystemClock_Config+0xd0>)
 80006c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80006c8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80006cc:	607b      	str	r3, [r7, #4]
 80006ce:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80006d0:	2300      	movs	r3, #0
 80006d2:	603b      	str	r3, [r7, #0]
 80006d4:	4b23      	ldr	r3, [pc, #140]	@ (8000764 <SystemClock_Config+0xd4>)
 80006d6:	681b      	ldr	r3, [r3, #0]
 80006d8:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 80006dc:	4a21      	ldr	r2, [pc, #132]	@ (8000764 <SystemClock_Config+0xd4>)
 80006de:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80006e2:	6013      	str	r3, [r2, #0]
 80006e4:	4b1f      	ldr	r3, [pc, #124]	@ (8000764 <SystemClock_Config+0xd4>)
 80006e6:	681b      	ldr	r3, [r3, #0]
 80006e8:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80006ec:	603b      	str	r3, [r7, #0]
 80006ee:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80006f0:	2301      	movs	r3, #1
 80006f2:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80006f4:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80006f8:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006fa:	2302      	movs	r3, #2
 80006fc:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80006fe:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8000702:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000704:	2304      	movs	r3, #4
 8000706:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 50;
 8000708:	2332      	movs	r3, #50	@ 0x32
 800070a:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800070c:	2302      	movs	r3, #2
 800070e:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 5;
 8000710:	2305      	movs	r3, #5
 8000712:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000714:	2302      	movs	r3, #2
 8000716:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000718:	f107 031c 	add.w	r3, r7, #28
 800071c:	4618      	mov	r0, r3
 800071e:	f001 ff8f 	bl	8002640 <HAL_RCC_OscConfig>
 8000722:	4603      	mov	r3, r0
 8000724:	2b00      	cmp	r3, #0
 8000726:	d001      	beq.n	800072c <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8000728:	f000 f92a 	bl	8000980 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800072c:	230f      	movs	r3, #15
 800072e:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000730:	2302      	movs	r3, #2
 8000732:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000734:	2300      	movs	r3, #0
 8000736:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000738:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800073c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800073e:	2300      	movs	r3, #0
 8000740:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000742:	f107 0308 	add.w	r3, r7, #8
 8000746:	2101      	movs	r1, #1
 8000748:	4618      	mov	r0, r3
 800074a:	f001 f939 	bl	80019c0 <HAL_RCC_ClockConfig>
 800074e:	4603      	mov	r3, r0
 8000750:	2b00      	cmp	r3, #0
 8000752:	d001      	beq.n	8000758 <SystemClock_Config+0xc8>
  {
    Error_Handler();
 8000754:	f000 f914 	bl	8000980 <Error_Handler>
  }
}
 8000758:	bf00      	nop
 800075a:	3750      	adds	r7, #80	@ 0x50
 800075c:	46bd      	mov	sp, r7
 800075e:	bd80      	pop	{r7, pc}
 8000760:	40023800 	.word	0x40023800
 8000764:	40007000 	.word	0x40007000

08000768 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000768:	b580      	push	{r7, lr}
 800076a:	b086      	sub	sp, #24
 800076c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800076e:	f107 0308 	add.w	r3, r7, #8
 8000772:	2200      	movs	r2, #0
 8000774:	601a      	str	r2, [r3, #0]
 8000776:	605a      	str	r2, [r3, #4]
 8000778:	609a      	str	r2, [r3, #8]
 800077a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800077c:	463b      	mov	r3, r7
 800077e:	2200      	movs	r2, #0
 8000780:	601a      	str	r2, [r3, #0]
 8000782:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000784:	4b1d      	ldr	r3, [pc, #116]	@ (80007fc <MX_TIM2_Init+0x94>)
 8000786:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800078a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 20;
 800078c:	4b1b      	ldr	r3, [pc, #108]	@ (80007fc <MX_TIM2_Init+0x94>)
 800078e:	2214      	movs	r2, #20
 8000790:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000792:	4b1a      	ldr	r3, [pc, #104]	@ (80007fc <MX_TIM2_Init+0x94>)
 8000794:	2200      	movs	r2, #0
 8000796:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 9;
 8000798:	4b18      	ldr	r3, [pc, #96]	@ (80007fc <MX_TIM2_Init+0x94>)
 800079a:	2209      	movs	r2, #9
 800079c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800079e:	4b17      	ldr	r3, [pc, #92]	@ (80007fc <MX_TIM2_Init+0x94>)
 80007a0:	2200      	movs	r2, #0
 80007a2:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80007a4:	4b15      	ldr	r3, [pc, #84]	@ (80007fc <MX_TIM2_Init+0x94>)
 80007a6:	2200      	movs	r2, #0
 80007a8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80007aa:	4814      	ldr	r0, [pc, #80]	@ (80007fc <MX_TIM2_Init+0x94>)
 80007ac:	f002 f9e6 	bl	8002b7c <HAL_TIM_Base_Init>
 80007b0:	4603      	mov	r3, r0
 80007b2:	2b00      	cmp	r3, #0
 80007b4:	d001      	beq.n	80007ba <MX_TIM2_Init+0x52>
  {
    Error_Handler();
 80007b6:	f000 f8e3 	bl	8000980 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80007ba:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80007be:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80007c0:	f107 0308 	add.w	r3, r7, #8
 80007c4:	4619      	mov	r1, r3
 80007c6:	480d      	ldr	r0, [pc, #52]	@ (80007fc <MX_TIM2_Init+0x94>)
 80007c8:	f002 fa27 	bl	8002c1a <HAL_TIM_ConfigClockSource>
 80007cc:	4603      	mov	r3, r0
 80007ce:	2b00      	cmp	r3, #0
 80007d0:	d001      	beq.n	80007d6 <MX_TIM2_Init+0x6e>
  {
    Error_Handler();
 80007d2:	f000 f8d5 	bl	8000980 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80007d6:	2300      	movs	r3, #0
 80007d8:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80007da:	2300      	movs	r3, #0
 80007dc:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80007de:	463b      	mov	r3, r7
 80007e0:	4619      	mov	r1, r3
 80007e2:	4806      	ldr	r0, [pc, #24]	@ (80007fc <MX_TIM2_Init+0x94>)
 80007e4:	f002 fc20 	bl	8003028 <HAL_TIMEx_MasterConfigSynchronization>
 80007e8:	4603      	mov	r3, r0
 80007ea:	2b00      	cmp	r3, #0
 80007ec:	d001      	beq.n	80007f2 <MX_TIM2_Init+0x8a>
  {
    Error_Handler();
 80007ee:	f000 f8c7 	bl	8000980 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80007f2:	bf00      	nop
 80007f4:	3718      	adds	r7, #24
 80007f6:	46bd      	mov	sp, r7
 80007f8:	bd80      	pop	{r7, pc}
 80007fa:	bf00      	nop
 80007fc:	2000046c 	.word	0x2000046c

08000800 <MX_USB_OTG_FS_HCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_HCD_Init(void)
{
 8000800:	b580      	push	{r7, lr}
 8000802:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8000804:	4b0e      	ldr	r3, [pc, #56]	@ (8000840 <MX_USB_OTG_FS_HCD_Init+0x40>)
 8000806:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 800080a:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 12;
 800080c:	4b0c      	ldr	r3, [pc, #48]	@ (8000840 <MX_USB_OTG_FS_HCD_Init+0x40>)
 800080e:	220c      	movs	r2, #12
 8000810:	715a      	strb	r2, [r3, #5]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 8000812:	4b0b      	ldr	r3, [pc, #44]	@ (8000840 <MX_USB_OTG_FS_HCD_Init+0x40>)
 8000814:	2201      	movs	r2, #1
 8000816:	71da      	strb	r2, [r3, #7]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8000818:	4b09      	ldr	r3, [pc, #36]	@ (8000840 <MX_USB_OTG_FS_HCD_Init+0x40>)
 800081a:	2200      	movs	r2, #0
 800081c:	719a      	strb	r2, [r3, #6]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 800081e:	4b08      	ldr	r3, [pc, #32]	@ (8000840 <MX_USB_OTG_FS_HCD_Init+0x40>)
 8000820:	2202      	movs	r2, #2
 8000822:	725a      	strb	r2, [r3, #9]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8000824:	4b06      	ldr	r3, [pc, #24]	@ (8000840 <MX_USB_OTG_FS_HCD_Init+0x40>)
 8000826:	2200      	movs	r2, #0
 8000828:	729a      	strb	r2, [r3, #10]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 800082a:	4805      	ldr	r0, [pc, #20]	@ (8000840 <MX_USB_OTG_FS_HCD_Init+0x40>)
 800082c:	f001 f861 	bl	80018f2 <HAL_HCD_Init>
 8000830:	4603      	mov	r3, r0
 8000832:	2b00      	cmp	r3, #0
 8000834:	d001      	beq.n	800083a <MX_USB_OTG_FS_HCD_Init+0x3a>
  {
    Error_Handler();
 8000836:	f000 f8a3 	bl	8000980 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 800083a:	bf00      	nop
 800083c:	bd80      	pop	{r7, pc}
 800083e:	bf00      	nop
 8000840:	20000514 	.word	0x20000514

08000844 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000844:	b580      	push	{r7, lr}
 8000846:	b082      	sub	sp, #8
 8000848:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
	__HAL_RCC_DMA1_CLK_ENABLE();
 800084a:	2300      	movs	r3, #0
 800084c:	607b      	str	r3, [r7, #4]
 800084e:	4b0c      	ldr	r3, [pc, #48]	@ (8000880 <MX_DMA_Init+0x3c>)
 8000850:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000852:	4a0b      	ldr	r2, [pc, #44]	@ (8000880 <MX_DMA_Init+0x3c>)
 8000854:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000858:	6313      	str	r3, [r2, #48]	@ 0x30
 800085a:	4b09      	ldr	r3, [pc, #36]	@ (8000880 <MX_DMA_Init+0x3c>)
 800085c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800085e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000862:	607b      	str	r3, [r7, #4]
 8000864:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 8000866:	2200      	movs	r2, #0
 8000868:	2100      	movs	r1, #0
 800086a:	200c      	movs	r0, #12
 800086c:	f000 fb73 	bl	8000f56 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8000870:	200c      	movs	r0, #12
 8000872:	f000 fb8c 	bl	8000f8e <HAL_NVIC_EnableIRQ>

}
 8000876:	bf00      	nop
 8000878:	3708      	adds	r7, #8
 800087a:	46bd      	mov	sp, r7
 800087c:	bd80      	pop	{r7, pc}
 800087e:	bf00      	nop
 8000880:	40023800 	.word	0x40023800

08000884 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000884:	b580      	push	{r7, lr}
 8000886:	b08a      	sub	sp, #40	@ 0x28
 8000888:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800088a:	f107 0314 	add.w	r3, r7, #20
 800088e:	2200      	movs	r2, #0
 8000890:	601a      	str	r2, [r3, #0]
 8000892:	605a      	str	r2, [r3, #4]
 8000894:	609a      	str	r2, [r3, #8]
 8000896:	60da      	str	r2, [r3, #12]
 8000898:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800089a:	2300      	movs	r3, #0
 800089c:	613b      	str	r3, [r7, #16]
 800089e:	4b35      	ldr	r3, [pc, #212]	@ (8000974 <MX_GPIO_Init+0xf0>)
 80008a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008a2:	4a34      	ldr	r2, [pc, #208]	@ (8000974 <MX_GPIO_Init+0xf0>)
 80008a4:	f043 0304 	orr.w	r3, r3, #4
 80008a8:	6313      	str	r3, [r2, #48]	@ 0x30
 80008aa:	4b32      	ldr	r3, [pc, #200]	@ (8000974 <MX_GPIO_Init+0xf0>)
 80008ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008ae:	f003 0304 	and.w	r3, r3, #4
 80008b2:	613b      	str	r3, [r7, #16]
 80008b4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80008b6:	2300      	movs	r3, #0
 80008b8:	60fb      	str	r3, [r7, #12]
 80008ba:	4b2e      	ldr	r3, [pc, #184]	@ (8000974 <MX_GPIO_Init+0xf0>)
 80008bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008be:	4a2d      	ldr	r2, [pc, #180]	@ (8000974 <MX_GPIO_Init+0xf0>)
 80008c0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80008c4:	6313      	str	r3, [r2, #48]	@ 0x30
 80008c6:	4b2b      	ldr	r3, [pc, #172]	@ (8000974 <MX_GPIO_Init+0xf0>)
 80008c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008ca:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80008ce:	60fb      	str	r3, [r7, #12]
 80008d0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80008d2:	2300      	movs	r3, #0
 80008d4:	60bb      	str	r3, [r7, #8]
 80008d6:	4b27      	ldr	r3, [pc, #156]	@ (8000974 <MX_GPIO_Init+0xf0>)
 80008d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008da:	4a26      	ldr	r2, [pc, #152]	@ (8000974 <MX_GPIO_Init+0xf0>)
 80008dc:	f043 0301 	orr.w	r3, r3, #1
 80008e0:	6313      	str	r3, [r2, #48]	@ 0x30
 80008e2:	4b24      	ldr	r3, [pc, #144]	@ (8000974 <MX_GPIO_Init+0xf0>)
 80008e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008e6:	f003 0301 	and.w	r3, r3, #1
 80008ea:	60bb      	str	r3, [r7, #8]
 80008ec:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80008ee:	2300      	movs	r3, #0
 80008f0:	607b      	str	r3, [r7, #4]
 80008f2:	4b20      	ldr	r3, [pc, #128]	@ (8000974 <MX_GPIO_Init+0xf0>)
 80008f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008f6:	4a1f      	ldr	r2, [pc, #124]	@ (8000974 <MX_GPIO_Init+0xf0>)
 80008f8:	f043 0302 	orr.w	r3, r3, #2
 80008fc:	6313      	str	r3, [r2, #48]	@ 0x30
 80008fe:	4b1d      	ldr	r3, [pc, #116]	@ (8000974 <MX_GPIO_Init+0xf0>)
 8000900:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000902:	f003 0302 	and.w	r3, r3, #2
 8000906:	607b      	str	r3, [r7, #4]
 8000908:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 800090a:	2200      	movs	r2, #0
 800090c:	2120      	movs	r1, #32
 800090e:	481a      	ldr	r0, [pc, #104]	@ (8000978 <MX_GPIO_Init+0xf4>)
 8000910:	f000 ffd6 	bl	80018c0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000914:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000918:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800091a:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 800091e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000920:	2300      	movs	r3, #0
 8000922:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000924:	f107 0314 	add.w	r3, r7, #20
 8000928:	4619      	mov	r1, r3
 800092a:	4814      	ldr	r0, [pc, #80]	@ (800097c <MX_GPIO_Init+0xf8>)
 800092c:	f000 fe34 	bl	8001598 <HAL_GPIO_Init>

  /*Configure GPIO pins : USART_TX_Pin USART_RX_Pin */
  GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000930:	230c      	movs	r3, #12
 8000932:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000934:	2302      	movs	r3, #2
 8000936:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000938:	2300      	movs	r3, #0
 800093a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800093c:	2303      	movs	r3, #3
 800093e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000940:	2307      	movs	r3, #7
 8000942:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000944:	f107 0314 	add.w	r3, r7, #20
 8000948:	4619      	mov	r1, r3
 800094a:	480b      	ldr	r0, [pc, #44]	@ (8000978 <MX_GPIO_Init+0xf4>)
 800094c:	f000 fe24 	bl	8001598 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 8000950:	2320      	movs	r3, #32
 8000952:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000954:	2301      	movs	r3, #1
 8000956:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000958:	2300      	movs	r3, #0
 800095a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800095c:	2303      	movs	r3, #3
 800095e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000960:	f107 0314 	add.w	r3, r7, #20
 8000964:	4619      	mov	r1, r3
 8000966:	4804      	ldr	r0, [pc, #16]	@ (8000978 <MX_GPIO_Init+0xf4>)
 8000968:	f000 fe16 	bl	8001598 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 800096c:	bf00      	nop
 800096e:	3728      	adds	r7, #40	@ 0x28
 8000970:	46bd      	mov	sp, r7
 8000972:	bd80      	pop	{r7, pc}
 8000974:	40023800 	.word	0x40023800
 8000978:	40020000 	.word	0x40020000
 800097c:	40020800 	.word	0x40020800

08000980 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000980:	b480      	push	{r7}
 8000982:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000984:	b672      	cpsid	i
}
 8000986:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000988:	bf00      	nop
 800098a:	e7fd      	b.n	8000988 <Error_Handler+0x8>

0800098c <tusb_time_millis_api>:
     ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */
}
#endif /* USE_FULL_ASSERT */

uint32_t tusb_time_millis_api(void) {
 800098c:	b580      	push	{r7, lr}
 800098e:	af00      	add	r7, sp, #0
  return HAL_GetTick();   // HAL tick is 1 ms if SysTick is running
 8000990:	f000 f9d6 	bl	8000d40 <HAL_GetTick>
 8000994:	4603      	mov	r3, r0
}
 8000996:	4618      	mov	r0, r3
 8000998:	bd80      	pop	{r7, pc}
	...

0800099c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800099c:	b580      	push	{r7, lr}
 800099e:	b082      	sub	sp, #8
 80009a0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80009a2:	2300      	movs	r3, #0
 80009a4:	607b      	str	r3, [r7, #4]
 80009a6:	4b10      	ldr	r3, [pc, #64]	@ (80009e8 <HAL_MspInit+0x4c>)
 80009a8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80009aa:	4a0f      	ldr	r2, [pc, #60]	@ (80009e8 <HAL_MspInit+0x4c>)
 80009ac:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80009b0:	6453      	str	r3, [r2, #68]	@ 0x44
 80009b2:	4b0d      	ldr	r3, [pc, #52]	@ (80009e8 <HAL_MspInit+0x4c>)
 80009b4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80009b6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80009ba:	607b      	str	r3, [r7, #4]
 80009bc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80009be:	2300      	movs	r3, #0
 80009c0:	603b      	str	r3, [r7, #0]
 80009c2:	4b09      	ldr	r3, [pc, #36]	@ (80009e8 <HAL_MspInit+0x4c>)
 80009c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80009c6:	4a08      	ldr	r2, [pc, #32]	@ (80009e8 <HAL_MspInit+0x4c>)
 80009c8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80009cc:	6413      	str	r3, [r2, #64]	@ 0x40
 80009ce:	4b06      	ldr	r3, [pc, #24]	@ (80009e8 <HAL_MspInit+0x4c>)
 80009d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80009d2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80009d6:	603b      	str	r3, [r7, #0]
 80009d8:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80009da:	2007      	movs	r0, #7
 80009dc:	f000 fab0 	bl	8000f40 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80009e0:	bf00      	nop
 80009e2:	3708      	adds	r7, #8
 80009e4:	46bd      	mov	sp, r7
 80009e6:	bd80      	pop	{r7, pc}
 80009e8:	40023800 	.word	0x40023800

080009ec <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80009ec:	b580      	push	{r7, lr}
 80009ee:	b084      	sub	sp, #16
 80009f0:	af00      	add	r7, sp, #0
 80009f2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80009f4:	687b      	ldr	r3, [r7, #4]
 80009f6:	681b      	ldr	r3, [r3, #0]
 80009f8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80009fc:	d144      	bne.n	8000a88 <HAL_TIM_Base_MspInit+0x9c>
  {
    /* USER CODE BEGIN TIM2_MspInit 0 */

    /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80009fe:	2300      	movs	r3, #0
 8000a00:	60fb      	str	r3, [r7, #12]
 8000a02:	4b23      	ldr	r3, [pc, #140]	@ (8000a90 <HAL_TIM_Base_MspInit+0xa4>)
 8000a04:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a06:	4a22      	ldr	r2, [pc, #136]	@ (8000a90 <HAL_TIM_Base_MspInit+0xa4>)
 8000a08:	f043 0301 	orr.w	r3, r3, #1
 8000a0c:	6413      	str	r3, [r2, #64]	@ 0x40
 8000a0e:	4b20      	ldr	r3, [pc, #128]	@ (8000a90 <HAL_TIM_Base_MspInit+0xa4>)
 8000a10:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a12:	f003 0301 	and.w	r3, r3, #1
 8000a16:	60fb      	str	r3, [r7, #12]
 8000a18:	68fb      	ldr	r3, [r7, #12]

    /* TIM2 DMA Init */
    /* TIM2_UP_CH3 Init */
    hdma_tim2_up_ch3.Instance = DMA1_Stream1;
 8000a1a:	4b1e      	ldr	r3, [pc, #120]	@ (8000a94 <HAL_TIM_Base_MspInit+0xa8>)
 8000a1c:	4a1e      	ldr	r2, [pc, #120]	@ (8000a98 <HAL_TIM_Base_MspInit+0xac>)
 8000a1e:	601a      	str	r2, [r3, #0]
    hdma_tim2_up_ch3.Init.Channel = DMA_CHANNEL_3;
 8000a20:	4b1c      	ldr	r3, [pc, #112]	@ (8000a94 <HAL_TIM_Base_MspInit+0xa8>)
 8000a22:	f04f 62c0 	mov.w	r2, #100663296	@ 0x6000000
 8000a26:	605a      	str	r2, [r3, #4]
    hdma_tim2_up_ch3.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000a28:	4b1a      	ldr	r3, [pc, #104]	@ (8000a94 <HAL_TIM_Base_MspInit+0xa8>)
 8000a2a:	2240      	movs	r2, #64	@ 0x40
 8000a2c:	609a      	str	r2, [r3, #8]
    hdma_tim2_up_ch3.Init.PeriphInc = DMA_PINC_DISABLE;
 8000a2e:	4b19      	ldr	r3, [pc, #100]	@ (8000a94 <HAL_TIM_Base_MspInit+0xa8>)
 8000a30:	2200      	movs	r2, #0
 8000a32:	60da      	str	r2, [r3, #12]
    hdma_tim2_up_ch3.Init.MemInc = DMA_MINC_ENABLE;
 8000a34:	4b17      	ldr	r3, [pc, #92]	@ (8000a94 <HAL_TIM_Base_MspInit+0xa8>)
 8000a36:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000a3a:	611a      	str	r2, [r3, #16]
    hdma_tim2_up_ch3.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8000a3c:	4b15      	ldr	r3, [pc, #84]	@ (8000a94 <HAL_TIM_Base_MspInit+0xa8>)
 8000a3e:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8000a42:	615a      	str	r2, [r3, #20]
    hdma_tim2_up_ch3.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8000a44:	4b13      	ldr	r3, [pc, #76]	@ (8000a94 <HAL_TIM_Base_MspInit+0xa8>)
 8000a46:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000a4a:	619a      	str	r2, [r3, #24]
    hdma_tim2_up_ch3.Init.Mode = DMA_NORMAL;
 8000a4c:	4b11      	ldr	r3, [pc, #68]	@ (8000a94 <HAL_TIM_Base_MspInit+0xa8>)
 8000a4e:	2200      	movs	r2, #0
 8000a50:	61da      	str	r2, [r3, #28]
    hdma_tim2_up_ch3.Init.Priority = DMA_PRIORITY_HIGH;
 8000a52:	4b10      	ldr	r3, [pc, #64]	@ (8000a94 <HAL_TIM_Base_MspInit+0xa8>)
 8000a54:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8000a58:	621a      	str	r2, [r3, #32]
    hdma_tim2_up_ch3.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000a5a:	4b0e      	ldr	r3, [pc, #56]	@ (8000a94 <HAL_TIM_Base_MspInit+0xa8>)
 8000a5c:	2200      	movs	r2, #0
 8000a5e:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_tim2_up_ch3) != HAL_OK)
 8000a60:	480c      	ldr	r0, [pc, #48]	@ (8000a94 <HAL_TIM_Base_MspInit+0xa8>)
 8000a62:	f000 faaf 	bl	8000fc4 <HAL_DMA_Init>
 8000a66:	4603      	mov	r3, r0
 8000a68:	2b00      	cmp	r3, #0
 8000a6a:	d001      	beq.n	8000a70 <HAL_TIM_Base_MspInit+0x84>
    {
      Error_Handler();
 8000a6c:	f7ff ff88 	bl	8000980 <Error_Handler>
    }

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one stream to perform all the requested DMAs. */
    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_UPDATE],hdma_tim2_up_ch3);
 8000a70:	687b      	ldr	r3, [r7, #4]
 8000a72:	4a08      	ldr	r2, [pc, #32]	@ (8000a94 <HAL_TIM_Base_MspInit+0xa8>)
 8000a74:	621a      	str	r2, [r3, #32]
 8000a76:	4a07      	ldr	r2, [pc, #28]	@ (8000a94 <HAL_TIM_Base_MspInit+0xa8>)
 8000a78:	687b      	ldr	r3, [r7, #4]
 8000a7a:	6393      	str	r3, [r2, #56]	@ 0x38
    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC3],hdma_tim2_up_ch3);
 8000a7c:	687b      	ldr	r3, [r7, #4]
 8000a7e:	4a05      	ldr	r2, [pc, #20]	@ (8000a94 <HAL_TIM_Base_MspInit+0xa8>)
 8000a80:	62da      	str	r2, [r3, #44]	@ 0x2c
 8000a82:	4a04      	ldr	r2, [pc, #16]	@ (8000a94 <HAL_TIM_Base_MspInit+0xa8>)
 8000a84:	687b      	ldr	r3, [r7, #4]
 8000a86:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USER CODE END TIM2_MspInit 1 */

  }

}
 8000a88:	bf00      	nop
 8000a8a:	3710      	adds	r7, #16
 8000a8c:	46bd      	mov	sp, r7
 8000a8e:	bd80      	pop	{r7, pc}
 8000a90:	40023800 	.word	0x40023800
 8000a94:	200004b4 	.word	0x200004b4
 8000a98:	40026028 	.word	0x40026028

08000a9c <HAL_HCD_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hhcd: HCD handle pointer
  * @retval None
  */
void HAL_HCD_MspInit(HCD_HandleTypeDef* hhcd)
{
 8000a9c:	b580      	push	{r7, lr}
 8000a9e:	b0a0      	sub	sp, #128	@ 0x80
 8000aa0:	af00      	add	r7, sp, #0
 8000aa2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000aa4:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8000aa8:	2200      	movs	r2, #0
 8000aaa:	601a      	str	r2, [r3, #0]
 8000aac:	605a      	str	r2, [r3, #4]
 8000aae:	609a      	str	r2, [r3, #8]
 8000ab0:	60da      	str	r2, [r3, #12]
 8000ab2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000ab4:	f107 0310 	add.w	r3, r7, #16
 8000ab8:	225c      	movs	r2, #92	@ 0x5c
 8000aba:	2100      	movs	r1, #0
 8000abc:	4618      	mov	r0, r3
 8000abe:	f007 fac6 	bl	800804e <memset>
  if(hhcd->Instance==USB_OTG_FS)
 8000ac2:	687b      	ldr	r3, [r7, #4]
 8000ac4:	681b      	ldr	r3, [r3, #0]
 8000ac6:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8000aca:	d14c      	bne.n	8000b66 <HAL_HCD_MspInit+0xca>

    /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 8000acc:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000ad0:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.PLLSAI.PLLSAIM = 4;
 8000ad2:	2304      	movs	r3, #4
 8000ad4:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInitStruct.PLLSAI.PLLSAIN = 96;
 8000ad6:	2360      	movs	r3, #96	@ 0x60
 8000ad8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    PeriphClkInitStruct.PLLSAI.PLLSAIQ = 2;
 8000ada:	2302      	movs	r3, #2
 8000adc:	637b      	str	r3, [r7, #52]	@ 0x34
    PeriphClkInitStruct.PLLSAI.PLLSAIP = RCC_PLLSAIP_DIV4;
 8000ade:	2304      	movs	r3, #4
 8000ae0:	633b      	str	r3, [r7, #48]	@ 0x30
    PeriphClkInitStruct.PLLSAIDivQ = 1;
 8000ae2:	2301      	movs	r3, #1
 8000ae4:	63fb      	str	r3, [r7, #60]	@ 0x3c
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48CLKSOURCE_PLLSAIP;
 8000ae6:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8000aea:	667b      	str	r3, [r7, #100]	@ 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000aec:	f107 0310 	add.w	r3, r7, #16
 8000af0:	4618      	mov	r0, r3
 8000af2:	f001 f84b 	bl	8001b8c <HAL_RCCEx_PeriphCLKConfig>
 8000af6:	4603      	mov	r3, r0
 8000af8:	2b00      	cmp	r3, #0
 8000afa:	d001      	beq.n	8000b00 <HAL_HCD_MspInit+0x64>
    {
      Error_Handler();
 8000afc:	f7ff ff40 	bl	8000980 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b00:	2300      	movs	r3, #0
 8000b02:	60fb      	str	r3, [r7, #12]
 8000b04:	4b1a      	ldr	r3, [pc, #104]	@ (8000b70 <HAL_HCD_MspInit+0xd4>)
 8000b06:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b08:	4a19      	ldr	r2, [pc, #100]	@ (8000b70 <HAL_HCD_MspInit+0xd4>)
 8000b0a:	f043 0301 	orr.w	r3, r3, #1
 8000b0e:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b10:	4b17      	ldr	r3, [pc, #92]	@ (8000b70 <HAL_HCD_MspInit+0xd4>)
 8000b12:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b14:	f003 0301 	and.w	r3, r3, #1
 8000b18:	60fb      	str	r3, [r7, #12]
 8000b1a:	68fb      	ldr	r3, [r7, #12]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8000b1c:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8000b20:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b22:	2302      	movs	r3, #2
 8000b24:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b26:	2300      	movs	r3, #0
 8000b28:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b2a:	2303      	movs	r3, #3
 8000b2c:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000b2e:	230a      	movs	r3, #10
 8000b30:	67fb      	str	r3, [r7, #124]	@ 0x7c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b32:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8000b36:	4619      	mov	r1, r3
 8000b38:	480e      	ldr	r0, [pc, #56]	@ (8000b74 <HAL_HCD_MspInit+0xd8>)
 8000b3a:	f000 fd2d 	bl	8001598 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8000b3e:	4b0c      	ldr	r3, [pc, #48]	@ (8000b70 <HAL_HCD_MspInit+0xd4>)
 8000b40:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000b42:	4a0b      	ldr	r2, [pc, #44]	@ (8000b70 <HAL_HCD_MspInit+0xd4>)
 8000b44:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000b48:	6353      	str	r3, [r2, #52]	@ 0x34
 8000b4a:	2300      	movs	r3, #0
 8000b4c:	60bb      	str	r3, [r7, #8]
 8000b4e:	4b08      	ldr	r3, [pc, #32]	@ (8000b70 <HAL_HCD_MspInit+0xd4>)
 8000b50:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000b52:	4a07      	ldr	r2, [pc, #28]	@ (8000b70 <HAL_HCD_MspInit+0xd4>)
 8000b54:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000b58:	6453      	str	r3, [r2, #68]	@ 0x44
 8000b5a:	4b05      	ldr	r3, [pc, #20]	@ (8000b70 <HAL_HCD_MspInit+0xd4>)
 8000b5c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000b5e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000b62:	60bb      	str	r3, [r7, #8]
 8000b64:	68bb      	ldr	r3, [r7, #8]

    /* USER CODE END USB_OTG_FS_MspInit 1 */

  }

}
 8000b66:	bf00      	nop
 8000b68:	3780      	adds	r7, #128	@ 0x80
 8000b6a:	46bd      	mov	sp, r7
 8000b6c:	bd80      	pop	{r7, pc}
 8000b6e:	bf00      	nop
 8000b70:	40023800 	.word	0x40023800
 8000b74:	40020000 	.word	0x40020000

08000b78 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b78:	b480      	push	{r7}
 8000b7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000b7c:	bf00      	nop
 8000b7e:	e7fd      	b.n	8000b7c <NMI_Handler+0x4>

08000b80 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b80:	b480      	push	{r7}
 8000b82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b84:	bf00      	nop
 8000b86:	e7fd      	b.n	8000b84 <HardFault_Handler+0x4>

08000b88 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b88:	b480      	push	{r7}
 8000b8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b8c:	bf00      	nop
 8000b8e:	e7fd      	b.n	8000b8c <MemManage_Handler+0x4>

08000b90 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b90:	b480      	push	{r7}
 8000b92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b94:	bf00      	nop
 8000b96:	e7fd      	b.n	8000b94 <BusFault_Handler+0x4>

08000b98 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b98:	b480      	push	{r7}
 8000b9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b9c:	bf00      	nop
 8000b9e:	e7fd      	b.n	8000b9c <UsageFault_Handler+0x4>

08000ba0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000ba0:	b480      	push	{r7}
 8000ba2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000ba4:	bf00      	nop
 8000ba6:	46bd      	mov	sp, r7
 8000ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bac:	4770      	bx	lr

08000bae <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000bae:	b480      	push	{r7}
 8000bb0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000bb2:	bf00      	nop
 8000bb4:	46bd      	mov	sp, r7
 8000bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bba:	4770      	bx	lr

08000bbc <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000bbc:	b480      	push	{r7}
 8000bbe:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000bc0:	bf00      	nop
 8000bc2:	46bd      	mov	sp, r7
 8000bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bc8:	4770      	bx	lr

08000bca <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000bca:	b580      	push	{r7, lr}
 8000bcc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000bce:	f000 f8a3 	bl	8000d18 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000bd2:	bf00      	nop
 8000bd4:	bd80      	pop	{r7, pc}
	...

08000bd8 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8000bd8:	b580      	push	{r7, lr}
 8000bda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim2_up_ch3);
 8000bdc:	4802      	ldr	r0, [pc, #8]	@ (8000be8 <DMA1_Stream1_IRQHandler+0x10>)
 8000bde:	f000 fa9f 	bl	8001120 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8000be2:	bf00      	nop
 8000be4:	bd80      	pop	{r7, pc}
 8000be6:	bf00      	nop
 8000be8:	200004b4 	.word	0x200004b4

08000bec <OTG_FS_IRQHandler>:

/* USER CODE BEGIN 1 */
void OTG_FS_IRQHandler(void)
{
 8000bec:	b480      	push	{r7}
 8000bee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */
//  tuh_int_handler(0);
  return;
 8000bf0:	bf00      	nop
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000bf2:	46bd      	mov	sp, r7
 8000bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bf8:	4770      	bx	lr
	...

08000bfc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000bfc:	b480      	push	{r7}
 8000bfe:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000c00:	4b06      	ldr	r3, [pc, #24]	@ (8000c1c <SystemInit+0x20>)
 8000c02:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000c06:	4a05      	ldr	r2, [pc, #20]	@ (8000c1c <SystemInit+0x20>)
 8000c08:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000c0c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000c10:	bf00      	nop
 8000c12:	46bd      	mov	sp, r7
 8000c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c18:	4770      	bx	lr
 8000c1a:	bf00      	nop
 8000c1c:	e000ed00 	.word	0xe000ed00

08000c20 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000c20:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000c58 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000c24:	f7ff ffea 	bl	8000bfc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000c28:	480c      	ldr	r0, [pc, #48]	@ (8000c5c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000c2a:	490d      	ldr	r1, [pc, #52]	@ (8000c60 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000c2c:	4a0d      	ldr	r2, [pc, #52]	@ (8000c64 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000c2e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000c30:	e002      	b.n	8000c38 <LoopCopyDataInit>

08000c32 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000c32:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000c34:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000c36:	3304      	adds	r3, #4

08000c38 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000c38:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000c3a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000c3c:	d3f9      	bcc.n	8000c32 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000c3e:	4a0a      	ldr	r2, [pc, #40]	@ (8000c68 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000c40:	4c0a      	ldr	r4, [pc, #40]	@ (8000c6c <LoopFillZerobss+0x22>)
  movs r3, #0
 8000c42:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000c44:	e001      	b.n	8000c4a <LoopFillZerobss>

08000c46 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000c46:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c48:	3204      	adds	r2, #4

08000c4a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000c4a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000c4c:	d3fb      	bcc.n	8000c46 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8000c4e:	f007 fa07 	bl	8008060 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000c52:	f7ff fcfb 	bl	800064c <main>
  bx  lr    
 8000c56:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000c58:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000c5c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000c60:	2000003c 	.word	0x2000003c
  ldr r2, =_sidata
 8000c64:	08008160 	.word	0x08008160
  ldr r2, =_sbss
 8000c68:	2000003c 	.word	0x2000003c
  ldr r4, =_ebss
 8000c6c:	20000dc4 	.word	0x20000dc4

08000c70 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000c70:	e7fe      	b.n	8000c70 <ADC_IRQHandler>
	...

08000c74 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c74:	b580      	push	{r7, lr}
 8000c76:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000c78:	4b0e      	ldr	r3, [pc, #56]	@ (8000cb4 <HAL_Init+0x40>)
 8000c7a:	681b      	ldr	r3, [r3, #0]
 8000c7c:	4a0d      	ldr	r2, [pc, #52]	@ (8000cb4 <HAL_Init+0x40>)
 8000c7e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000c82:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000c84:	4b0b      	ldr	r3, [pc, #44]	@ (8000cb4 <HAL_Init+0x40>)
 8000c86:	681b      	ldr	r3, [r3, #0]
 8000c88:	4a0a      	ldr	r2, [pc, #40]	@ (8000cb4 <HAL_Init+0x40>)
 8000c8a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000c8e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000c90:	4b08      	ldr	r3, [pc, #32]	@ (8000cb4 <HAL_Init+0x40>)
 8000c92:	681b      	ldr	r3, [r3, #0]
 8000c94:	4a07      	ldr	r2, [pc, #28]	@ (8000cb4 <HAL_Init+0x40>)
 8000c96:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000c9a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000c9c:	2003      	movs	r0, #3
 8000c9e:	f000 f94f 	bl	8000f40 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000ca2:	2000      	movs	r0, #0
 8000ca4:	f000 f808 	bl	8000cb8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000ca8:	f7ff fe78 	bl	800099c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000cac:	2300      	movs	r3, #0
}
 8000cae:	4618      	mov	r0, r3
 8000cb0:	bd80      	pop	{r7, pc}
 8000cb2:	bf00      	nop
 8000cb4:	40023c00 	.word	0x40023c00

08000cb8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000cb8:	b580      	push	{r7, lr}
 8000cba:	b082      	sub	sp, #8
 8000cbc:	af00      	add	r7, sp, #0
 8000cbe:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000cc0:	4b12      	ldr	r3, [pc, #72]	@ (8000d0c <HAL_InitTick+0x54>)
 8000cc2:	681a      	ldr	r2, [r3, #0]
 8000cc4:	4b12      	ldr	r3, [pc, #72]	@ (8000d10 <HAL_InitTick+0x58>)
 8000cc6:	781b      	ldrb	r3, [r3, #0]
 8000cc8:	4619      	mov	r1, r3
 8000cca:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000cce:	fbb3 f3f1 	udiv	r3, r3, r1
 8000cd2:	fbb2 f3f3 	udiv	r3, r2, r3
 8000cd6:	4618      	mov	r0, r3
 8000cd8:	f000 f967 	bl	8000faa <HAL_SYSTICK_Config>
 8000cdc:	4603      	mov	r3, r0
 8000cde:	2b00      	cmp	r3, #0
 8000ce0:	d001      	beq.n	8000ce6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000ce2:	2301      	movs	r3, #1
 8000ce4:	e00e      	b.n	8000d04 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000ce6:	687b      	ldr	r3, [r7, #4]
 8000ce8:	2b0f      	cmp	r3, #15
 8000cea:	d80a      	bhi.n	8000d02 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000cec:	2200      	movs	r2, #0
 8000cee:	6879      	ldr	r1, [r7, #4]
 8000cf0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000cf4:	f000 f92f 	bl	8000f56 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000cf8:	4a06      	ldr	r2, [pc, #24]	@ (8000d14 <HAL_InitTick+0x5c>)
 8000cfa:	687b      	ldr	r3, [r7, #4]
 8000cfc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000cfe:	2300      	movs	r3, #0
 8000d00:	e000      	b.n	8000d04 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000d02:	2301      	movs	r3, #1
}
 8000d04:	4618      	mov	r0, r3
 8000d06:	3708      	adds	r7, #8
 8000d08:	46bd      	mov	sp, r7
 8000d0a:	bd80      	pop	{r7, pc}
 8000d0c:	20000000 	.word	0x20000000
 8000d10:	20000008 	.word	0x20000008
 8000d14:	20000004 	.word	0x20000004

08000d18 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000d18:	b480      	push	{r7}
 8000d1a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000d1c:	4b06      	ldr	r3, [pc, #24]	@ (8000d38 <HAL_IncTick+0x20>)
 8000d1e:	781b      	ldrb	r3, [r3, #0]
 8000d20:	461a      	mov	r2, r3
 8000d22:	4b06      	ldr	r3, [pc, #24]	@ (8000d3c <HAL_IncTick+0x24>)
 8000d24:	681b      	ldr	r3, [r3, #0]
 8000d26:	4413      	add	r3, r2
 8000d28:	4a04      	ldr	r2, [pc, #16]	@ (8000d3c <HAL_IncTick+0x24>)
 8000d2a:	6013      	str	r3, [r2, #0]
}
 8000d2c:	bf00      	nop
 8000d2e:	46bd      	mov	sp, r7
 8000d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d34:	4770      	bx	lr
 8000d36:	bf00      	nop
 8000d38:	20000008 	.word	0x20000008
 8000d3c:	200008f4 	.word	0x200008f4

08000d40 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d40:	b480      	push	{r7}
 8000d42:	af00      	add	r7, sp, #0
  return uwTick;
 8000d44:	4b03      	ldr	r3, [pc, #12]	@ (8000d54 <HAL_GetTick+0x14>)
 8000d46:	681b      	ldr	r3, [r3, #0]
}
 8000d48:	4618      	mov	r0, r3
 8000d4a:	46bd      	mov	sp, r7
 8000d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d50:	4770      	bx	lr
 8000d52:	bf00      	nop
 8000d54:	200008f4 	.word	0x200008f4

08000d58 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000d58:	b580      	push	{r7, lr}
 8000d5a:	b084      	sub	sp, #16
 8000d5c:	af00      	add	r7, sp, #0
 8000d5e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000d60:	f7ff ffee 	bl	8000d40 <HAL_GetTick>
 8000d64:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000d66:	687b      	ldr	r3, [r7, #4]
 8000d68:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000d6a:	68fb      	ldr	r3, [r7, #12]
 8000d6c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8000d70:	d005      	beq.n	8000d7e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000d72:	4b0a      	ldr	r3, [pc, #40]	@ (8000d9c <HAL_Delay+0x44>)
 8000d74:	781b      	ldrb	r3, [r3, #0]
 8000d76:	461a      	mov	r2, r3
 8000d78:	68fb      	ldr	r3, [r7, #12]
 8000d7a:	4413      	add	r3, r2
 8000d7c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000d7e:	bf00      	nop
 8000d80:	f7ff ffde 	bl	8000d40 <HAL_GetTick>
 8000d84:	4602      	mov	r2, r0
 8000d86:	68bb      	ldr	r3, [r7, #8]
 8000d88:	1ad3      	subs	r3, r2, r3
 8000d8a:	68fa      	ldr	r2, [r7, #12]
 8000d8c:	429a      	cmp	r2, r3
 8000d8e:	d8f7      	bhi.n	8000d80 <HAL_Delay+0x28>
  {
  }
}
 8000d90:	bf00      	nop
 8000d92:	bf00      	nop
 8000d94:	3710      	adds	r7, #16
 8000d96:	46bd      	mov	sp, r7
 8000d98:	bd80      	pop	{r7, pc}
 8000d9a:	bf00      	nop
 8000d9c:	20000008 	.word	0x20000008

08000da0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000da0:	b480      	push	{r7}
 8000da2:	b085      	sub	sp, #20
 8000da4:	af00      	add	r7, sp, #0
 8000da6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	f003 0307 	and.w	r3, r3, #7
 8000dae:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000db0:	4b0c      	ldr	r3, [pc, #48]	@ (8000de4 <__NVIC_SetPriorityGrouping+0x44>)
 8000db2:	68db      	ldr	r3, [r3, #12]
 8000db4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000db6:	68ba      	ldr	r2, [r7, #8]
 8000db8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000dbc:	4013      	ands	r3, r2
 8000dbe:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000dc0:	68fb      	ldr	r3, [r7, #12]
 8000dc2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000dc4:	68bb      	ldr	r3, [r7, #8]
 8000dc6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000dc8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000dcc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000dd0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000dd2:	4a04      	ldr	r2, [pc, #16]	@ (8000de4 <__NVIC_SetPriorityGrouping+0x44>)
 8000dd4:	68bb      	ldr	r3, [r7, #8]
 8000dd6:	60d3      	str	r3, [r2, #12]
}
 8000dd8:	bf00      	nop
 8000dda:	3714      	adds	r7, #20
 8000ddc:	46bd      	mov	sp, r7
 8000dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000de2:	4770      	bx	lr
 8000de4:	e000ed00 	.word	0xe000ed00

08000de8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000de8:	b480      	push	{r7}
 8000dea:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000dec:	4b04      	ldr	r3, [pc, #16]	@ (8000e00 <__NVIC_GetPriorityGrouping+0x18>)
 8000dee:	68db      	ldr	r3, [r3, #12]
 8000df0:	0a1b      	lsrs	r3, r3, #8
 8000df2:	f003 0307 	and.w	r3, r3, #7
}
 8000df6:	4618      	mov	r0, r3
 8000df8:	46bd      	mov	sp, r7
 8000dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dfe:	4770      	bx	lr
 8000e00:	e000ed00 	.word	0xe000ed00

08000e04 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e04:	b480      	push	{r7}
 8000e06:	b083      	sub	sp, #12
 8000e08:	af00      	add	r7, sp, #0
 8000e0a:	4603      	mov	r3, r0
 8000e0c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e0e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e12:	2b00      	cmp	r3, #0
 8000e14:	db0b      	blt.n	8000e2e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000e16:	79fb      	ldrb	r3, [r7, #7]
 8000e18:	f003 021f 	and.w	r2, r3, #31
 8000e1c:	4907      	ldr	r1, [pc, #28]	@ (8000e3c <__NVIC_EnableIRQ+0x38>)
 8000e1e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e22:	095b      	lsrs	r3, r3, #5
 8000e24:	2001      	movs	r0, #1
 8000e26:	fa00 f202 	lsl.w	r2, r0, r2
 8000e2a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000e2e:	bf00      	nop
 8000e30:	370c      	adds	r7, #12
 8000e32:	46bd      	mov	sp, r7
 8000e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e38:	4770      	bx	lr
 8000e3a:	bf00      	nop
 8000e3c:	e000e100 	.word	0xe000e100

08000e40 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000e40:	b480      	push	{r7}
 8000e42:	b083      	sub	sp, #12
 8000e44:	af00      	add	r7, sp, #0
 8000e46:	4603      	mov	r3, r0
 8000e48:	6039      	str	r1, [r7, #0]
 8000e4a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e4c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e50:	2b00      	cmp	r3, #0
 8000e52:	db0a      	blt.n	8000e6a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e54:	683b      	ldr	r3, [r7, #0]
 8000e56:	b2da      	uxtb	r2, r3
 8000e58:	490c      	ldr	r1, [pc, #48]	@ (8000e8c <__NVIC_SetPriority+0x4c>)
 8000e5a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e5e:	0112      	lsls	r2, r2, #4
 8000e60:	b2d2      	uxtb	r2, r2
 8000e62:	440b      	add	r3, r1
 8000e64:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000e68:	e00a      	b.n	8000e80 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e6a:	683b      	ldr	r3, [r7, #0]
 8000e6c:	b2da      	uxtb	r2, r3
 8000e6e:	4908      	ldr	r1, [pc, #32]	@ (8000e90 <__NVIC_SetPriority+0x50>)
 8000e70:	79fb      	ldrb	r3, [r7, #7]
 8000e72:	f003 030f 	and.w	r3, r3, #15
 8000e76:	3b04      	subs	r3, #4
 8000e78:	0112      	lsls	r2, r2, #4
 8000e7a:	b2d2      	uxtb	r2, r2
 8000e7c:	440b      	add	r3, r1
 8000e7e:	761a      	strb	r2, [r3, #24]
}
 8000e80:	bf00      	nop
 8000e82:	370c      	adds	r7, #12
 8000e84:	46bd      	mov	sp, r7
 8000e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e8a:	4770      	bx	lr
 8000e8c:	e000e100 	.word	0xe000e100
 8000e90:	e000ed00 	.word	0xe000ed00

08000e94 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e94:	b480      	push	{r7}
 8000e96:	b089      	sub	sp, #36	@ 0x24
 8000e98:	af00      	add	r7, sp, #0
 8000e9a:	60f8      	str	r0, [r7, #12]
 8000e9c:	60b9      	str	r1, [r7, #8]
 8000e9e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000ea0:	68fb      	ldr	r3, [r7, #12]
 8000ea2:	f003 0307 	and.w	r3, r3, #7
 8000ea6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000ea8:	69fb      	ldr	r3, [r7, #28]
 8000eaa:	f1c3 0307 	rsb	r3, r3, #7
 8000eae:	2b04      	cmp	r3, #4
 8000eb0:	bf28      	it	cs
 8000eb2:	2304      	movcs	r3, #4
 8000eb4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000eb6:	69fb      	ldr	r3, [r7, #28]
 8000eb8:	3304      	adds	r3, #4
 8000eba:	2b06      	cmp	r3, #6
 8000ebc:	d902      	bls.n	8000ec4 <NVIC_EncodePriority+0x30>
 8000ebe:	69fb      	ldr	r3, [r7, #28]
 8000ec0:	3b03      	subs	r3, #3
 8000ec2:	e000      	b.n	8000ec6 <NVIC_EncodePriority+0x32>
 8000ec4:	2300      	movs	r3, #0
 8000ec6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ec8:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8000ecc:	69bb      	ldr	r3, [r7, #24]
 8000ece:	fa02 f303 	lsl.w	r3, r2, r3
 8000ed2:	43da      	mvns	r2, r3
 8000ed4:	68bb      	ldr	r3, [r7, #8]
 8000ed6:	401a      	ands	r2, r3
 8000ed8:	697b      	ldr	r3, [r7, #20]
 8000eda:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000edc:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8000ee0:	697b      	ldr	r3, [r7, #20]
 8000ee2:	fa01 f303 	lsl.w	r3, r1, r3
 8000ee6:	43d9      	mvns	r1, r3
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000eec:	4313      	orrs	r3, r2
         );
}
 8000eee:	4618      	mov	r0, r3
 8000ef0:	3724      	adds	r7, #36	@ 0x24
 8000ef2:	46bd      	mov	sp, r7
 8000ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef8:	4770      	bx	lr
	...

08000efc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000efc:	b580      	push	{r7, lr}
 8000efe:	b082      	sub	sp, #8
 8000f00:	af00      	add	r7, sp, #0
 8000f02:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	3b01      	subs	r3, #1
 8000f08:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000f0c:	d301      	bcc.n	8000f12 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000f0e:	2301      	movs	r3, #1
 8000f10:	e00f      	b.n	8000f32 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000f12:	4a0a      	ldr	r2, [pc, #40]	@ (8000f3c <SysTick_Config+0x40>)
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	3b01      	subs	r3, #1
 8000f18:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000f1a:	210f      	movs	r1, #15
 8000f1c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000f20:	f7ff ff8e 	bl	8000e40 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000f24:	4b05      	ldr	r3, [pc, #20]	@ (8000f3c <SysTick_Config+0x40>)
 8000f26:	2200      	movs	r2, #0
 8000f28:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000f2a:	4b04      	ldr	r3, [pc, #16]	@ (8000f3c <SysTick_Config+0x40>)
 8000f2c:	2207      	movs	r2, #7
 8000f2e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000f30:	2300      	movs	r3, #0
}
 8000f32:	4618      	mov	r0, r3
 8000f34:	3708      	adds	r7, #8
 8000f36:	46bd      	mov	sp, r7
 8000f38:	bd80      	pop	{r7, pc}
 8000f3a:	bf00      	nop
 8000f3c:	e000e010 	.word	0xe000e010

08000f40 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f40:	b580      	push	{r7, lr}
 8000f42:	b082      	sub	sp, #8
 8000f44:	af00      	add	r7, sp, #0
 8000f46:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000f48:	6878      	ldr	r0, [r7, #4]
 8000f4a:	f7ff ff29 	bl	8000da0 <__NVIC_SetPriorityGrouping>
}
 8000f4e:	bf00      	nop
 8000f50:	3708      	adds	r7, #8
 8000f52:	46bd      	mov	sp, r7
 8000f54:	bd80      	pop	{r7, pc}

08000f56 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000f56:	b580      	push	{r7, lr}
 8000f58:	b086      	sub	sp, #24
 8000f5a:	af00      	add	r7, sp, #0
 8000f5c:	4603      	mov	r3, r0
 8000f5e:	60b9      	str	r1, [r7, #8]
 8000f60:	607a      	str	r2, [r7, #4]
 8000f62:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000f64:	2300      	movs	r3, #0
 8000f66:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000f68:	f7ff ff3e 	bl	8000de8 <__NVIC_GetPriorityGrouping>
 8000f6c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000f6e:	687a      	ldr	r2, [r7, #4]
 8000f70:	68b9      	ldr	r1, [r7, #8]
 8000f72:	6978      	ldr	r0, [r7, #20]
 8000f74:	f7ff ff8e 	bl	8000e94 <NVIC_EncodePriority>
 8000f78:	4602      	mov	r2, r0
 8000f7a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f7e:	4611      	mov	r1, r2
 8000f80:	4618      	mov	r0, r3
 8000f82:	f7ff ff5d 	bl	8000e40 <__NVIC_SetPriority>
}
 8000f86:	bf00      	nop
 8000f88:	3718      	adds	r7, #24
 8000f8a:	46bd      	mov	sp, r7
 8000f8c:	bd80      	pop	{r7, pc}

08000f8e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f8e:	b580      	push	{r7, lr}
 8000f90:	b082      	sub	sp, #8
 8000f92:	af00      	add	r7, sp, #0
 8000f94:	4603      	mov	r3, r0
 8000f96:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000f98:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f9c:	4618      	mov	r0, r3
 8000f9e:	f7ff ff31 	bl	8000e04 <__NVIC_EnableIRQ>
}
 8000fa2:	bf00      	nop
 8000fa4:	3708      	adds	r7, #8
 8000fa6:	46bd      	mov	sp, r7
 8000fa8:	bd80      	pop	{r7, pc}

08000faa <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000faa:	b580      	push	{r7, lr}
 8000fac:	b082      	sub	sp, #8
 8000fae:	af00      	add	r7, sp, #0
 8000fb0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000fb2:	6878      	ldr	r0, [r7, #4]
 8000fb4:	f7ff ffa2 	bl	8000efc <SysTick_Config>
 8000fb8:	4603      	mov	r3, r0
}
 8000fba:	4618      	mov	r0, r3
 8000fbc:	3708      	adds	r7, #8
 8000fbe:	46bd      	mov	sp, r7
 8000fc0:	bd80      	pop	{r7, pc}
	...

08000fc4 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8000fc4:	b580      	push	{r7, lr}
 8000fc6:	b086      	sub	sp, #24
 8000fc8:	af00      	add	r7, sp, #0
 8000fca:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8000fcc:	2300      	movs	r3, #0
 8000fce:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8000fd0:	f7ff feb6 	bl	8000d40 <HAL_GetTick>
 8000fd4:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	2b00      	cmp	r3, #0
 8000fda:	d101      	bne.n	8000fe0 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8000fdc:	2301      	movs	r3, #1
 8000fde:	e099      	b.n	8001114 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	2202      	movs	r2, #2
 8000fe4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	2200      	movs	r2, #0
 8000fec:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	681b      	ldr	r3, [r3, #0]
 8000ff4:	681a      	ldr	r2, [r3, #0]
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	681b      	ldr	r3, [r3, #0]
 8000ffa:	f022 0201 	bic.w	r2, r2, #1
 8000ffe:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001000:	e00f      	b.n	8001022 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001002:	f7ff fe9d 	bl	8000d40 <HAL_GetTick>
 8001006:	4602      	mov	r2, r0
 8001008:	693b      	ldr	r3, [r7, #16]
 800100a:	1ad3      	subs	r3, r2, r3
 800100c:	2b05      	cmp	r3, #5
 800100e:	d908      	bls.n	8001022 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	2220      	movs	r2, #32
 8001014:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	2203      	movs	r2, #3
 800101a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 800101e:	2303      	movs	r3, #3
 8001020:	e078      	b.n	8001114 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	681b      	ldr	r3, [r3, #0]
 8001026:	681b      	ldr	r3, [r3, #0]
 8001028:	f003 0301 	and.w	r3, r3, #1
 800102c:	2b00      	cmp	r3, #0
 800102e:	d1e8      	bne.n	8001002 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	681b      	ldr	r3, [r3, #0]
 8001034:	681b      	ldr	r3, [r3, #0]
 8001036:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001038:	697a      	ldr	r2, [r7, #20]
 800103a:	4b38      	ldr	r3, [pc, #224]	@ (800111c <HAL_DMA_Init+0x158>)
 800103c:	4013      	ands	r3, r2
 800103e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	685a      	ldr	r2, [r3, #4]
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	689b      	ldr	r3, [r3, #8]
 8001048:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800104e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	691b      	ldr	r3, [r3, #16]
 8001054:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800105a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	699b      	ldr	r3, [r3, #24]
 8001060:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001066:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	6a1b      	ldr	r3, [r3, #32]
 800106c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800106e:	697a      	ldr	r2, [r7, #20]
 8001070:	4313      	orrs	r3, r2
 8001072:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001078:	2b04      	cmp	r3, #4
 800107a:	d107      	bne.n	800108c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001084:	4313      	orrs	r3, r2
 8001086:	697a      	ldr	r2, [r7, #20]
 8001088:	4313      	orrs	r3, r2
 800108a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	681b      	ldr	r3, [r3, #0]
 8001090:	697a      	ldr	r2, [r7, #20]
 8001092:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	681b      	ldr	r3, [r3, #0]
 8001098:	695b      	ldr	r3, [r3, #20]
 800109a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800109c:	697b      	ldr	r3, [r7, #20]
 800109e:	f023 0307 	bic.w	r3, r3, #7
 80010a2:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80010a8:	697a      	ldr	r2, [r7, #20]
 80010aa:	4313      	orrs	r3, r2
 80010ac:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80010b2:	2b04      	cmp	r3, #4
 80010b4:	d117      	bne.n	80010e6 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80010ba:	697a      	ldr	r2, [r7, #20]
 80010bc:	4313      	orrs	r3, r2
 80010be:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80010c4:	2b00      	cmp	r3, #0
 80010c6:	d00e      	beq.n	80010e6 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80010c8:	6878      	ldr	r0, [r7, #4]
 80010ca:	f000 f9e9 	bl	80014a0 <DMA_CheckFifoParam>
 80010ce:	4603      	mov	r3, r0
 80010d0:	2b00      	cmp	r3, #0
 80010d2:	d008      	beq.n	80010e6 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	2240      	movs	r2, #64	@ 0x40
 80010d8:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	2201      	movs	r2, #1
 80010de:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 80010e2:	2301      	movs	r3, #1
 80010e4:	e016      	b.n	8001114 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	681b      	ldr	r3, [r3, #0]
 80010ea:	697a      	ldr	r2, [r7, #20]
 80010ec:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80010ee:	6878      	ldr	r0, [r7, #4]
 80010f0:	f000 f9a0 	bl	8001434 <DMA_CalcBaseAndBitshift>
 80010f4:	4603      	mov	r3, r0
 80010f6:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80010fc:	223f      	movs	r2, #63	@ 0x3f
 80010fe:	409a      	lsls	r2, r3
 8001100:	68fb      	ldr	r3, [r7, #12]
 8001102:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	2200      	movs	r2, #0
 8001108:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	2201      	movs	r2, #1
 800110e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8001112:	2300      	movs	r3, #0
}
 8001114:	4618      	mov	r0, r3
 8001116:	3718      	adds	r7, #24
 8001118:	46bd      	mov	sp, r7
 800111a:	bd80      	pop	{r7, pc}
 800111c:	f010803f 	.word	0xf010803f

08001120 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001120:	b580      	push	{r7, lr}
 8001122:	b086      	sub	sp, #24
 8001124:	af00      	add	r7, sp, #0
 8001126:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8001128:	2300      	movs	r3, #0
 800112a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 800112c:	4b8e      	ldr	r3, [pc, #568]	@ (8001368 <HAL_DMA_IRQHandler+0x248>)
 800112e:	681b      	ldr	r3, [r3, #0]
 8001130:	4a8e      	ldr	r2, [pc, #568]	@ (800136c <HAL_DMA_IRQHandler+0x24c>)
 8001132:	fba2 2303 	umull	r2, r3, r2, r3
 8001136:	0a9b      	lsrs	r3, r3, #10
 8001138:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800113e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001140:	693b      	ldr	r3, [r7, #16]
 8001142:	681b      	ldr	r3, [r3, #0]
 8001144:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800114a:	2208      	movs	r2, #8
 800114c:	409a      	lsls	r2, r3
 800114e:	68fb      	ldr	r3, [r7, #12]
 8001150:	4013      	ands	r3, r2
 8001152:	2b00      	cmp	r3, #0
 8001154:	d01a      	beq.n	800118c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	681b      	ldr	r3, [r3, #0]
 800115a:	681b      	ldr	r3, [r3, #0]
 800115c:	f003 0304 	and.w	r3, r3, #4
 8001160:	2b00      	cmp	r3, #0
 8001162:	d013      	beq.n	800118c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	681b      	ldr	r3, [r3, #0]
 8001168:	681a      	ldr	r2, [r3, #0]
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	681b      	ldr	r3, [r3, #0]
 800116e:	f022 0204 	bic.w	r2, r2, #4
 8001172:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001178:	2208      	movs	r2, #8
 800117a:	409a      	lsls	r2, r3
 800117c:	693b      	ldr	r3, [r7, #16]
 800117e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001184:	f043 0201 	orr.w	r2, r3, #1
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001190:	2201      	movs	r2, #1
 8001192:	409a      	lsls	r2, r3
 8001194:	68fb      	ldr	r3, [r7, #12]
 8001196:	4013      	ands	r3, r2
 8001198:	2b00      	cmp	r3, #0
 800119a:	d012      	beq.n	80011c2 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	681b      	ldr	r3, [r3, #0]
 80011a0:	695b      	ldr	r3, [r3, #20]
 80011a2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80011a6:	2b00      	cmp	r3, #0
 80011a8:	d00b      	beq.n	80011c2 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80011ae:	2201      	movs	r2, #1
 80011b0:	409a      	lsls	r2, r3
 80011b2:	693b      	ldr	r3, [r7, #16]
 80011b4:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80011ba:	f043 0202 	orr.w	r2, r3, #2
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80011c6:	2204      	movs	r2, #4
 80011c8:	409a      	lsls	r2, r3
 80011ca:	68fb      	ldr	r3, [r7, #12]
 80011cc:	4013      	ands	r3, r2
 80011ce:	2b00      	cmp	r3, #0
 80011d0:	d012      	beq.n	80011f8 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	681b      	ldr	r3, [r3, #0]
 80011d6:	681b      	ldr	r3, [r3, #0]
 80011d8:	f003 0302 	and.w	r3, r3, #2
 80011dc:	2b00      	cmp	r3, #0
 80011de:	d00b      	beq.n	80011f8 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80011e4:	2204      	movs	r2, #4
 80011e6:	409a      	lsls	r2, r3
 80011e8:	693b      	ldr	r3, [r7, #16]
 80011ea:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80011f0:	f043 0204 	orr.w	r2, r3, #4
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80011fc:	2210      	movs	r2, #16
 80011fe:	409a      	lsls	r2, r3
 8001200:	68fb      	ldr	r3, [r7, #12]
 8001202:	4013      	ands	r3, r2
 8001204:	2b00      	cmp	r3, #0
 8001206:	d043      	beq.n	8001290 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	681b      	ldr	r3, [r3, #0]
 800120c:	681b      	ldr	r3, [r3, #0]
 800120e:	f003 0308 	and.w	r3, r3, #8
 8001212:	2b00      	cmp	r3, #0
 8001214:	d03c      	beq.n	8001290 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800121a:	2210      	movs	r2, #16
 800121c:	409a      	lsls	r2, r3
 800121e:	693b      	ldr	r3, [r7, #16]
 8001220:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	681b      	ldr	r3, [r3, #0]
 8001226:	681b      	ldr	r3, [r3, #0]
 8001228:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800122c:	2b00      	cmp	r3, #0
 800122e:	d018      	beq.n	8001262 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	681b      	ldr	r3, [r3, #0]
 8001234:	681b      	ldr	r3, [r3, #0]
 8001236:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800123a:	2b00      	cmp	r3, #0
 800123c:	d108      	bne.n	8001250 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001242:	2b00      	cmp	r3, #0
 8001244:	d024      	beq.n	8001290 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800124a:	6878      	ldr	r0, [r7, #4]
 800124c:	4798      	blx	r3
 800124e:	e01f      	b.n	8001290 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001254:	2b00      	cmp	r3, #0
 8001256:	d01b      	beq.n	8001290 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800125c:	6878      	ldr	r0, [r7, #4]
 800125e:	4798      	blx	r3
 8001260:	e016      	b.n	8001290 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	681b      	ldr	r3, [r3, #0]
 8001266:	681b      	ldr	r3, [r3, #0]
 8001268:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800126c:	2b00      	cmp	r3, #0
 800126e:	d107      	bne.n	8001280 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	681b      	ldr	r3, [r3, #0]
 8001274:	681a      	ldr	r2, [r3, #0]
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	681b      	ldr	r3, [r3, #0]
 800127a:	f022 0208 	bic.w	r2, r2, #8
 800127e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001284:	2b00      	cmp	r3, #0
 8001286:	d003      	beq.n	8001290 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800128c:	6878      	ldr	r0, [r7, #4]
 800128e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001294:	2220      	movs	r2, #32
 8001296:	409a      	lsls	r2, r3
 8001298:	68fb      	ldr	r3, [r7, #12]
 800129a:	4013      	ands	r3, r2
 800129c:	2b00      	cmp	r3, #0
 800129e:	f000 808f 	beq.w	80013c0 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	681b      	ldr	r3, [r3, #0]
 80012a6:	681b      	ldr	r3, [r3, #0]
 80012a8:	f003 0310 	and.w	r3, r3, #16
 80012ac:	2b00      	cmp	r3, #0
 80012ae:	f000 8087 	beq.w	80013c0 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80012b6:	2220      	movs	r2, #32
 80012b8:	409a      	lsls	r2, r3
 80012ba:	693b      	ldr	r3, [r7, #16]
 80012bc:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80012c4:	b2db      	uxtb	r3, r3
 80012c6:	2b05      	cmp	r3, #5
 80012c8:	d136      	bne.n	8001338 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	681b      	ldr	r3, [r3, #0]
 80012ce:	681a      	ldr	r2, [r3, #0]
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	f022 0216 	bic.w	r2, r2, #22
 80012d8:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	681b      	ldr	r3, [r3, #0]
 80012de:	695a      	ldr	r2, [r3, #20]
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	681b      	ldr	r3, [r3, #0]
 80012e4:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80012e8:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80012ee:	2b00      	cmp	r3, #0
 80012f0:	d103      	bne.n	80012fa <HAL_DMA_IRQHandler+0x1da>
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80012f6:	2b00      	cmp	r3, #0
 80012f8:	d007      	beq.n	800130a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	681b      	ldr	r3, [r3, #0]
 80012fe:	681a      	ldr	r2, [r3, #0]
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	f022 0208 	bic.w	r2, r2, #8
 8001308:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800130e:	223f      	movs	r2, #63	@ 0x3f
 8001310:	409a      	lsls	r2, r3
 8001312:	693b      	ldr	r3, [r7, #16]
 8001314:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	2201      	movs	r2, #1
 800131a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	2200      	movs	r2, #0
 8001322:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800132a:	2b00      	cmp	r3, #0
 800132c:	d07e      	beq.n	800142c <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001332:	6878      	ldr	r0, [r7, #4]
 8001334:	4798      	blx	r3
        }
        return;
 8001336:	e079      	b.n	800142c <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	681b      	ldr	r3, [r3, #0]
 800133c:	681b      	ldr	r3, [r3, #0]
 800133e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001342:	2b00      	cmp	r3, #0
 8001344:	d01d      	beq.n	8001382 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	681b      	ldr	r3, [r3, #0]
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001350:	2b00      	cmp	r3, #0
 8001352:	d10d      	bne.n	8001370 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001358:	2b00      	cmp	r3, #0
 800135a:	d031      	beq.n	80013c0 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001360:	6878      	ldr	r0, [r7, #4]
 8001362:	4798      	blx	r3
 8001364:	e02c      	b.n	80013c0 <HAL_DMA_IRQHandler+0x2a0>
 8001366:	bf00      	nop
 8001368:	20000000 	.word	0x20000000
 800136c:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001374:	2b00      	cmp	r3, #0
 8001376:	d023      	beq.n	80013c0 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800137c:	6878      	ldr	r0, [r7, #4]
 800137e:	4798      	blx	r3
 8001380:	e01e      	b.n	80013c0 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	681b      	ldr	r3, [r3, #0]
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800138c:	2b00      	cmp	r3, #0
 800138e:	d10f      	bne.n	80013b0 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	681a      	ldr	r2, [r3, #0]
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	681b      	ldr	r3, [r3, #0]
 800139a:	f022 0210 	bic.w	r2, r2, #16
 800139e:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	2201      	movs	r2, #1
 80013a4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	2200      	movs	r2, #0
 80013ac:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80013b4:	2b00      	cmp	r3, #0
 80013b6:	d003      	beq.n	80013c0 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80013bc:	6878      	ldr	r0, [r7, #4]
 80013be:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80013c4:	2b00      	cmp	r3, #0
 80013c6:	d032      	beq.n	800142e <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80013cc:	f003 0301 	and.w	r3, r3, #1
 80013d0:	2b00      	cmp	r3, #0
 80013d2:	d022      	beq.n	800141a <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	2205      	movs	r2, #5
 80013d8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	681a      	ldr	r2, [r3, #0]
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	681b      	ldr	r3, [r3, #0]
 80013e6:	f022 0201 	bic.w	r2, r2, #1
 80013ea:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80013ec:	68bb      	ldr	r3, [r7, #8]
 80013ee:	3301      	adds	r3, #1
 80013f0:	60bb      	str	r3, [r7, #8]
 80013f2:	697a      	ldr	r2, [r7, #20]
 80013f4:	429a      	cmp	r2, r3
 80013f6:	d307      	bcc.n	8001408 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	f003 0301 	and.w	r3, r3, #1
 8001402:	2b00      	cmp	r3, #0
 8001404:	d1f2      	bne.n	80013ec <HAL_DMA_IRQHandler+0x2cc>
 8001406:	e000      	b.n	800140a <HAL_DMA_IRQHandler+0x2ea>
          break;
 8001408:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	2201      	movs	r2, #1
 800140e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	2200      	movs	r2, #0
 8001416:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800141e:	2b00      	cmp	r3, #0
 8001420:	d005      	beq.n	800142e <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001426:	6878      	ldr	r0, [r7, #4]
 8001428:	4798      	blx	r3
 800142a:	e000      	b.n	800142e <HAL_DMA_IRQHandler+0x30e>
        return;
 800142c:	bf00      	nop
    }
  }
}
 800142e:	3718      	adds	r7, #24
 8001430:	46bd      	mov	sp, r7
 8001432:	bd80      	pop	{r7, pc}

08001434 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001434:	b480      	push	{r7}
 8001436:	b085      	sub	sp, #20
 8001438:	af00      	add	r7, sp, #0
 800143a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	b2db      	uxtb	r3, r3
 8001442:	3b10      	subs	r3, #16
 8001444:	4a14      	ldr	r2, [pc, #80]	@ (8001498 <DMA_CalcBaseAndBitshift+0x64>)
 8001446:	fba2 2303 	umull	r2, r3, r2, r3
 800144a:	091b      	lsrs	r3, r3, #4
 800144c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800144e:	4a13      	ldr	r2, [pc, #76]	@ (800149c <DMA_CalcBaseAndBitshift+0x68>)
 8001450:	68fb      	ldr	r3, [r7, #12]
 8001452:	4413      	add	r3, r2
 8001454:	781b      	ldrb	r3, [r3, #0]
 8001456:	461a      	mov	r2, r3
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 800145c:	68fb      	ldr	r3, [r7, #12]
 800145e:	2b03      	cmp	r3, #3
 8001460:	d909      	bls.n	8001476 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	681b      	ldr	r3, [r3, #0]
 8001466:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 800146a:	f023 0303 	bic.w	r3, r3, #3
 800146e:	1d1a      	adds	r2, r3, #4
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	659a      	str	r2, [r3, #88]	@ 0x58
 8001474:	e007      	b.n	8001486 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 800147e:	f023 0303 	bic.w	r3, r3, #3
 8001482:	687a      	ldr	r2, [r7, #4]
 8001484:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 800148a:	4618      	mov	r0, r3
 800148c:	3714      	adds	r7, #20
 800148e:	46bd      	mov	sp, r7
 8001490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001494:	4770      	bx	lr
 8001496:	bf00      	nop
 8001498:	aaaaaaab 	.word	0xaaaaaaab
 800149c:	080080ec 	.word	0x080080ec

080014a0 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80014a0:	b480      	push	{r7}
 80014a2:	b085      	sub	sp, #20
 80014a4:	af00      	add	r7, sp, #0
 80014a6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80014a8:	2300      	movs	r3, #0
 80014aa:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80014b0:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	699b      	ldr	r3, [r3, #24]
 80014b6:	2b00      	cmp	r3, #0
 80014b8:	d11f      	bne.n	80014fa <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80014ba:	68bb      	ldr	r3, [r7, #8]
 80014bc:	2b03      	cmp	r3, #3
 80014be:	d856      	bhi.n	800156e <DMA_CheckFifoParam+0xce>
 80014c0:	a201      	add	r2, pc, #4	@ (adr r2, 80014c8 <DMA_CheckFifoParam+0x28>)
 80014c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80014c6:	bf00      	nop
 80014c8:	080014d9 	.word	0x080014d9
 80014cc:	080014eb 	.word	0x080014eb
 80014d0:	080014d9 	.word	0x080014d9
 80014d4:	0800156f 	.word	0x0800156f
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80014dc:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80014e0:	2b00      	cmp	r3, #0
 80014e2:	d046      	beq.n	8001572 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80014e4:	2301      	movs	r3, #1
 80014e6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80014e8:	e043      	b.n	8001572 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80014ee:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80014f2:	d140      	bne.n	8001576 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80014f4:	2301      	movs	r3, #1
 80014f6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80014f8:	e03d      	b.n	8001576 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	699b      	ldr	r3, [r3, #24]
 80014fe:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001502:	d121      	bne.n	8001548 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8001504:	68bb      	ldr	r3, [r7, #8]
 8001506:	2b03      	cmp	r3, #3
 8001508:	d837      	bhi.n	800157a <DMA_CheckFifoParam+0xda>
 800150a:	a201      	add	r2, pc, #4	@ (adr r2, 8001510 <DMA_CheckFifoParam+0x70>)
 800150c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001510:	08001521 	.word	0x08001521
 8001514:	08001527 	.word	0x08001527
 8001518:	08001521 	.word	0x08001521
 800151c:	08001539 	.word	0x08001539
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8001520:	2301      	movs	r3, #1
 8001522:	73fb      	strb	r3, [r7, #15]
      break;
 8001524:	e030      	b.n	8001588 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800152a:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800152e:	2b00      	cmp	r3, #0
 8001530:	d025      	beq.n	800157e <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8001532:	2301      	movs	r3, #1
 8001534:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001536:	e022      	b.n	800157e <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800153c:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8001540:	d11f      	bne.n	8001582 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8001542:	2301      	movs	r3, #1
 8001544:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8001546:	e01c      	b.n	8001582 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8001548:	68bb      	ldr	r3, [r7, #8]
 800154a:	2b02      	cmp	r3, #2
 800154c:	d903      	bls.n	8001556 <DMA_CheckFifoParam+0xb6>
 800154e:	68bb      	ldr	r3, [r7, #8]
 8001550:	2b03      	cmp	r3, #3
 8001552:	d003      	beq.n	800155c <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8001554:	e018      	b.n	8001588 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8001556:	2301      	movs	r3, #1
 8001558:	73fb      	strb	r3, [r7, #15]
      break;
 800155a:	e015      	b.n	8001588 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001560:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8001564:	2b00      	cmp	r3, #0
 8001566:	d00e      	beq.n	8001586 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8001568:	2301      	movs	r3, #1
 800156a:	73fb      	strb	r3, [r7, #15]
      break;
 800156c:	e00b      	b.n	8001586 <DMA_CheckFifoParam+0xe6>
      break;
 800156e:	bf00      	nop
 8001570:	e00a      	b.n	8001588 <DMA_CheckFifoParam+0xe8>
      break;
 8001572:	bf00      	nop
 8001574:	e008      	b.n	8001588 <DMA_CheckFifoParam+0xe8>
      break;
 8001576:	bf00      	nop
 8001578:	e006      	b.n	8001588 <DMA_CheckFifoParam+0xe8>
      break;
 800157a:	bf00      	nop
 800157c:	e004      	b.n	8001588 <DMA_CheckFifoParam+0xe8>
      break;
 800157e:	bf00      	nop
 8001580:	e002      	b.n	8001588 <DMA_CheckFifoParam+0xe8>
      break;   
 8001582:	bf00      	nop
 8001584:	e000      	b.n	8001588 <DMA_CheckFifoParam+0xe8>
      break;
 8001586:	bf00      	nop
    }
  } 
  
  return status; 
 8001588:	7bfb      	ldrb	r3, [r7, #15]
}
 800158a:	4618      	mov	r0, r3
 800158c:	3714      	adds	r7, #20
 800158e:	46bd      	mov	sp, r7
 8001590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001594:	4770      	bx	lr
 8001596:	bf00      	nop

08001598 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001598:	b480      	push	{r7}
 800159a:	b089      	sub	sp, #36	@ 0x24
 800159c:	af00      	add	r7, sp, #0
 800159e:	6078      	str	r0, [r7, #4]
 80015a0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80015a2:	2300      	movs	r3, #0
 80015a4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80015a6:	2300      	movs	r3, #0
 80015a8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80015aa:	2300      	movs	r3, #0
 80015ac:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80015ae:	2300      	movs	r3, #0
 80015b0:	61fb      	str	r3, [r7, #28]
 80015b2:	e165      	b.n	8001880 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80015b4:	2201      	movs	r2, #1
 80015b6:	69fb      	ldr	r3, [r7, #28]
 80015b8:	fa02 f303 	lsl.w	r3, r2, r3
 80015bc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80015be:	683b      	ldr	r3, [r7, #0]
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	697a      	ldr	r2, [r7, #20]
 80015c4:	4013      	ands	r3, r2
 80015c6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80015c8:	693a      	ldr	r2, [r7, #16]
 80015ca:	697b      	ldr	r3, [r7, #20]
 80015cc:	429a      	cmp	r2, r3
 80015ce:	f040 8154 	bne.w	800187a <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80015d2:	683b      	ldr	r3, [r7, #0]
 80015d4:	685b      	ldr	r3, [r3, #4]
 80015d6:	f003 0303 	and.w	r3, r3, #3
 80015da:	2b01      	cmp	r3, #1
 80015dc:	d005      	beq.n	80015ea <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80015de:	683b      	ldr	r3, [r7, #0]
 80015e0:	685b      	ldr	r3, [r3, #4]
 80015e2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80015e6:	2b02      	cmp	r3, #2
 80015e8:	d130      	bne.n	800164c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	689b      	ldr	r3, [r3, #8]
 80015ee:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80015f0:	69fb      	ldr	r3, [r7, #28]
 80015f2:	005b      	lsls	r3, r3, #1
 80015f4:	2203      	movs	r2, #3
 80015f6:	fa02 f303 	lsl.w	r3, r2, r3
 80015fa:	43db      	mvns	r3, r3
 80015fc:	69ba      	ldr	r2, [r7, #24]
 80015fe:	4013      	ands	r3, r2
 8001600:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001602:	683b      	ldr	r3, [r7, #0]
 8001604:	68da      	ldr	r2, [r3, #12]
 8001606:	69fb      	ldr	r3, [r7, #28]
 8001608:	005b      	lsls	r3, r3, #1
 800160a:	fa02 f303 	lsl.w	r3, r2, r3
 800160e:	69ba      	ldr	r2, [r7, #24]
 8001610:	4313      	orrs	r3, r2
 8001612:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	69ba      	ldr	r2, [r7, #24]
 8001618:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	685b      	ldr	r3, [r3, #4]
 800161e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001620:	2201      	movs	r2, #1
 8001622:	69fb      	ldr	r3, [r7, #28]
 8001624:	fa02 f303 	lsl.w	r3, r2, r3
 8001628:	43db      	mvns	r3, r3
 800162a:	69ba      	ldr	r2, [r7, #24]
 800162c:	4013      	ands	r3, r2
 800162e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001630:	683b      	ldr	r3, [r7, #0]
 8001632:	685b      	ldr	r3, [r3, #4]
 8001634:	091b      	lsrs	r3, r3, #4
 8001636:	f003 0201 	and.w	r2, r3, #1
 800163a:	69fb      	ldr	r3, [r7, #28]
 800163c:	fa02 f303 	lsl.w	r3, r2, r3
 8001640:	69ba      	ldr	r2, [r7, #24]
 8001642:	4313      	orrs	r3, r2
 8001644:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	69ba      	ldr	r2, [r7, #24]
 800164a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800164c:	683b      	ldr	r3, [r7, #0]
 800164e:	685b      	ldr	r3, [r3, #4]
 8001650:	f003 0303 	and.w	r3, r3, #3
 8001654:	2b03      	cmp	r3, #3
 8001656:	d017      	beq.n	8001688 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	68db      	ldr	r3, [r3, #12]
 800165c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800165e:	69fb      	ldr	r3, [r7, #28]
 8001660:	005b      	lsls	r3, r3, #1
 8001662:	2203      	movs	r2, #3
 8001664:	fa02 f303 	lsl.w	r3, r2, r3
 8001668:	43db      	mvns	r3, r3
 800166a:	69ba      	ldr	r2, [r7, #24]
 800166c:	4013      	ands	r3, r2
 800166e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001670:	683b      	ldr	r3, [r7, #0]
 8001672:	689a      	ldr	r2, [r3, #8]
 8001674:	69fb      	ldr	r3, [r7, #28]
 8001676:	005b      	lsls	r3, r3, #1
 8001678:	fa02 f303 	lsl.w	r3, r2, r3
 800167c:	69ba      	ldr	r2, [r7, #24]
 800167e:	4313      	orrs	r3, r2
 8001680:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	69ba      	ldr	r2, [r7, #24]
 8001686:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001688:	683b      	ldr	r3, [r7, #0]
 800168a:	685b      	ldr	r3, [r3, #4]
 800168c:	f003 0303 	and.w	r3, r3, #3
 8001690:	2b02      	cmp	r3, #2
 8001692:	d123      	bne.n	80016dc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001694:	69fb      	ldr	r3, [r7, #28]
 8001696:	08da      	lsrs	r2, r3, #3
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	3208      	adds	r2, #8
 800169c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80016a0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80016a2:	69fb      	ldr	r3, [r7, #28]
 80016a4:	f003 0307 	and.w	r3, r3, #7
 80016a8:	009b      	lsls	r3, r3, #2
 80016aa:	220f      	movs	r2, #15
 80016ac:	fa02 f303 	lsl.w	r3, r2, r3
 80016b0:	43db      	mvns	r3, r3
 80016b2:	69ba      	ldr	r2, [r7, #24]
 80016b4:	4013      	ands	r3, r2
 80016b6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80016b8:	683b      	ldr	r3, [r7, #0]
 80016ba:	691a      	ldr	r2, [r3, #16]
 80016bc:	69fb      	ldr	r3, [r7, #28]
 80016be:	f003 0307 	and.w	r3, r3, #7
 80016c2:	009b      	lsls	r3, r3, #2
 80016c4:	fa02 f303 	lsl.w	r3, r2, r3
 80016c8:	69ba      	ldr	r2, [r7, #24]
 80016ca:	4313      	orrs	r3, r2
 80016cc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80016ce:	69fb      	ldr	r3, [r7, #28]
 80016d0:	08da      	lsrs	r2, r3, #3
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	3208      	adds	r2, #8
 80016d6:	69b9      	ldr	r1, [r7, #24]
 80016d8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80016e2:	69fb      	ldr	r3, [r7, #28]
 80016e4:	005b      	lsls	r3, r3, #1
 80016e6:	2203      	movs	r2, #3
 80016e8:	fa02 f303 	lsl.w	r3, r2, r3
 80016ec:	43db      	mvns	r3, r3
 80016ee:	69ba      	ldr	r2, [r7, #24]
 80016f0:	4013      	ands	r3, r2
 80016f2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80016f4:	683b      	ldr	r3, [r7, #0]
 80016f6:	685b      	ldr	r3, [r3, #4]
 80016f8:	f003 0203 	and.w	r2, r3, #3
 80016fc:	69fb      	ldr	r3, [r7, #28]
 80016fe:	005b      	lsls	r3, r3, #1
 8001700:	fa02 f303 	lsl.w	r3, r2, r3
 8001704:	69ba      	ldr	r2, [r7, #24]
 8001706:	4313      	orrs	r3, r2
 8001708:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	69ba      	ldr	r2, [r7, #24]
 800170e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001710:	683b      	ldr	r3, [r7, #0]
 8001712:	685b      	ldr	r3, [r3, #4]
 8001714:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001718:	2b00      	cmp	r3, #0
 800171a:	f000 80ae 	beq.w	800187a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800171e:	2300      	movs	r3, #0
 8001720:	60fb      	str	r3, [r7, #12]
 8001722:	4b5d      	ldr	r3, [pc, #372]	@ (8001898 <HAL_GPIO_Init+0x300>)
 8001724:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001726:	4a5c      	ldr	r2, [pc, #368]	@ (8001898 <HAL_GPIO_Init+0x300>)
 8001728:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800172c:	6453      	str	r3, [r2, #68]	@ 0x44
 800172e:	4b5a      	ldr	r3, [pc, #360]	@ (8001898 <HAL_GPIO_Init+0x300>)
 8001730:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001732:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001736:	60fb      	str	r3, [r7, #12]
 8001738:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800173a:	4a58      	ldr	r2, [pc, #352]	@ (800189c <HAL_GPIO_Init+0x304>)
 800173c:	69fb      	ldr	r3, [r7, #28]
 800173e:	089b      	lsrs	r3, r3, #2
 8001740:	3302      	adds	r3, #2
 8001742:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001746:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001748:	69fb      	ldr	r3, [r7, #28]
 800174a:	f003 0303 	and.w	r3, r3, #3
 800174e:	009b      	lsls	r3, r3, #2
 8001750:	220f      	movs	r2, #15
 8001752:	fa02 f303 	lsl.w	r3, r2, r3
 8001756:	43db      	mvns	r3, r3
 8001758:	69ba      	ldr	r2, [r7, #24]
 800175a:	4013      	ands	r3, r2
 800175c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	4a4f      	ldr	r2, [pc, #316]	@ (80018a0 <HAL_GPIO_Init+0x308>)
 8001762:	4293      	cmp	r3, r2
 8001764:	d025      	beq.n	80017b2 <HAL_GPIO_Init+0x21a>
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	4a4e      	ldr	r2, [pc, #312]	@ (80018a4 <HAL_GPIO_Init+0x30c>)
 800176a:	4293      	cmp	r3, r2
 800176c:	d01f      	beq.n	80017ae <HAL_GPIO_Init+0x216>
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	4a4d      	ldr	r2, [pc, #308]	@ (80018a8 <HAL_GPIO_Init+0x310>)
 8001772:	4293      	cmp	r3, r2
 8001774:	d019      	beq.n	80017aa <HAL_GPIO_Init+0x212>
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	4a4c      	ldr	r2, [pc, #304]	@ (80018ac <HAL_GPIO_Init+0x314>)
 800177a:	4293      	cmp	r3, r2
 800177c:	d013      	beq.n	80017a6 <HAL_GPIO_Init+0x20e>
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	4a4b      	ldr	r2, [pc, #300]	@ (80018b0 <HAL_GPIO_Init+0x318>)
 8001782:	4293      	cmp	r3, r2
 8001784:	d00d      	beq.n	80017a2 <HAL_GPIO_Init+0x20a>
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	4a4a      	ldr	r2, [pc, #296]	@ (80018b4 <HAL_GPIO_Init+0x31c>)
 800178a:	4293      	cmp	r3, r2
 800178c:	d007      	beq.n	800179e <HAL_GPIO_Init+0x206>
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	4a49      	ldr	r2, [pc, #292]	@ (80018b8 <HAL_GPIO_Init+0x320>)
 8001792:	4293      	cmp	r3, r2
 8001794:	d101      	bne.n	800179a <HAL_GPIO_Init+0x202>
 8001796:	2306      	movs	r3, #6
 8001798:	e00c      	b.n	80017b4 <HAL_GPIO_Init+0x21c>
 800179a:	2307      	movs	r3, #7
 800179c:	e00a      	b.n	80017b4 <HAL_GPIO_Init+0x21c>
 800179e:	2305      	movs	r3, #5
 80017a0:	e008      	b.n	80017b4 <HAL_GPIO_Init+0x21c>
 80017a2:	2304      	movs	r3, #4
 80017a4:	e006      	b.n	80017b4 <HAL_GPIO_Init+0x21c>
 80017a6:	2303      	movs	r3, #3
 80017a8:	e004      	b.n	80017b4 <HAL_GPIO_Init+0x21c>
 80017aa:	2302      	movs	r3, #2
 80017ac:	e002      	b.n	80017b4 <HAL_GPIO_Init+0x21c>
 80017ae:	2301      	movs	r3, #1
 80017b0:	e000      	b.n	80017b4 <HAL_GPIO_Init+0x21c>
 80017b2:	2300      	movs	r3, #0
 80017b4:	69fa      	ldr	r2, [r7, #28]
 80017b6:	f002 0203 	and.w	r2, r2, #3
 80017ba:	0092      	lsls	r2, r2, #2
 80017bc:	4093      	lsls	r3, r2
 80017be:	69ba      	ldr	r2, [r7, #24]
 80017c0:	4313      	orrs	r3, r2
 80017c2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80017c4:	4935      	ldr	r1, [pc, #212]	@ (800189c <HAL_GPIO_Init+0x304>)
 80017c6:	69fb      	ldr	r3, [r7, #28]
 80017c8:	089b      	lsrs	r3, r3, #2
 80017ca:	3302      	adds	r3, #2
 80017cc:	69ba      	ldr	r2, [r7, #24]
 80017ce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80017d2:	4b3a      	ldr	r3, [pc, #232]	@ (80018bc <HAL_GPIO_Init+0x324>)
 80017d4:	689b      	ldr	r3, [r3, #8]
 80017d6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80017d8:	693b      	ldr	r3, [r7, #16]
 80017da:	43db      	mvns	r3, r3
 80017dc:	69ba      	ldr	r2, [r7, #24]
 80017de:	4013      	ands	r3, r2
 80017e0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80017e2:	683b      	ldr	r3, [r7, #0]
 80017e4:	685b      	ldr	r3, [r3, #4]
 80017e6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80017ea:	2b00      	cmp	r3, #0
 80017ec:	d003      	beq.n	80017f6 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 80017ee:	69ba      	ldr	r2, [r7, #24]
 80017f0:	693b      	ldr	r3, [r7, #16]
 80017f2:	4313      	orrs	r3, r2
 80017f4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80017f6:	4a31      	ldr	r2, [pc, #196]	@ (80018bc <HAL_GPIO_Init+0x324>)
 80017f8:	69bb      	ldr	r3, [r7, #24]
 80017fa:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80017fc:	4b2f      	ldr	r3, [pc, #188]	@ (80018bc <HAL_GPIO_Init+0x324>)
 80017fe:	68db      	ldr	r3, [r3, #12]
 8001800:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001802:	693b      	ldr	r3, [r7, #16]
 8001804:	43db      	mvns	r3, r3
 8001806:	69ba      	ldr	r2, [r7, #24]
 8001808:	4013      	ands	r3, r2
 800180a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800180c:	683b      	ldr	r3, [r7, #0]
 800180e:	685b      	ldr	r3, [r3, #4]
 8001810:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001814:	2b00      	cmp	r3, #0
 8001816:	d003      	beq.n	8001820 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8001818:	69ba      	ldr	r2, [r7, #24]
 800181a:	693b      	ldr	r3, [r7, #16]
 800181c:	4313      	orrs	r3, r2
 800181e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001820:	4a26      	ldr	r2, [pc, #152]	@ (80018bc <HAL_GPIO_Init+0x324>)
 8001822:	69bb      	ldr	r3, [r7, #24]
 8001824:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001826:	4b25      	ldr	r3, [pc, #148]	@ (80018bc <HAL_GPIO_Init+0x324>)
 8001828:	685b      	ldr	r3, [r3, #4]
 800182a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800182c:	693b      	ldr	r3, [r7, #16]
 800182e:	43db      	mvns	r3, r3
 8001830:	69ba      	ldr	r2, [r7, #24]
 8001832:	4013      	ands	r3, r2
 8001834:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001836:	683b      	ldr	r3, [r7, #0]
 8001838:	685b      	ldr	r3, [r3, #4]
 800183a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800183e:	2b00      	cmp	r3, #0
 8001840:	d003      	beq.n	800184a <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8001842:	69ba      	ldr	r2, [r7, #24]
 8001844:	693b      	ldr	r3, [r7, #16]
 8001846:	4313      	orrs	r3, r2
 8001848:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800184a:	4a1c      	ldr	r2, [pc, #112]	@ (80018bc <HAL_GPIO_Init+0x324>)
 800184c:	69bb      	ldr	r3, [r7, #24]
 800184e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001850:	4b1a      	ldr	r3, [pc, #104]	@ (80018bc <HAL_GPIO_Init+0x324>)
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001856:	693b      	ldr	r3, [r7, #16]
 8001858:	43db      	mvns	r3, r3
 800185a:	69ba      	ldr	r2, [r7, #24]
 800185c:	4013      	ands	r3, r2
 800185e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001860:	683b      	ldr	r3, [r7, #0]
 8001862:	685b      	ldr	r3, [r3, #4]
 8001864:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001868:	2b00      	cmp	r3, #0
 800186a:	d003      	beq.n	8001874 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 800186c:	69ba      	ldr	r2, [r7, #24]
 800186e:	693b      	ldr	r3, [r7, #16]
 8001870:	4313      	orrs	r3, r2
 8001872:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001874:	4a11      	ldr	r2, [pc, #68]	@ (80018bc <HAL_GPIO_Init+0x324>)
 8001876:	69bb      	ldr	r3, [r7, #24]
 8001878:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800187a:	69fb      	ldr	r3, [r7, #28]
 800187c:	3301      	adds	r3, #1
 800187e:	61fb      	str	r3, [r7, #28]
 8001880:	69fb      	ldr	r3, [r7, #28]
 8001882:	2b0f      	cmp	r3, #15
 8001884:	f67f ae96 	bls.w	80015b4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001888:	bf00      	nop
 800188a:	bf00      	nop
 800188c:	3724      	adds	r7, #36	@ 0x24
 800188e:	46bd      	mov	sp, r7
 8001890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001894:	4770      	bx	lr
 8001896:	bf00      	nop
 8001898:	40023800 	.word	0x40023800
 800189c:	40013800 	.word	0x40013800
 80018a0:	40020000 	.word	0x40020000
 80018a4:	40020400 	.word	0x40020400
 80018a8:	40020800 	.word	0x40020800
 80018ac:	40020c00 	.word	0x40020c00
 80018b0:	40021000 	.word	0x40021000
 80018b4:	40021400 	.word	0x40021400
 80018b8:	40021800 	.word	0x40021800
 80018bc:	40013c00 	.word	0x40013c00

080018c0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80018c0:	b480      	push	{r7}
 80018c2:	b083      	sub	sp, #12
 80018c4:	af00      	add	r7, sp, #0
 80018c6:	6078      	str	r0, [r7, #4]
 80018c8:	460b      	mov	r3, r1
 80018ca:	807b      	strh	r3, [r7, #2]
 80018cc:	4613      	mov	r3, r2
 80018ce:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80018d0:	787b      	ldrb	r3, [r7, #1]
 80018d2:	2b00      	cmp	r3, #0
 80018d4:	d003      	beq.n	80018de <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80018d6:	887a      	ldrh	r2, [r7, #2]
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80018dc:	e003      	b.n	80018e6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80018de:	887b      	ldrh	r3, [r7, #2]
 80018e0:	041a      	lsls	r2, r3, #16
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	619a      	str	r2, [r3, #24]
}
 80018e6:	bf00      	nop
 80018e8:	370c      	adds	r7, #12
 80018ea:	46bd      	mov	sp, r7
 80018ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018f0:	4770      	bx	lr

080018f2 <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 80018f2:	b580      	push	{r7, lr}
 80018f4:	b086      	sub	sp, #24
 80018f6:	af02      	add	r7, sp, #8
 80018f8:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS)
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	2b00      	cmp	r3, #0
 80018fe:	d101      	bne.n	8001904 <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 8001900:	2301      	movs	r3, #1
 8001902:	e059      	b.n	80019b8 <HAL_HCD_Init+0xc6>

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hhcd->Instance;
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	60fb      	str	r3, [r7, #12]
#endif /* defined (USB_OTG_FS) */

  if (hhcd->State == HAL_HCD_STATE_RESET)
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	f893 33d5 	ldrb.w	r3, [r3, #981]	@ 0x3d5
 8001910:	b2db      	uxtb	r3, r3
 8001912:	2b00      	cmp	r3, #0
 8001914:	d106      	bne.n	8001924 <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	2200      	movs	r2, #0
 800191a:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 800191e:	6878      	ldr	r0, [r7, #4]
 8001920:	f7ff f8bc 	bl	8000a9c <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	2203      	movs	r2, #3
 8001928:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 800192c:	68fb      	ldr	r3, [r7, #12]
 800192e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001932:	d102      	bne.n	800193a <HAL_HCD_Init+0x48>
  {
    hhcd->Init.dma_enable = 0U;
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	2200      	movs	r2, #0
 8001938:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	4618      	mov	r0, r3
 8001940:	f001 fc52 	bl	80031e8 <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  if (USB_CoreInit(hhcd->Instance, hhcd->Init) != HAL_OK)
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	6818      	ldr	r0, [r3, #0]
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	7c1a      	ldrb	r2, [r3, #16]
 800194c:	f88d 2000 	strb.w	r2, [sp]
 8001950:	3304      	adds	r3, #4
 8001952:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001954:	f001 fbe4 	bl	8003120 <USB_CoreInit>
 8001958:	4603      	mov	r3, r0
 800195a:	2b00      	cmp	r3, #0
 800195c:	d005      	beq.n	800196a <HAL_HCD_Init+0x78>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	2202      	movs	r2, #2
 8001962:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5
    return HAL_ERROR;
 8001966:	2301      	movs	r3, #1
 8001968:	e026      	b.n	80019b8 <HAL_HCD_Init+0xc6>
  }

  /* Force Host Mode */
  if (USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE) != HAL_OK)
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	2101      	movs	r1, #1
 8001970:	4618      	mov	r0, r3
 8001972:	f001 fc4a 	bl	800320a <USB_SetCurrentMode>
 8001976:	4603      	mov	r3, r0
 8001978:	2b00      	cmp	r3, #0
 800197a:	d005      	beq.n	8001988 <HAL_HCD_Init+0x96>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	2202      	movs	r2, #2
 8001980:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5
    return HAL_ERROR;
 8001984:	2301      	movs	r3, #1
 8001986:	e017      	b.n	80019b8 <HAL_HCD_Init+0xc6>
  }

  /* Init Host */
  if (USB_HostInit(hhcd->Instance, hhcd->Init) != HAL_OK)
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	6818      	ldr	r0, [r3, #0]
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	7c1a      	ldrb	r2, [r3, #16]
 8001990:	f88d 2000 	strb.w	r2, [sp]
 8001994:	3304      	adds	r3, #4
 8001996:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001998:	f001 fd2a 	bl	80033f0 <USB_HostInit>
 800199c:	4603      	mov	r3, r0
 800199e:	2b00      	cmp	r3, #0
 80019a0:	d005      	beq.n	80019ae <HAL_HCD_Init+0xbc>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	2202      	movs	r2, #2
 80019a6:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5
    return HAL_ERROR;
 80019aa:	2301      	movs	r3, #1
 80019ac:	e004      	b.n	80019b8 <HAL_HCD_Init+0xc6>
  }

  hhcd->State = HAL_HCD_STATE_READY;
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	2201      	movs	r2, #1
 80019b2:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5

  return HAL_OK;
 80019b6:	2300      	movs	r3, #0
}
 80019b8:	4618      	mov	r0, r3
 80019ba:	3710      	adds	r7, #16
 80019bc:	46bd      	mov	sp, r7
 80019be:	bd80      	pop	{r7, pc}

080019c0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80019c0:	b580      	push	{r7, lr}
 80019c2:	b084      	sub	sp, #16
 80019c4:	af00      	add	r7, sp, #0
 80019c6:	6078      	str	r0, [r7, #4]
 80019c8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	2b00      	cmp	r3, #0
 80019ce:	d101      	bne.n	80019d4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80019d0:	2301      	movs	r3, #1
 80019d2:	e0cc      	b.n	8001b6e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80019d4:	4b68      	ldr	r3, [pc, #416]	@ (8001b78 <HAL_RCC_ClockConfig+0x1b8>)
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	f003 030f 	and.w	r3, r3, #15
 80019dc:	683a      	ldr	r2, [r7, #0]
 80019de:	429a      	cmp	r2, r3
 80019e0:	d90c      	bls.n	80019fc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80019e2:	4b65      	ldr	r3, [pc, #404]	@ (8001b78 <HAL_RCC_ClockConfig+0x1b8>)
 80019e4:	683a      	ldr	r2, [r7, #0]
 80019e6:	b2d2      	uxtb	r2, r2
 80019e8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80019ea:	4b63      	ldr	r3, [pc, #396]	@ (8001b78 <HAL_RCC_ClockConfig+0x1b8>)
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	f003 030f 	and.w	r3, r3, #15
 80019f2:	683a      	ldr	r2, [r7, #0]
 80019f4:	429a      	cmp	r2, r3
 80019f6:	d001      	beq.n	80019fc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80019f8:	2301      	movs	r3, #1
 80019fa:	e0b8      	b.n	8001b6e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	f003 0302 	and.w	r3, r3, #2
 8001a04:	2b00      	cmp	r3, #0
 8001a06:	d020      	beq.n	8001a4a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	f003 0304 	and.w	r3, r3, #4
 8001a10:	2b00      	cmp	r3, #0
 8001a12:	d005      	beq.n	8001a20 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001a14:	4b59      	ldr	r3, [pc, #356]	@ (8001b7c <HAL_RCC_ClockConfig+0x1bc>)
 8001a16:	689b      	ldr	r3, [r3, #8]
 8001a18:	4a58      	ldr	r2, [pc, #352]	@ (8001b7c <HAL_RCC_ClockConfig+0x1bc>)
 8001a1a:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8001a1e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	f003 0308 	and.w	r3, r3, #8
 8001a28:	2b00      	cmp	r3, #0
 8001a2a:	d005      	beq.n	8001a38 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001a2c:	4b53      	ldr	r3, [pc, #332]	@ (8001b7c <HAL_RCC_ClockConfig+0x1bc>)
 8001a2e:	689b      	ldr	r3, [r3, #8]
 8001a30:	4a52      	ldr	r2, [pc, #328]	@ (8001b7c <HAL_RCC_ClockConfig+0x1bc>)
 8001a32:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8001a36:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001a38:	4b50      	ldr	r3, [pc, #320]	@ (8001b7c <HAL_RCC_ClockConfig+0x1bc>)
 8001a3a:	689b      	ldr	r3, [r3, #8]
 8001a3c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	689b      	ldr	r3, [r3, #8]
 8001a44:	494d      	ldr	r1, [pc, #308]	@ (8001b7c <HAL_RCC_ClockConfig+0x1bc>)
 8001a46:	4313      	orrs	r3, r2
 8001a48:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	f003 0301 	and.w	r3, r3, #1
 8001a52:	2b00      	cmp	r3, #0
 8001a54:	d044      	beq.n	8001ae0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	685b      	ldr	r3, [r3, #4]
 8001a5a:	2b01      	cmp	r3, #1
 8001a5c:	d107      	bne.n	8001a6e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a5e:	4b47      	ldr	r3, [pc, #284]	@ (8001b7c <HAL_RCC_ClockConfig+0x1bc>)
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001a66:	2b00      	cmp	r3, #0
 8001a68:	d119      	bne.n	8001a9e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001a6a:	2301      	movs	r3, #1
 8001a6c:	e07f      	b.n	8001b6e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	685b      	ldr	r3, [r3, #4]
 8001a72:	2b02      	cmp	r3, #2
 8001a74:	d003      	beq.n	8001a7e <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001a7a:	2b03      	cmp	r3, #3
 8001a7c:	d107      	bne.n	8001a8e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001a7e:	4b3f      	ldr	r3, [pc, #252]	@ (8001b7c <HAL_RCC_ClockConfig+0x1bc>)
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001a86:	2b00      	cmp	r3, #0
 8001a88:	d109      	bne.n	8001a9e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001a8a:	2301      	movs	r3, #1
 8001a8c:	e06f      	b.n	8001b6e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001a8e:	4b3b      	ldr	r3, [pc, #236]	@ (8001b7c <HAL_RCC_ClockConfig+0x1bc>)
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	f003 0302 	and.w	r3, r3, #2
 8001a96:	2b00      	cmp	r3, #0
 8001a98:	d101      	bne.n	8001a9e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001a9a:	2301      	movs	r3, #1
 8001a9c:	e067      	b.n	8001b6e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001a9e:	4b37      	ldr	r3, [pc, #220]	@ (8001b7c <HAL_RCC_ClockConfig+0x1bc>)
 8001aa0:	689b      	ldr	r3, [r3, #8]
 8001aa2:	f023 0203 	bic.w	r2, r3, #3
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	685b      	ldr	r3, [r3, #4]
 8001aaa:	4934      	ldr	r1, [pc, #208]	@ (8001b7c <HAL_RCC_ClockConfig+0x1bc>)
 8001aac:	4313      	orrs	r3, r2
 8001aae:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001ab0:	f7ff f946 	bl	8000d40 <HAL_GetTick>
 8001ab4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001ab6:	e00a      	b.n	8001ace <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001ab8:	f7ff f942 	bl	8000d40 <HAL_GetTick>
 8001abc:	4602      	mov	r2, r0
 8001abe:	68fb      	ldr	r3, [r7, #12]
 8001ac0:	1ad3      	subs	r3, r2, r3
 8001ac2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001ac6:	4293      	cmp	r3, r2
 8001ac8:	d901      	bls.n	8001ace <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001aca:	2303      	movs	r3, #3
 8001acc:	e04f      	b.n	8001b6e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001ace:	4b2b      	ldr	r3, [pc, #172]	@ (8001b7c <HAL_RCC_ClockConfig+0x1bc>)
 8001ad0:	689b      	ldr	r3, [r3, #8]
 8001ad2:	f003 020c 	and.w	r2, r3, #12
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	685b      	ldr	r3, [r3, #4]
 8001ada:	009b      	lsls	r3, r3, #2
 8001adc:	429a      	cmp	r2, r3
 8001ade:	d1eb      	bne.n	8001ab8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001ae0:	4b25      	ldr	r3, [pc, #148]	@ (8001b78 <HAL_RCC_ClockConfig+0x1b8>)
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	f003 030f 	and.w	r3, r3, #15
 8001ae8:	683a      	ldr	r2, [r7, #0]
 8001aea:	429a      	cmp	r2, r3
 8001aec:	d20c      	bcs.n	8001b08 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001aee:	4b22      	ldr	r3, [pc, #136]	@ (8001b78 <HAL_RCC_ClockConfig+0x1b8>)
 8001af0:	683a      	ldr	r2, [r7, #0]
 8001af2:	b2d2      	uxtb	r2, r2
 8001af4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001af6:	4b20      	ldr	r3, [pc, #128]	@ (8001b78 <HAL_RCC_ClockConfig+0x1b8>)
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	f003 030f 	and.w	r3, r3, #15
 8001afe:	683a      	ldr	r2, [r7, #0]
 8001b00:	429a      	cmp	r2, r3
 8001b02:	d001      	beq.n	8001b08 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001b04:	2301      	movs	r3, #1
 8001b06:	e032      	b.n	8001b6e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	f003 0304 	and.w	r3, r3, #4
 8001b10:	2b00      	cmp	r3, #0
 8001b12:	d008      	beq.n	8001b26 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001b14:	4b19      	ldr	r3, [pc, #100]	@ (8001b7c <HAL_RCC_ClockConfig+0x1bc>)
 8001b16:	689b      	ldr	r3, [r3, #8]
 8001b18:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	68db      	ldr	r3, [r3, #12]
 8001b20:	4916      	ldr	r1, [pc, #88]	@ (8001b7c <HAL_RCC_ClockConfig+0x1bc>)
 8001b22:	4313      	orrs	r3, r2
 8001b24:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	f003 0308 	and.w	r3, r3, #8
 8001b2e:	2b00      	cmp	r3, #0
 8001b30:	d009      	beq.n	8001b46 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001b32:	4b12      	ldr	r3, [pc, #72]	@ (8001b7c <HAL_RCC_ClockConfig+0x1bc>)
 8001b34:	689b      	ldr	r3, [r3, #8]
 8001b36:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	691b      	ldr	r3, [r3, #16]
 8001b3e:	00db      	lsls	r3, r3, #3
 8001b40:	490e      	ldr	r1, [pc, #56]	@ (8001b7c <HAL_RCC_ClockConfig+0x1bc>)
 8001b42:	4313      	orrs	r3, r2
 8001b44:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001b46:	f000 fb4b 	bl	80021e0 <HAL_RCC_GetSysClockFreq>
 8001b4a:	4602      	mov	r2, r0
 8001b4c:	4b0b      	ldr	r3, [pc, #44]	@ (8001b7c <HAL_RCC_ClockConfig+0x1bc>)
 8001b4e:	689b      	ldr	r3, [r3, #8]
 8001b50:	091b      	lsrs	r3, r3, #4
 8001b52:	f003 030f 	and.w	r3, r3, #15
 8001b56:	490a      	ldr	r1, [pc, #40]	@ (8001b80 <HAL_RCC_ClockConfig+0x1c0>)
 8001b58:	5ccb      	ldrb	r3, [r1, r3]
 8001b5a:	fa22 f303 	lsr.w	r3, r2, r3
 8001b5e:	4a09      	ldr	r2, [pc, #36]	@ (8001b84 <HAL_RCC_ClockConfig+0x1c4>)
 8001b60:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8001b62:	4b09      	ldr	r3, [pc, #36]	@ (8001b88 <HAL_RCC_ClockConfig+0x1c8>)
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	4618      	mov	r0, r3
 8001b68:	f7ff f8a6 	bl	8000cb8 <HAL_InitTick>

  return HAL_OK;
 8001b6c:	2300      	movs	r3, #0
}
 8001b6e:	4618      	mov	r0, r3
 8001b70:	3710      	adds	r7, #16
 8001b72:	46bd      	mov	sp, r7
 8001b74:	bd80      	pop	{r7, pc}
 8001b76:	bf00      	nop
 8001b78:	40023c00 	.word	0x40023c00
 8001b7c:	40023800 	.word	0x40023800
 8001b80:	080080dc 	.word	0x080080dc
 8001b84:	20000000 	.word	0x20000000
 8001b88:	20000004 	.word	0x20000004

08001b8c <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001b8c:	b580      	push	{r7, lr}
 8001b8e:	b08c      	sub	sp, #48	@ 0x30
 8001b90:	af00      	add	r7, sp, #0
 8001b92:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001b94:	2300      	movs	r3, #0
 8001b96:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t tmpreg1 = 0U;
 8001b98:	2300      	movs	r3, #0
 8001b9a:	623b      	str	r3, [r7, #32]
  uint32_t plli2sp = 0U;
 8001b9c:	2300      	movs	r3, #0
 8001b9e:	61fb      	str	r3, [r7, #28]
  uint32_t plli2sq = 0U;
 8001ba0:	2300      	movs	r3, #0
 8001ba2:	61bb      	str	r3, [r7, #24]
  uint32_t plli2sr = 0U;
 8001ba4:	2300      	movs	r3, #0
 8001ba6:	617b      	str	r3, [r7, #20]
  uint32_t pllsaip = 0U;
 8001ba8:	2300      	movs	r3, #0
 8001baa:	613b      	str	r3, [r7, #16]
  uint32_t pllsaiq = 0U;
 8001bac:	2300      	movs	r3, #0
 8001bae:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0U;
 8001bb0:	2300      	movs	r3, #0
 8001bb2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint32_t pllsaiused = 0U;
 8001bb4:	2300      	movs	r3, #0
 8001bb6:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Check the peripheral clock selection parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------ I2S APB1 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == (RCC_PERIPHCLK_I2S_APB1))
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	f003 0301 	and.w	r3, r3, #1
 8001bc0:	2b00      	cmp	r3, #0
 8001bc2:	d010      	beq.n	8001be6 <HAL_RCCEx_PeriphCLKConfig+0x5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB1CLKSOURCE(PeriphClkInit->I2sApb1ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB1_CONFIG(PeriphClkInit->I2sApb1ClockSelection);
 8001bc4:	4b6f      	ldr	r3, [pc, #444]	@ (8001d84 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001bc6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001bca:	f023 62c0 	bic.w	r2, r3, #100663296	@ 0x6000000
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001bd2:	496c      	ldr	r1, [pc, #432]	@ (8001d84 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001bd4:	4313      	orrs	r3, r2
 8001bd6:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001bde:	2b00      	cmp	r3, #0
 8001be0:	d101      	bne.n	8001be6 <HAL_RCCEx_PeriphCLKConfig+0x5a>
    {
      plli2sused = 1U;
 8001be2:	2301      	movs	r3, #1
 8001be4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- I2S APB2 configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == (RCC_PERIPHCLK_I2S_APB2))
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	f003 0302 	and.w	r3, r3, #2
 8001bee:	2b00      	cmp	r3, #0
 8001bf0:	d010      	beq.n	8001c14 <HAL_RCCEx_PeriphCLKConfig+0x88>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB2CLKSOURCE(PeriphClkInit->I2sApb2ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB2_CONFIG(PeriphClkInit->I2sApb2ClockSelection);
 8001bf2:	4b64      	ldr	r3, [pc, #400]	@ (8001d84 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001bf4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001bf8:	f023 52c0 	bic.w	r2, r3, #402653184	@ 0x18000000
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001c00:	4960      	ldr	r1, [pc, #384]	@ (8001d84 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001c02:	4313      	orrs	r3, r2
 8001c04:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001c0c:	2b00      	cmp	r3, #0
 8001c0e:	d101      	bne.n	8001c14 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      plli2sused = 1U;
 8001c10:	2301      	movs	r3, #1
 8001c12:	62fb      	str	r3, [r7, #44]	@ 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*--------------------------- SAI1 configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	f003 0304 	and.w	r3, r3, #4
 8001c1c:	2b00      	cmp	r3, #0
 8001c1e:	d017      	beq.n	8001c50 <HAL_RCCEx_PeriphCLKConfig+0xc4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8001c20:	4b58      	ldr	r3, [pc, #352]	@ (8001d84 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001c22:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001c26:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c2e:	4955      	ldr	r1, [pc, #340]	@ (8001d84 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001c30:	4313      	orrs	r3, r2
 8001c32:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c3a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8001c3e:	d101      	bne.n	8001c44 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      plli2sused = 1U;
 8001c40:	2301      	movs	r3, #1
 8001c42:	62fb      	str	r3, [r7, #44]	@ 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c48:	2b00      	cmp	r3, #0
 8001c4a:	d101      	bne.n	8001c50 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      pllsaiused = 1U;
 8001c4c:	2301      	movs	r3, #1
 8001c4e:	62bb      	str	r3, [r7, #40]	@ 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------------- SAI2 configuration ----------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	f003 0308 	and.w	r3, r3, #8
 8001c58:	2b00      	cmp	r3, #0
 8001c5a:	d017      	beq.n	8001c8c <HAL_RCCEx_PeriphCLKConfig+0x100>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8001c5c:	4b49      	ldr	r3, [pc, #292]	@ (8001d84 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001c5e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001c62:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001c6a:	4946      	ldr	r1, [pc, #280]	@ (8001d84 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001c6c:	4313      	orrs	r3, r2
 8001c6e:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001c76:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8001c7a:	d101      	bne.n	8001c80 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      plli2sused = 1U;
 8001c7c:	2301      	movs	r3, #1
 8001c7e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001c84:	2b00      	cmp	r3, #0
 8001c86:	d101      	bne.n	8001c8c <HAL_RCCEx_PeriphCLKConfig+0x100>
    {
      pllsaiused = 1U;
 8001c88:	2301      	movs	r3, #1
 8001c8a:	62bb      	str	r3, [r7, #40]	@ 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- RTC configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	f003 0320 	and.w	r3, r3, #32
 8001c94:	2b00      	cmp	r3, #0
 8001c96:	f000 808a 	beq.w	8001dae <HAL_RCCEx_PeriphCLKConfig+0x222>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8001c9a:	2300      	movs	r3, #0
 8001c9c:	60bb      	str	r3, [r7, #8]
 8001c9e:	4b39      	ldr	r3, [pc, #228]	@ (8001d84 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001ca0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ca2:	4a38      	ldr	r2, [pc, #224]	@ (8001d84 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001ca4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001ca8:	6413      	str	r3, [r2, #64]	@ 0x40
 8001caa:	4b36      	ldr	r3, [pc, #216]	@ (8001d84 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001cac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001cae:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001cb2:	60bb      	str	r3, [r7, #8]
 8001cb4:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8001cb6:	4b34      	ldr	r3, [pc, #208]	@ (8001d88 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	4a33      	ldr	r2, [pc, #204]	@ (8001d88 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8001cbc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001cc0:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8001cc2:	f7ff f83d 	bl	8000d40 <HAL_GetTick>
 8001cc6:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR & PWR_CR_DBP) == RESET)
 8001cc8:	e008      	b.n	8001cdc <HAL_RCCEx_PeriphCLKConfig+0x150>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001cca:	f7ff f839 	bl	8000d40 <HAL_GetTick>
 8001cce:	4602      	mov	r2, r0
 8001cd0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001cd2:	1ad3      	subs	r3, r2, r3
 8001cd4:	2b02      	cmp	r3, #2
 8001cd6:	d901      	bls.n	8001cdc <HAL_RCCEx_PeriphCLKConfig+0x150>
      {
        return HAL_TIMEOUT;
 8001cd8:	2303      	movs	r3, #3
 8001cda:	e278      	b.n	80021ce <HAL_RCCEx_PeriphCLKConfig+0x642>
    while ((PWR->CR & PWR_CR_DBP) == RESET)
 8001cdc:	4b2a      	ldr	r3, [pc, #168]	@ (8001d88 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001ce4:	2b00      	cmp	r3, #0
 8001ce6:	d0f0      	beq.n	8001cca <HAL_RCCEx_PeriphCLKConfig+0x13e>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8001ce8:	4b26      	ldr	r3, [pc, #152]	@ (8001d84 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001cea:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001cec:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001cf0:	623b      	str	r3, [r7, #32]
    if ((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001cf2:	6a3b      	ldr	r3, [r7, #32]
 8001cf4:	2b00      	cmp	r3, #0
 8001cf6:	d02f      	beq.n	8001d58 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001cfc:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001d00:	6a3a      	ldr	r2, [r7, #32]
 8001d02:	429a      	cmp	r2, r3
 8001d04:	d028      	beq.n	8001d58 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001d06:	4b1f      	ldr	r3, [pc, #124]	@ (8001d84 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001d08:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001d0a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8001d0e:	623b      	str	r3, [r7, #32]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8001d10:	4b1e      	ldr	r3, [pc, #120]	@ (8001d8c <HAL_RCCEx_PeriphCLKConfig+0x200>)
 8001d12:	2201      	movs	r2, #1
 8001d14:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001d16:	4b1d      	ldr	r3, [pc, #116]	@ (8001d8c <HAL_RCCEx_PeriphCLKConfig+0x200>)
 8001d18:	2200      	movs	r2, #0
 8001d1a:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8001d1c:	4a19      	ldr	r2, [pc, #100]	@ (8001d84 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001d1e:	6a3b      	ldr	r3, [r7, #32]
 8001d20:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8001d22:	4b18      	ldr	r3, [pc, #96]	@ (8001d84 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001d24:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001d26:	f003 0301 	and.w	r3, r3, #1
 8001d2a:	2b01      	cmp	r3, #1
 8001d2c:	d114      	bne.n	8001d58 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8001d2e:	f7ff f807 	bl	8000d40 <HAL_GetTick>
 8001d32:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001d34:	e00a      	b.n	8001d4c <HAL_RCCEx_PeriphCLKConfig+0x1c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001d36:	f7ff f803 	bl	8000d40 <HAL_GetTick>
 8001d3a:	4602      	mov	r2, r0
 8001d3c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d3e:	1ad3      	subs	r3, r2, r3
 8001d40:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001d44:	4293      	cmp	r3, r2
 8001d46:	d901      	bls.n	8001d4c <HAL_RCCEx_PeriphCLKConfig+0x1c0>
          {
            return HAL_TIMEOUT;
 8001d48:	2303      	movs	r3, #3
 8001d4a:	e240      	b.n	80021ce <HAL_RCCEx_PeriphCLKConfig+0x642>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001d4c:	4b0d      	ldr	r3, [pc, #52]	@ (8001d84 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001d4e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001d50:	f003 0302 	and.w	r3, r3, #2
 8001d54:	2b00      	cmp	r3, #0
 8001d56:	d0ee      	beq.n	8001d36 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d5c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001d60:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8001d64:	d114      	bne.n	8001d90 <HAL_RCCEx_PeriphCLKConfig+0x204>
 8001d66:	4b07      	ldr	r3, [pc, #28]	@ (8001d84 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001d68:	689b      	ldr	r3, [r3, #8]
 8001d6a:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d72:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8001d76:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8001d7a:	4902      	ldr	r1, [pc, #8]	@ (8001d84 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001d7c:	4313      	orrs	r3, r2
 8001d7e:	608b      	str	r3, [r1, #8]
 8001d80:	e00c      	b.n	8001d9c <HAL_RCCEx_PeriphCLKConfig+0x210>
 8001d82:	bf00      	nop
 8001d84:	40023800 	.word	0x40023800
 8001d88:	40007000 	.word	0x40007000
 8001d8c:	42470e40 	.word	0x42470e40
 8001d90:	4b4a      	ldr	r3, [pc, #296]	@ (8001ebc <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8001d92:	689b      	ldr	r3, [r3, #8]
 8001d94:	4a49      	ldr	r2, [pc, #292]	@ (8001ebc <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8001d96:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8001d9a:	6093      	str	r3, [r2, #8]
 8001d9c:	4b47      	ldr	r3, [pc, #284]	@ (8001ebc <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8001d9e:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001da4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001da8:	4944      	ldr	r1, [pc, #272]	@ (8001ebc <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8001daa:	4313      	orrs	r3, r2
 8001dac:	670b      	str	r3, [r1, #112]	@ 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	f003 0310 	and.w	r3, r3, #16
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	d004      	beq.n	8001dc4 <HAL_RCCEx_PeriphCLKConfig+0x238>
  {
    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	f893 2058 	ldrb.w	r2, [r3, #88]	@ 0x58
 8001dc0:	4b3f      	ldr	r3, [pc, #252]	@ (8001ec0 <HAL_RCCEx_PeriphCLKConfig+0x334>)
 8001dc2:	601a      	str	r2, [r3, #0]
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- FMPI2C1 Configuration -----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMPI2C1) == RCC_PERIPHCLK_FMPI2C1)
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001dcc:	2b00      	cmp	r3, #0
 8001dce:	d00a      	beq.n	8001de6 <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FMPI2C1CLKSOURCE(PeriphClkInit->Fmpi2c1ClockSelection));

    /* Configure the FMPI2C1 clock source */
    __HAL_RCC_FMPI2C1_CONFIG(PeriphClkInit->Fmpi2c1ClockSelection);
 8001dd0:	4b3a      	ldr	r3, [pc, #232]	@ (8001ebc <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8001dd2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001dd6:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001dde:	4937      	ldr	r1, [pc, #220]	@ (8001ebc <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8001de0:	4313      	orrs	r3, r2
 8001de2:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ CEC Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	d00a      	beq.n	8001e08 <HAL_RCCEx_PeriphCLKConfig+0x27c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8001df2:	4b32      	ldr	r3, [pc, #200]	@ (8001ebc <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8001df4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001df8:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001e00:	492e      	ldr	r1, [pc, #184]	@ (8001ebc <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8001e02:	4313      	orrs	r3, r2
 8001e04:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- CLK48 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001e10:	2b00      	cmp	r3, #0
 8001e12:	d011      	beq.n	8001e38 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48CLKSOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 clock source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8001e14:	4b29      	ldr	r3, [pc, #164]	@ (8001ebc <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8001e16:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001e1a:	f023 6200 	bic.w	r2, r3, #134217728	@ 0x8000000
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001e22:	4926      	ldr	r1, [pc, #152]	@ (8001ebc <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8001e24:	4313      	orrs	r3, r2
 8001e26:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94

    /* Enable the PLLSAI when it's used as clock source for CLK48 */
    if (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP)
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001e2e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8001e32:	d101      	bne.n	8001e38 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      pllsaiused = 1U;
 8001e34:	2301      	movs	r3, #1
 8001e36:	62bb      	str	r3, [r7, #40]	@ 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- SDIO Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO)
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001e40:	2b00      	cmp	r3, #0
 8001e42:	d00a      	beq.n	8001e5a <HAL_RCCEx_PeriphCLKConfig+0x2ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDIOCLKSOURCE(PeriphClkInit->SdioClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_SDIO_CONFIG(PeriphClkInit->SdioClockSelection);
 8001e44:	4b1d      	ldr	r3, [pc, #116]	@ (8001ebc <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8001e46:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001e4a:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001e52:	491a      	ldr	r1, [pc, #104]	@ (8001ebc <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8001e54:	4313      	orrs	r3, r2
 8001e56:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ SPDIFRX Configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	d011      	beq.n	8001e8a <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPDIFRXCLKSOURCE(PeriphClkInit->SpdifClockSelection));

    /* Configure the SPDIFRX clock source */
    __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifClockSelection);
 8001e66:	4b15      	ldr	r3, [pc, #84]	@ (8001ebc <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8001e68:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001e6c:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001e74:	4911      	ldr	r1, [pc, #68]	@ (8001ebc <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8001e76:	4313      	orrs	r3, r2
 8001e78:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
    /* Enable the PLLI2S when it's used as clock source for SPDIFRX */
    if (PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP)
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001e80:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8001e84:	d101      	bne.n	8001e8a <HAL_RCCEx_PeriphCLKConfig+0x2fe>
    {
      plli2sused = 1U;
 8001e86:	2301      	movs	r3, #1
 8001e88:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /*--------------------------------------------------------------------------*/

  /*---------------------------- PLLI2S Configuration ------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S on APB1,
     I2S on APB2 or SPDIFRX */
  if ((plli2sused == 1U) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 8001e8a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001e8c:	2b01      	cmp	r3, #1
 8001e8e:	d005      	beq.n	8001e9c <HAL_RCCEx_PeriphCLKConfig+0x310>
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8001e98:	f040 80ff 	bne.w	800209a <HAL_RCCEx_PeriphCLKConfig+0x50e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8001e9c:	4b09      	ldr	r3, [pc, #36]	@ (8001ec4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8001e9e:	2200      	movs	r2, #0
 8001ea0:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8001ea2:	f7fe ff4d 	bl	8000d40 <HAL_GetTick>
 8001ea6:	6278      	str	r0, [r7, #36]	@ 0x24
    /* Wait till PLLI2S is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8001ea8:	e00e      	b.n	8001ec8 <HAL_RCCEx_PeriphCLKConfig+0x33c>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8001eaa:	f7fe ff49 	bl	8000d40 <HAL_GetTick>
 8001eae:	4602      	mov	r2, r0
 8001eb0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001eb2:	1ad3      	subs	r3, r2, r3
 8001eb4:	2b02      	cmp	r3, #2
 8001eb6:	d907      	bls.n	8001ec8 <HAL_RCCEx_PeriphCLKConfig+0x33c>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8001eb8:	2303      	movs	r3, #3
 8001eba:	e188      	b.n	80021ce <HAL_RCCEx_PeriphCLKConfig+0x642>
 8001ebc:	40023800 	.word	0x40023800
 8001ec0:	424711e0 	.word	0x424711e0
 8001ec4:	42470068 	.word	0x42470068
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8001ec8:	4b7e      	ldr	r3, [pc, #504]	@ (80020c4 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8001ed0:	2b00      	cmp	r3, #0
 8001ed2:	d1ea      	bne.n	8001eaa <HAL_RCCEx_PeriphCLKConfig+0x31e>
    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*------ In Case of PLLI2S is selected as source clock for I2S -----------*/
    if (((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1)
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	f003 0301 	and.w	r3, r3, #1
 8001edc:	2b00      	cmp	r3, #0
 8001ede:	d003      	beq.n	8001ee8 <HAL_RCCEx_PeriphCLKConfig+0x35c>
         && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001ee4:	2b00      	cmp	r3, #0
 8001ee6:	d009      	beq.n	8001efc <HAL_RCCEx_PeriphCLKConfig+0x370>
        ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	f003 0302 	and.w	r3, r3, #2
         && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 8001ef0:	2b00      	cmp	r3, #0
 8001ef2:	d028      	beq.n	8001f46 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
        ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001ef8:	2b00      	cmp	r3, #0
 8001efa:	d124      	bne.n	8001f46 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP/PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8001efc:	4b71      	ldr	r3, [pc, #452]	@ (80020c4 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8001efe:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8001f02:	0c1b      	lsrs	r3, r3, #16
 8001f04:	f003 0303 	and.w	r3, r3, #3
 8001f08:	3301      	adds	r3, #1
 8001f0a:	005b      	lsls	r3, r3, #1
 8001f0c:	61fb      	str	r3, [r7, #28]
      plli2sq = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8001f0e:	4b6d      	ldr	r3, [pc, #436]	@ (80020c4 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8001f10:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8001f14:	0e1b      	lsrs	r3, r3, #24
 8001f16:	f003 030f 	and.w	r3, r3, #15
 8001f1a:	61bb      	str	r3, [r7, #24]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, plli2sp, plli2sq,
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	685a      	ldr	r2, [r3, #4]
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	689b      	ldr	r3, [r3, #8]
 8001f24:	019b      	lsls	r3, r3, #6
 8001f26:	431a      	orrs	r2, r3
 8001f28:	69fb      	ldr	r3, [r7, #28]
 8001f2a:	085b      	lsrs	r3, r3, #1
 8001f2c:	3b01      	subs	r3, #1
 8001f2e:	041b      	lsls	r3, r3, #16
 8001f30:	431a      	orrs	r2, r3
 8001f32:	69bb      	ldr	r3, [r7, #24]
 8001f34:	061b      	lsls	r3, r3, #24
 8001f36:	431a      	orrs	r2, r3
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	695b      	ldr	r3, [r3, #20]
 8001f3c:	071b      	lsls	r3, r3, #28
 8001f3e:	4961      	ldr	r1, [pc, #388]	@ (80020c4 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8001f40:	4313      	orrs	r3, r2
 8001f42:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
                              PeriphClkInit->PLLI2S.PLLI2SR);
    }

    /*------- In Case of PLLI2S is selected as source clock for SAI ----------*/
    if (((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	f003 0304 	and.w	r3, r3, #4
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	d004      	beq.n	8001f5c <HAL_RCCEx_PeriphCLKConfig+0x3d0>
         && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f56:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8001f5a:	d00a      	beq.n	8001f72 <HAL_RCCEx_PeriphCLKConfig+0x3e6>
        ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	f003 0308 	and.w	r3, r3, #8
         && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8001f64:	2b00      	cmp	r3, #0
 8001f66:	d035      	beq.n	8001fd4 <HAL_RCCEx_PeriphCLKConfig+0x448>
        ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001f6c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8001f70:	d130      	bne.n	8001fd4 <HAL_RCCEx_PeriphCLKConfig+0x448>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP/PLLI2SR value from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8001f72:	4b54      	ldr	r3, [pc, #336]	@ (80020c4 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8001f74:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8001f78:	0c1b      	lsrs	r3, r3, #16
 8001f7a:	f003 0303 	and.w	r3, r3, #3
 8001f7e:	3301      	adds	r3, #1
 8001f80:	005b      	lsls	r3, r3, #1
 8001f82:	61fb      	str	r3, [r7, #28]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8001f84:	4b4f      	ldr	r3, [pc, #316]	@ (80020c4 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8001f86:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8001f8a:	0f1b      	lsrs	r3, r3, #28
 8001f8c:	f003 0307 	and.w	r3, r3, #7
 8001f90:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, plli2sp,
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	685a      	ldr	r2, [r3, #4]
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	689b      	ldr	r3, [r3, #8]
 8001f9a:	019b      	lsls	r3, r3, #6
 8001f9c:	431a      	orrs	r2, r3
 8001f9e:	69fb      	ldr	r3, [r7, #28]
 8001fa0:	085b      	lsrs	r3, r3, #1
 8001fa2:	3b01      	subs	r3, #1
 8001fa4:	041b      	lsls	r3, r3, #16
 8001fa6:	431a      	orrs	r2, r3
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	691b      	ldr	r3, [r3, #16]
 8001fac:	061b      	lsls	r3, r3, #24
 8001fae:	431a      	orrs	r2, r3
 8001fb0:	697b      	ldr	r3, [r7, #20]
 8001fb2:	071b      	lsls	r3, r3, #28
 8001fb4:	4943      	ldr	r1, [pc, #268]	@ (80020c4 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8001fb6:	4313      	orrs	r3, r2
 8001fb8:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
                              PeriphClkInit->PLLI2S.PLLI2SQ, plli2sr);

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8001fbc:	4b41      	ldr	r3, [pc, #260]	@ (80020c4 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8001fbe:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001fc2:	f023 021f 	bic.w	r2, r3, #31
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001fca:	3b01      	subs	r3, #1
 8001fcc:	493d      	ldr	r1, [pc, #244]	@ (80020c4 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8001fce:	4313      	orrs	r3, r2
 8001fd0:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*------ In Case of PLLI2S is selected as source clock for SPDIFRX -------*/
    if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001fdc:	2b00      	cmp	r3, #0
 8001fde:	d029      	beq.n	8002034 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
        && (PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP))
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001fe4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8001fe8:	d124      	bne.n	8002034 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));
      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      plli2sq = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8001fea:	4b36      	ldr	r3, [pc, #216]	@ (80020c4 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8001fec:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8001ff0:	0c1b      	lsrs	r3, r3, #16
 8001ff2:	f003 0303 	and.w	r3, r3, #3
 8001ff6:	3301      	adds	r3, #1
 8001ff8:	005b      	lsls	r3, r3, #1
 8001ffa:	61bb      	str	r3, [r7, #24]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8001ffc:	4b31      	ldr	r3, [pc, #196]	@ (80020c4 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8001ffe:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002002:	0f1b      	lsrs	r3, r3, #28
 8002004:	f003 0307 	and.w	r3, r3, #7
 8002008:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SP,
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	685a      	ldr	r2, [r3, #4]
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	689b      	ldr	r3, [r3, #8]
 8002012:	019b      	lsls	r3, r3, #6
 8002014:	431a      	orrs	r2, r3
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	68db      	ldr	r3, [r3, #12]
 800201a:	085b      	lsrs	r3, r3, #1
 800201c:	3b01      	subs	r3, #1
 800201e:	041b      	lsls	r3, r3, #16
 8002020:	431a      	orrs	r2, r3
 8002022:	69bb      	ldr	r3, [r7, #24]
 8002024:	061b      	lsls	r3, r3, #24
 8002026:	431a      	orrs	r2, r3
 8002028:	697b      	ldr	r3, [r7, #20]
 800202a:	071b      	lsls	r3, r3, #28
 800202c:	4925      	ldr	r1, [pc, #148]	@ (80020c4 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800202e:	4313      	orrs	r3, r2
 8002030:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
                              plli2sq, plli2sr);
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800203c:	2b00      	cmp	r3, #0
 800203e:	d016      	beq.n	800206e <HAL_RCCEx_PeriphCLKConfig+0x4e2>
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SP,
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	685a      	ldr	r2, [r3, #4]
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	689b      	ldr	r3, [r3, #8]
 8002048:	019b      	lsls	r3, r3, #6
 800204a:	431a      	orrs	r2, r3
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	68db      	ldr	r3, [r3, #12]
 8002050:	085b      	lsrs	r3, r3, #1
 8002052:	3b01      	subs	r3, #1
 8002054:	041b      	lsls	r3, r3, #16
 8002056:	431a      	orrs	r2, r3
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	691b      	ldr	r3, [r3, #16]
 800205c:	061b      	lsls	r3, r3, #24
 800205e:	431a      	orrs	r2, r3
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	695b      	ldr	r3, [r3, #20]
 8002064:	071b      	lsls	r3, r3, #28
 8002066:	4917      	ldr	r1, [pc, #92]	@ (80020c4 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002068:	4313      	orrs	r3, r2
 800206a:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
                              PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800206e:	4b16      	ldr	r3, [pc, #88]	@ (80020c8 <HAL_RCCEx_PeriphCLKConfig+0x53c>)
 8002070:	2201      	movs	r2, #1
 8002072:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8002074:	f7fe fe64 	bl	8000d40 <HAL_GetTick>
 8002078:	6278      	str	r0, [r7, #36]	@ 0x24
    /* Wait till PLLI2S is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800207a:	e008      	b.n	800208e <HAL_RCCEx_PeriphCLKConfig+0x502>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800207c:	f7fe fe60 	bl	8000d40 <HAL_GetTick>
 8002080:	4602      	mov	r2, r0
 8002082:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002084:	1ad3      	subs	r3, r2, r3
 8002086:	2b02      	cmp	r3, #2
 8002088:	d901      	bls.n	800208e <HAL_RCCEx_PeriphCLKConfig+0x502>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800208a:	2303      	movs	r3, #3
 800208c:	e09f      	b.n	80021ce <HAL_RCCEx_PeriphCLKConfig+0x642>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800208e:	4b0d      	ldr	r3, [pc, #52]	@ (80020c4 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002096:	2b00      	cmp	r3, #0
 8002098:	d0f0      	beq.n	800207c <HAL_RCCEx_PeriphCLKConfig+0x4f0>
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- PLLSAI Configuration -----------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, CLK48 or SDIO */
  if (pllsaiused == 1U)
 800209a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800209c:	2b01      	cmp	r3, #1
 800209e:	f040 8095 	bne.w	80021cc <HAL_RCCEx_PeriphCLKConfig+0x640>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 80020a2:	4b0a      	ldr	r3, [pc, #40]	@ (80020cc <HAL_RCCEx_PeriphCLKConfig+0x540>)
 80020a4:	2200      	movs	r2, #0
 80020a6:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80020a8:	f7fe fe4a 	bl	8000d40 <HAL_GetTick>
 80020ac:	6278      	str	r0, [r7, #36]	@ 0x24
    /* Wait till PLLSAI is disabled */
    while (__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80020ae:	e00f      	b.n	80020d0 <HAL_RCCEx_PeriphCLKConfig+0x544>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80020b0:	f7fe fe46 	bl	8000d40 <HAL_GetTick>
 80020b4:	4602      	mov	r2, r0
 80020b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80020b8:	1ad3      	subs	r3, r2, r3
 80020ba:	2b02      	cmp	r3, #2
 80020bc:	d908      	bls.n	80020d0 <HAL_RCCEx_PeriphCLKConfig+0x544>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80020be:	2303      	movs	r3, #3
 80020c0:	e085      	b.n	80021ce <HAL_RCCEx_PeriphCLKConfig+0x642>
 80020c2:	bf00      	nop
 80020c4:	40023800 	.word	0x40023800
 80020c8:	42470068 	.word	0x42470068
 80020cc:	42470070 	.word	0x42470070
    while (__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80020d0:	4b41      	ldr	r3, [pc, #260]	@ (80021d8 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80020d8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80020dc:	d0e8      	beq.n	80020b0 <HAL_RCCEx_PeriphCLKConfig+0x524>
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIM_VALUE(PeriphClkInit->PLLSAI.PLLSAIM));
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*------ In Case of PLLSAI is selected as source clock for SAI -----------*/
    if (((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	f003 0304 	and.w	r3, r3, #4
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	d003      	beq.n	80020f2 <HAL_RCCEx_PeriphCLKConfig+0x566>
         && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	d009      	beq.n	8002106 <HAL_RCCEx_PeriphCLKConfig+0x57a>
        ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	f003 0308 	and.w	r3, r3, #8
         && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	d02b      	beq.n	8002156 <HAL_RCCEx_PeriphCLKConfig+0x5ca>
        ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002102:	2b00      	cmp	r3, #0
 8002104:	d127      	bne.n	8002156 <HAL_RCCEx_PeriphCLKConfig+0x5ca>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      pllsaip = ((((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos) + 1U) << 1U);
 8002106:	4b34      	ldr	r3, [pc, #208]	@ (80021d8 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8002108:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800210c:	0c1b      	lsrs	r3, r3, #16
 800210e:	f003 0303 	and.w	r3, r3, #3
 8002112:	3301      	adds	r3, #1
 8002114:	005b      	lsls	r3, r3, #1
 8002116:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN, pllsaip,
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	699a      	ldr	r2, [r3, #24]
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	69db      	ldr	r3, [r3, #28]
 8002120:	019b      	lsls	r3, r3, #6
 8002122:	431a      	orrs	r2, r3
 8002124:	693b      	ldr	r3, [r7, #16]
 8002126:	085b      	lsrs	r3, r3, #1
 8002128:	3b01      	subs	r3, #1
 800212a:	041b      	lsls	r3, r3, #16
 800212c:	431a      	orrs	r2, r3
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002132:	061b      	lsls	r3, r3, #24
 8002134:	4928      	ldr	r1, [pc, #160]	@ (80021d8 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8002136:	4313      	orrs	r3, r2
 8002138:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
                              PeriphClkInit->PLLSAI.PLLSAIQ, 0U);

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800213c:	4b26      	ldr	r3, [pc, #152]	@ (80021d8 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 800213e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002142:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800214a:	3b01      	subs	r3, #1
 800214c:	021b      	lsls	r3, r3, #8
 800214e:	4922      	ldr	r1, [pc, #136]	@ (80021d8 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8002150:	4313      	orrs	r3, r2
 8002152:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*------ In Case of PLLSAI is selected as source clock for CLK48 ---------*/
    /* In Case of PLLI2S is selected as source clock for CLK48 */
    if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800215e:	2b00      	cmp	r3, #0
 8002160:	d01d      	beq.n	800219e <HAL_RCCEx_PeriphCLKConfig+0x612>
        && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP))
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002166:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800216a:	d118      	bne.n	800219e <HAL_RCCEx_PeriphCLKConfig+0x612>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      pllsaiq = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800216c:	4b1a      	ldr	r3, [pc, #104]	@ (80021d8 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 800216e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002172:	0e1b      	lsrs	r3, r3, #24
 8002174:	f003 030f 	and.w	r3, r3, #15
 8002178:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) * (PLLI2SN/PLLSAIM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN, PeriphClkInit->PLLSAI.PLLSAIP,
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	699a      	ldr	r2, [r3, #24]
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	69db      	ldr	r3, [r3, #28]
 8002182:	019b      	lsls	r3, r3, #6
 8002184:	431a      	orrs	r2, r3
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	6a1b      	ldr	r3, [r3, #32]
 800218a:	085b      	lsrs	r3, r3, #1
 800218c:	3b01      	subs	r3, #1
 800218e:	041b      	lsls	r3, r3, #16
 8002190:	431a      	orrs	r2, r3
 8002192:	68fb      	ldr	r3, [r7, #12]
 8002194:	061b      	lsls	r3, r3, #24
 8002196:	4910      	ldr	r1, [pc, #64]	@ (80021d8 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8002198:	4313      	orrs	r3, r2
 800219a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
                              pllsaiq, 0U);
    }

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 800219e:	4b0f      	ldr	r3, [pc, #60]	@ (80021dc <HAL_RCCEx_PeriphCLKConfig+0x650>)
 80021a0:	2201      	movs	r2, #1
 80021a2:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80021a4:	f7fe fdcc 	bl	8000d40 <HAL_GetTick>
 80021a8:	6278      	str	r0, [r7, #36]	@ 0x24
    /* Wait till PLLSAI is ready */
    while (__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80021aa:	e008      	b.n	80021be <HAL_RCCEx_PeriphCLKConfig+0x632>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80021ac:	f7fe fdc8 	bl	8000d40 <HAL_GetTick>
 80021b0:	4602      	mov	r2, r0
 80021b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80021b4:	1ad3      	subs	r3, r2, r3
 80021b6:	2b02      	cmp	r3, #2
 80021b8:	d901      	bls.n	80021be <HAL_RCCEx_PeriphCLKConfig+0x632>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80021ba:	2303      	movs	r3, #3
 80021bc:	e007      	b.n	80021ce <HAL_RCCEx_PeriphCLKConfig+0x642>
    while (__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80021be:	4b06      	ldr	r3, [pc, #24]	@ (80021d8 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80021c6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80021ca:	d1ef      	bne.n	80021ac <HAL_RCCEx_PeriphCLKConfig+0x620>
      }
    }
  }
  return HAL_OK;
 80021cc:	2300      	movs	r3, #0
}
 80021ce:	4618      	mov	r0, r3
 80021d0:	3730      	adds	r7, #48	@ 0x30
 80021d2:	46bd      	mov	sp, r7
 80021d4:	bd80      	pop	{r7, pc}
 80021d6:	bf00      	nop
 80021d8:	40023800 	.word	0x40023800
 80021dc:	42470070 	.word	0x42470070

080021e0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80021e0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80021e4:	b0ae      	sub	sp, #184	@ 0xb8
 80021e6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80021e8:	2300      	movs	r3, #0
 80021ea:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t pllvco = 0U;
 80021ee:	2300      	movs	r3, #0
 80021f0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t pllp = 0U;
 80021f4:	2300      	movs	r3, #0
 80021f6:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  uint32_t pllr = 0U;
 80021fa:	2300      	movs	r3, #0
 80021fc:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t sysclockfreq = 0U;
 8002200:	2300      	movs	r3, #0
 8002202:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002206:	4bcb      	ldr	r3, [pc, #812]	@ (8002534 <HAL_RCC_GetSysClockFreq+0x354>)
 8002208:	689b      	ldr	r3, [r3, #8]
 800220a:	f003 030c 	and.w	r3, r3, #12
 800220e:	2b0c      	cmp	r3, #12
 8002210:	f200 8206 	bhi.w	8002620 <HAL_RCC_GetSysClockFreq+0x440>
 8002214:	a201      	add	r2, pc, #4	@ (adr r2, 800221c <HAL_RCC_GetSysClockFreq+0x3c>)
 8002216:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800221a:	bf00      	nop
 800221c:	08002251 	.word	0x08002251
 8002220:	08002621 	.word	0x08002621
 8002224:	08002621 	.word	0x08002621
 8002228:	08002621 	.word	0x08002621
 800222c:	08002259 	.word	0x08002259
 8002230:	08002621 	.word	0x08002621
 8002234:	08002621 	.word	0x08002621
 8002238:	08002621 	.word	0x08002621
 800223c:	08002261 	.word	0x08002261
 8002240:	08002621 	.word	0x08002621
 8002244:	08002621 	.word	0x08002621
 8002248:	08002621 	.word	0x08002621
 800224c:	08002451 	.word	0x08002451
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002250:	4bb9      	ldr	r3, [pc, #740]	@ (8002538 <HAL_RCC_GetSysClockFreq+0x358>)
 8002252:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8002256:	e1e7      	b.n	8002628 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002258:	4bb8      	ldr	r3, [pc, #736]	@ (800253c <HAL_RCC_GetSysClockFreq+0x35c>)
 800225a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 800225e:	e1e3      	b.n	8002628 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002260:	4bb4      	ldr	r3, [pc, #720]	@ (8002534 <HAL_RCC_GetSysClockFreq+0x354>)
 8002262:	685b      	ldr	r3, [r3, #4]
 8002264:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002268:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800226c:	4bb1      	ldr	r3, [pc, #708]	@ (8002534 <HAL_RCC_GetSysClockFreq+0x354>)
 800226e:	685b      	ldr	r3, [r3, #4]
 8002270:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002274:	2b00      	cmp	r3, #0
 8002276:	d071      	beq.n	800235c <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002278:	4bae      	ldr	r3, [pc, #696]	@ (8002534 <HAL_RCC_GetSysClockFreq+0x354>)
 800227a:	685b      	ldr	r3, [r3, #4]
 800227c:	099b      	lsrs	r3, r3, #6
 800227e:	2200      	movs	r2, #0
 8002280:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8002284:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 8002288:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800228c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002290:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8002294:	2300      	movs	r3, #0
 8002296:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800229a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800229e:	4622      	mov	r2, r4
 80022a0:	462b      	mov	r3, r5
 80022a2:	f04f 0000 	mov.w	r0, #0
 80022a6:	f04f 0100 	mov.w	r1, #0
 80022aa:	0159      	lsls	r1, r3, #5
 80022ac:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80022b0:	0150      	lsls	r0, r2, #5
 80022b2:	4602      	mov	r2, r0
 80022b4:	460b      	mov	r3, r1
 80022b6:	4621      	mov	r1, r4
 80022b8:	1a51      	subs	r1, r2, r1
 80022ba:	6439      	str	r1, [r7, #64]	@ 0x40
 80022bc:	4629      	mov	r1, r5
 80022be:	eb63 0301 	sbc.w	r3, r3, r1
 80022c2:	647b      	str	r3, [r7, #68]	@ 0x44
 80022c4:	f04f 0200 	mov.w	r2, #0
 80022c8:	f04f 0300 	mov.w	r3, #0
 80022cc:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	@ 0x40
 80022d0:	4649      	mov	r1, r9
 80022d2:	018b      	lsls	r3, r1, #6
 80022d4:	4641      	mov	r1, r8
 80022d6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80022da:	4641      	mov	r1, r8
 80022dc:	018a      	lsls	r2, r1, #6
 80022de:	4641      	mov	r1, r8
 80022e0:	1a51      	subs	r1, r2, r1
 80022e2:	63b9      	str	r1, [r7, #56]	@ 0x38
 80022e4:	4649      	mov	r1, r9
 80022e6:	eb63 0301 	sbc.w	r3, r3, r1
 80022ea:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80022ec:	f04f 0200 	mov.w	r2, #0
 80022f0:	f04f 0300 	mov.w	r3, #0
 80022f4:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	@ 0x38
 80022f8:	4649      	mov	r1, r9
 80022fa:	00cb      	lsls	r3, r1, #3
 80022fc:	4641      	mov	r1, r8
 80022fe:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002302:	4641      	mov	r1, r8
 8002304:	00ca      	lsls	r2, r1, #3
 8002306:	4610      	mov	r0, r2
 8002308:	4619      	mov	r1, r3
 800230a:	4603      	mov	r3, r0
 800230c:	4622      	mov	r2, r4
 800230e:	189b      	adds	r3, r3, r2
 8002310:	633b      	str	r3, [r7, #48]	@ 0x30
 8002312:	462b      	mov	r3, r5
 8002314:	460a      	mov	r2, r1
 8002316:	eb42 0303 	adc.w	r3, r2, r3
 800231a:	637b      	str	r3, [r7, #52]	@ 0x34
 800231c:	f04f 0200 	mov.w	r2, #0
 8002320:	f04f 0300 	mov.w	r3, #0
 8002324:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8002328:	4629      	mov	r1, r5
 800232a:	024b      	lsls	r3, r1, #9
 800232c:	4621      	mov	r1, r4
 800232e:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002332:	4621      	mov	r1, r4
 8002334:	024a      	lsls	r2, r1, #9
 8002336:	4610      	mov	r0, r2
 8002338:	4619      	mov	r1, r3
 800233a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800233e:	2200      	movs	r2, #0
 8002340:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8002344:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8002348:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 800234c:	f7fd ff5a 	bl	8000204 <__aeabi_uldivmod>
 8002350:	4602      	mov	r2, r0
 8002352:	460b      	mov	r3, r1
 8002354:	4613      	mov	r3, r2
 8002356:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800235a:	e067      	b.n	800242c <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800235c:	4b75      	ldr	r3, [pc, #468]	@ (8002534 <HAL_RCC_GetSysClockFreq+0x354>)
 800235e:	685b      	ldr	r3, [r3, #4]
 8002360:	099b      	lsrs	r3, r3, #6
 8002362:	2200      	movs	r2, #0
 8002364:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8002368:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 800236c:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8002370:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002374:	67bb      	str	r3, [r7, #120]	@ 0x78
 8002376:	2300      	movs	r3, #0
 8002378:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800237a:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 800237e:	4622      	mov	r2, r4
 8002380:	462b      	mov	r3, r5
 8002382:	f04f 0000 	mov.w	r0, #0
 8002386:	f04f 0100 	mov.w	r1, #0
 800238a:	0159      	lsls	r1, r3, #5
 800238c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002390:	0150      	lsls	r0, r2, #5
 8002392:	4602      	mov	r2, r0
 8002394:	460b      	mov	r3, r1
 8002396:	4621      	mov	r1, r4
 8002398:	1a51      	subs	r1, r2, r1
 800239a:	62b9      	str	r1, [r7, #40]	@ 0x28
 800239c:	4629      	mov	r1, r5
 800239e:	eb63 0301 	sbc.w	r3, r3, r1
 80023a2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80023a4:	f04f 0200 	mov.w	r2, #0
 80023a8:	f04f 0300 	mov.w	r3, #0
 80023ac:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	@ 0x28
 80023b0:	4649      	mov	r1, r9
 80023b2:	018b      	lsls	r3, r1, #6
 80023b4:	4641      	mov	r1, r8
 80023b6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80023ba:	4641      	mov	r1, r8
 80023bc:	018a      	lsls	r2, r1, #6
 80023be:	4641      	mov	r1, r8
 80023c0:	ebb2 0a01 	subs.w	sl, r2, r1
 80023c4:	4649      	mov	r1, r9
 80023c6:	eb63 0b01 	sbc.w	fp, r3, r1
 80023ca:	f04f 0200 	mov.w	r2, #0
 80023ce:	f04f 0300 	mov.w	r3, #0
 80023d2:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80023d6:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80023da:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80023de:	4692      	mov	sl, r2
 80023e0:	469b      	mov	fp, r3
 80023e2:	4623      	mov	r3, r4
 80023e4:	eb1a 0303 	adds.w	r3, sl, r3
 80023e8:	623b      	str	r3, [r7, #32]
 80023ea:	462b      	mov	r3, r5
 80023ec:	eb4b 0303 	adc.w	r3, fp, r3
 80023f0:	627b      	str	r3, [r7, #36]	@ 0x24
 80023f2:	f04f 0200 	mov.w	r2, #0
 80023f6:	f04f 0300 	mov.w	r3, #0
 80023fa:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 80023fe:	4629      	mov	r1, r5
 8002400:	028b      	lsls	r3, r1, #10
 8002402:	4621      	mov	r1, r4
 8002404:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002408:	4621      	mov	r1, r4
 800240a:	028a      	lsls	r2, r1, #10
 800240c:	4610      	mov	r0, r2
 800240e:	4619      	mov	r1, r3
 8002410:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002414:	2200      	movs	r2, #0
 8002416:	673b      	str	r3, [r7, #112]	@ 0x70
 8002418:	677a      	str	r2, [r7, #116]	@ 0x74
 800241a:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 800241e:	f7fd fef1 	bl	8000204 <__aeabi_uldivmod>
 8002422:	4602      	mov	r2, r0
 8002424:	460b      	mov	r3, r1
 8002426:	4613      	mov	r3, r2
 8002428:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 800242c:	4b41      	ldr	r3, [pc, #260]	@ (8002534 <HAL_RCC_GetSysClockFreq+0x354>)
 800242e:	685b      	ldr	r3, [r3, #4]
 8002430:	0c1b      	lsrs	r3, r3, #16
 8002432:	f003 0303 	and.w	r3, r3, #3
 8002436:	3301      	adds	r3, #1
 8002438:	005b      	lsls	r3, r3, #1
 800243a:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

      sysclockfreq = pllvco / pllp;
 800243e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8002442:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8002446:	fbb2 f3f3 	udiv	r3, r2, r3
 800244a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 800244e:	e0eb      	b.n	8002628 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002450:	4b38      	ldr	r3, [pc, #224]	@ (8002534 <HAL_RCC_GetSysClockFreq+0x354>)
 8002452:	685b      	ldr	r3, [r3, #4]
 8002454:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002458:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800245c:	4b35      	ldr	r3, [pc, #212]	@ (8002534 <HAL_RCC_GetSysClockFreq+0x354>)
 800245e:	685b      	ldr	r3, [r3, #4]
 8002460:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002464:	2b00      	cmp	r3, #0
 8002466:	d06b      	beq.n	8002540 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002468:	4b32      	ldr	r3, [pc, #200]	@ (8002534 <HAL_RCC_GetSysClockFreq+0x354>)
 800246a:	685b      	ldr	r3, [r3, #4]
 800246c:	099b      	lsrs	r3, r3, #6
 800246e:	2200      	movs	r2, #0
 8002470:	66bb      	str	r3, [r7, #104]	@ 0x68
 8002472:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8002474:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002476:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800247a:	663b      	str	r3, [r7, #96]	@ 0x60
 800247c:	2300      	movs	r3, #0
 800247e:	667b      	str	r3, [r7, #100]	@ 0x64
 8002480:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 8002484:	4622      	mov	r2, r4
 8002486:	462b      	mov	r3, r5
 8002488:	f04f 0000 	mov.w	r0, #0
 800248c:	f04f 0100 	mov.w	r1, #0
 8002490:	0159      	lsls	r1, r3, #5
 8002492:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002496:	0150      	lsls	r0, r2, #5
 8002498:	4602      	mov	r2, r0
 800249a:	460b      	mov	r3, r1
 800249c:	4621      	mov	r1, r4
 800249e:	1a51      	subs	r1, r2, r1
 80024a0:	61b9      	str	r1, [r7, #24]
 80024a2:	4629      	mov	r1, r5
 80024a4:	eb63 0301 	sbc.w	r3, r3, r1
 80024a8:	61fb      	str	r3, [r7, #28]
 80024aa:	f04f 0200 	mov.w	r2, #0
 80024ae:	f04f 0300 	mov.w	r3, #0
 80024b2:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 80024b6:	4659      	mov	r1, fp
 80024b8:	018b      	lsls	r3, r1, #6
 80024ba:	4651      	mov	r1, sl
 80024bc:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80024c0:	4651      	mov	r1, sl
 80024c2:	018a      	lsls	r2, r1, #6
 80024c4:	4651      	mov	r1, sl
 80024c6:	ebb2 0801 	subs.w	r8, r2, r1
 80024ca:	4659      	mov	r1, fp
 80024cc:	eb63 0901 	sbc.w	r9, r3, r1
 80024d0:	f04f 0200 	mov.w	r2, #0
 80024d4:	f04f 0300 	mov.w	r3, #0
 80024d8:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80024dc:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80024e0:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80024e4:	4690      	mov	r8, r2
 80024e6:	4699      	mov	r9, r3
 80024e8:	4623      	mov	r3, r4
 80024ea:	eb18 0303 	adds.w	r3, r8, r3
 80024ee:	613b      	str	r3, [r7, #16]
 80024f0:	462b      	mov	r3, r5
 80024f2:	eb49 0303 	adc.w	r3, r9, r3
 80024f6:	617b      	str	r3, [r7, #20]
 80024f8:	f04f 0200 	mov.w	r2, #0
 80024fc:	f04f 0300 	mov.w	r3, #0
 8002500:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8002504:	4629      	mov	r1, r5
 8002506:	024b      	lsls	r3, r1, #9
 8002508:	4621      	mov	r1, r4
 800250a:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800250e:	4621      	mov	r1, r4
 8002510:	024a      	lsls	r2, r1, #9
 8002512:	4610      	mov	r0, r2
 8002514:	4619      	mov	r1, r3
 8002516:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800251a:	2200      	movs	r2, #0
 800251c:	65bb      	str	r3, [r7, #88]	@ 0x58
 800251e:	65fa      	str	r2, [r7, #92]	@ 0x5c
 8002520:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8002524:	f7fd fe6e 	bl	8000204 <__aeabi_uldivmod>
 8002528:	4602      	mov	r2, r0
 800252a:	460b      	mov	r3, r1
 800252c:	4613      	mov	r3, r2
 800252e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8002532:	e065      	b.n	8002600 <HAL_RCC_GetSysClockFreq+0x420>
 8002534:	40023800 	.word	0x40023800
 8002538:	00f42400 	.word	0x00f42400
 800253c:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002540:	4b3d      	ldr	r3, [pc, #244]	@ (8002638 <HAL_RCC_GetSysClockFreq+0x458>)
 8002542:	685b      	ldr	r3, [r3, #4]
 8002544:	099b      	lsrs	r3, r3, #6
 8002546:	2200      	movs	r2, #0
 8002548:	4618      	mov	r0, r3
 800254a:	4611      	mov	r1, r2
 800254c:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002550:	653b      	str	r3, [r7, #80]	@ 0x50
 8002552:	2300      	movs	r3, #0
 8002554:	657b      	str	r3, [r7, #84]	@ 0x54
 8002556:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	@ 0x50
 800255a:	4642      	mov	r2, r8
 800255c:	464b      	mov	r3, r9
 800255e:	f04f 0000 	mov.w	r0, #0
 8002562:	f04f 0100 	mov.w	r1, #0
 8002566:	0159      	lsls	r1, r3, #5
 8002568:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800256c:	0150      	lsls	r0, r2, #5
 800256e:	4602      	mov	r2, r0
 8002570:	460b      	mov	r3, r1
 8002572:	4641      	mov	r1, r8
 8002574:	1a51      	subs	r1, r2, r1
 8002576:	60b9      	str	r1, [r7, #8]
 8002578:	4649      	mov	r1, r9
 800257a:	eb63 0301 	sbc.w	r3, r3, r1
 800257e:	60fb      	str	r3, [r7, #12]
 8002580:	f04f 0200 	mov.w	r2, #0
 8002584:	f04f 0300 	mov.w	r3, #0
 8002588:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 800258c:	4659      	mov	r1, fp
 800258e:	018b      	lsls	r3, r1, #6
 8002590:	4651      	mov	r1, sl
 8002592:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002596:	4651      	mov	r1, sl
 8002598:	018a      	lsls	r2, r1, #6
 800259a:	4651      	mov	r1, sl
 800259c:	1a54      	subs	r4, r2, r1
 800259e:	4659      	mov	r1, fp
 80025a0:	eb63 0501 	sbc.w	r5, r3, r1
 80025a4:	f04f 0200 	mov.w	r2, #0
 80025a8:	f04f 0300 	mov.w	r3, #0
 80025ac:	00eb      	lsls	r3, r5, #3
 80025ae:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80025b2:	00e2      	lsls	r2, r4, #3
 80025b4:	4614      	mov	r4, r2
 80025b6:	461d      	mov	r5, r3
 80025b8:	4643      	mov	r3, r8
 80025ba:	18e3      	adds	r3, r4, r3
 80025bc:	603b      	str	r3, [r7, #0]
 80025be:	464b      	mov	r3, r9
 80025c0:	eb45 0303 	adc.w	r3, r5, r3
 80025c4:	607b      	str	r3, [r7, #4]
 80025c6:	f04f 0200 	mov.w	r2, #0
 80025ca:	f04f 0300 	mov.w	r3, #0
 80025ce:	e9d7 4500 	ldrd	r4, r5, [r7]
 80025d2:	4629      	mov	r1, r5
 80025d4:	028b      	lsls	r3, r1, #10
 80025d6:	4621      	mov	r1, r4
 80025d8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80025dc:	4621      	mov	r1, r4
 80025de:	028a      	lsls	r2, r1, #10
 80025e0:	4610      	mov	r0, r2
 80025e2:	4619      	mov	r1, r3
 80025e4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80025e8:	2200      	movs	r2, #0
 80025ea:	64bb      	str	r3, [r7, #72]	@ 0x48
 80025ec:	64fa      	str	r2, [r7, #76]	@ 0x4c
 80025ee:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80025f2:	f7fd fe07 	bl	8000204 <__aeabi_uldivmod>
 80025f6:	4602      	mov	r2, r0
 80025f8:	460b      	mov	r3, r1
 80025fa:	4613      	mov	r3, r2
 80025fc:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8002600:	4b0d      	ldr	r3, [pc, #52]	@ (8002638 <HAL_RCC_GetSysClockFreq+0x458>)
 8002602:	685b      	ldr	r3, [r3, #4]
 8002604:	0f1b      	lsrs	r3, r3, #28
 8002606:	f003 0307 	and.w	r3, r3, #7
 800260a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

      sysclockfreq = pllvco / pllr;
 800260e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8002612:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8002616:	fbb2 f3f3 	udiv	r3, r2, r3
 800261a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 800261e:	e003      	b.n	8002628 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002620:	4b06      	ldr	r3, [pc, #24]	@ (800263c <HAL_RCC_GetSysClockFreq+0x45c>)
 8002622:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8002626:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002628:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
}
 800262c:	4618      	mov	r0, r3
 800262e:	37b8      	adds	r7, #184	@ 0xb8
 8002630:	46bd      	mov	sp, r7
 8002632:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002636:	bf00      	nop
 8002638:	40023800 	.word	0x40023800
 800263c:	00f42400 	.word	0x00f42400

08002640 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002640:	b580      	push	{r7, lr}
 8002642:	b086      	sub	sp, #24
 8002644:	af00      	add	r7, sp, #0
 8002646:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	2b00      	cmp	r3, #0
 800264c:	d101      	bne.n	8002652 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800264e:	2301      	movs	r3, #1
 8002650:	e28d      	b.n	8002b6e <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	f003 0301 	and.w	r3, r3, #1
 800265a:	2b00      	cmp	r3, #0
 800265c:	f000 8083 	beq.w	8002766 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8002660:	4b94      	ldr	r3, [pc, #592]	@ (80028b4 <HAL_RCC_OscConfig+0x274>)
 8002662:	689b      	ldr	r3, [r3, #8]
 8002664:	f003 030c 	and.w	r3, r3, #12
 8002668:	2b04      	cmp	r3, #4
 800266a:	d019      	beq.n	80026a0 <HAL_RCC_OscConfig+0x60>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 800266c:	4b91      	ldr	r3, [pc, #580]	@ (80028b4 <HAL_RCC_OscConfig+0x274>)
 800266e:	689b      	ldr	r3, [r3, #8]
 8002670:	f003 030c 	and.w	r3, r3, #12
        || \
 8002674:	2b08      	cmp	r3, #8
 8002676:	d106      	bne.n	8002686 <HAL_RCC_OscConfig+0x46>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8002678:	4b8e      	ldr	r3, [pc, #568]	@ (80028b4 <HAL_RCC_OscConfig+0x274>)
 800267a:	685b      	ldr	r3, [r3, #4]
 800267c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002680:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002684:	d00c      	beq.n	80026a0 <HAL_RCC_OscConfig+0x60>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002686:	4b8b      	ldr	r3, [pc, #556]	@ (80028b4 <HAL_RCC_OscConfig+0x274>)
 8002688:	689b      	ldr	r3, [r3, #8]
 800268a:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 800268e:	2b0c      	cmp	r3, #12
 8002690:	d112      	bne.n	80026b8 <HAL_RCC_OscConfig+0x78>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002692:	4b88      	ldr	r3, [pc, #544]	@ (80028b4 <HAL_RCC_OscConfig+0x274>)
 8002694:	685b      	ldr	r3, [r3, #4]
 8002696:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800269a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800269e:	d10b      	bne.n	80026b8 <HAL_RCC_OscConfig+0x78>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80026a0:	4b84      	ldr	r3, [pc, #528]	@ (80028b4 <HAL_RCC_OscConfig+0x274>)
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	d05b      	beq.n	8002764 <HAL_RCC_OscConfig+0x124>
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	685b      	ldr	r3, [r3, #4]
 80026b0:	2b00      	cmp	r3, #0
 80026b2:	d157      	bne.n	8002764 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 80026b4:	2301      	movs	r3, #1
 80026b6:	e25a      	b.n	8002b6e <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	685b      	ldr	r3, [r3, #4]
 80026bc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80026c0:	d106      	bne.n	80026d0 <HAL_RCC_OscConfig+0x90>
 80026c2:	4b7c      	ldr	r3, [pc, #496]	@ (80028b4 <HAL_RCC_OscConfig+0x274>)
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	4a7b      	ldr	r2, [pc, #492]	@ (80028b4 <HAL_RCC_OscConfig+0x274>)
 80026c8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80026cc:	6013      	str	r3, [r2, #0]
 80026ce:	e01d      	b.n	800270c <HAL_RCC_OscConfig+0xcc>
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	685b      	ldr	r3, [r3, #4]
 80026d4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80026d8:	d10c      	bne.n	80026f4 <HAL_RCC_OscConfig+0xb4>
 80026da:	4b76      	ldr	r3, [pc, #472]	@ (80028b4 <HAL_RCC_OscConfig+0x274>)
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	4a75      	ldr	r2, [pc, #468]	@ (80028b4 <HAL_RCC_OscConfig+0x274>)
 80026e0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80026e4:	6013      	str	r3, [r2, #0]
 80026e6:	4b73      	ldr	r3, [pc, #460]	@ (80028b4 <HAL_RCC_OscConfig+0x274>)
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	4a72      	ldr	r2, [pc, #456]	@ (80028b4 <HAL_RCC_OscConfig+0x274>)
 80026ec:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80026f0:	6013      	str	r3, [r2, #0]
 80026f2:	e00b      	b.n	800270c <HAL_RCC_OscConfig+0xcc>
 80026f4:	4b6f      	ldr	r3, [pc, #444]	@ (80028b4 <HAL_RCC_OscConfig+0x274>)
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	4a6e      	ldr	r2, [pc, #440]	@ (80028b4 <HAL_RCC_OscConfig+0x274>)
 80026fa:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80026fe:	6013      	str	r3, [r2, #0]
 8002700:	4b6c      	ldr	r3, [pc, #432]	@ (80028b4 <HAL_RCC_OscConfig+0x274>)
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	4a6b      	ldr	r2, [pc, #428]	@ (80028b4 <HAL_RCC_OscConfig+0x274>)
 8002706:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800270a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	685b      	ldr	r3, [r3, #4]
 8002710:	2b00      	cmp	r3, #0
 8002712:	d013      	beq.n	800273c <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002714:	f7fe fb14 	bl	8000d40 <HAL_GetTick>
 8002718:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800271a:	e008      	b.n	800272e <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800271c:	f7fe fb10 	bl	8000d40 <HAL_GetTick>
 8002720:	4602      	mov	r2, r0
 8002722:	693b      	ldr	r3, [r7, #16]
 8002724:	1ad3      	subs	r3, r2, r3
 8002726:	2b64      	cmp	r3, #100	@ 0x64
 8002728:	d901      	bls.n	800272e <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 800272a:	2303      	movs	r3, #3
 800272c:	e21f      	b.n	8002b6e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800272e:	4b61      	ldr	r3, [pc, #388]	@ (80028b4 <HAL_RCC_OscConfig+0x274>)
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002736:	2b00      	cmp	r3, #0
 8002738:	d0f0      	beq.n	800271c <HAL_RCC_OscConfig+0xdc>
 800273a:	e014      	b.n	8002766 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800273c:	f7fe fb00 	bl	8000d40 <HAL_GetTick>
 8002740:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002742:	e008      	b.n	8002756 <HAL_RCC_OscConfig+0x116>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002744:	f7fe fafc 	bl	8000d40 <HAL_GetTick>
 8002748:	4602      	mov	r2, r0
 800274a:	693b      	ldr	r3, [r7, #16]
 800274c:	1ad3      	subs	r3, r2, r3
 800274e:	2b64      	cmp	r3, #100	@ 0x64
 8002750:	d901      	bls.n	8002756 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8002752:	2303      	movs	r3, #3
 8002754:	e20b      	b.n	8002b6e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002756:	4b57      	ldr	r3, [pc, #348]	@ (80028b4 <HAL_RCC_OscConfig+0x274>)
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800275e:	2b00      	cmp	r3, #0
 8002760:	d1f0      	bne.n	8002744 <HAL_RCC_OscConfig+0x104>
 8002762:	e000      	b.n	8002766 <HAL_RCC_OscConfig+0x126>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002764:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	f003 0302 	and.w	r3, r3, #2
 800276e:	2b00      	cmp	r3, #0
 8002770:	d06f      	beq.n	8002852 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8002772:	4b50      	ldr	r3, [pc, #320]	@ (80028b4 <HAL_RCC_OscConfig+0x274>)
 8002774:	689b      	ldr	r3, [r3, #8]
 8002776:	f003 030c 	and.w	r3, r3, #12
 800277a:	2b00      	cmp	r3, #0
 800277c:	d017      	beq.n	80027ae <HAL_RCC_OscConfig+0x16e>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 800277e:	4b4d      	ldr	r3, [pc, #308]	@ (80028b4 <HAL_RCC_OscConfig+0x274>)
 8002780:	689b      	ldr	r3, [r3, #8]
 8002782:	f003 030c 	and.w	r3, r3, #12
        || \
 8002786:	2b08      	cmp	r3, #8
 8002788:	d105      	bne.n	8002796 <HAL_RCC_OscConfig+0x156>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 800278a:	4b4a      	ldr	r3, [pc, #296]	@ (80028b4 <HAL_RCC_OscConfig+0x274>)
 800278c:	685b      	ldr	r3, [r3, #4]
 800278e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002792:	2b00      	cmp	r3, #0
 8002794:	d00b      	beq.n	80027ae <HAL_RCC_OscConfig+0x16e>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002796:	4b47      	ldr	r3, [pc, #284]	@ (80028b4 <HAL_RCC_OscConfig+0x274>)
 8002798:	689b      	ldr	r3, [r3, #8]
 800279a:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 800279e:	2b0c      	cmp	r3, #12
 80027a0:	d11c      	bne.n	80027dc <HAL_RCC_OscConfig+0x19c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80027a2:	4b44      	ldr	r3, [pc, #272]	@ (80028b4 <HAL_RCC_OscConfig+0x274>)
 80027a4:	685b      	ldr	r3, [r3, #4]
 80027a6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	d116      	bne.n	80027dc <HAL_RCC_OscConfig+0x19c>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80027ae:	4b41      	ldr	r3, [pc, #260]	@ (80028b4 <HAL_RCC_OscConfig+0x274>)
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	f003 0302 	and.w	r3, r3, #2
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	d005      	beq.n	80027c6 <HAL_RCC_OscConfig+0x186>
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	68db      	ldr	r3, [r3, #12]
 80027be:	2b01      	cmp	r3, #1
 80027c0:	d001      	beq.n	80027c6 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 80027c2:	2301      	movs	r3, #1
 80027c4:	e1d3      	b.n	8002b6e <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80027c6:	4b3b      	ldr	r3, [pc, #236]	@ (80028b4 <HAL_RCC_OscConfig+0x274>)
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	691b      	ldr	r3, [r3, #16]
 80027d2:	00db      	lsls	r3, r3, #3
 80027d4:	4937      	ldr	r1, [pc, #220]	@ (80028b4 <HAL_RCC_OscConfig+0x274>)
 80027d6:	4313      	orrs	r3, r2
 80027d8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80027da:	e03a      	b.n	8002852 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	68db      	ldr	r3, [r3, #12]
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	d020      	beq.n	8002826 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80027e4:	4b34      	ldr	r3, [pc, #208]	@ (80028b8 <HAL_RCC_OscConfig+0x278>)
 80027e6:	2201      	movs	r2, #1
 80027e8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027ea:	f7fe faa9 	bl	8000d40 <HAL_GetTick>
 80027ee:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80027f0:	e008      	b.n	8002804 <HAL_RCC_OscConfig+0x1c4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80027f2:	f7fe faa5 	bl	8000d40 <HAL_GetTick>
 80027f6:	4602      	mov	r2, r0
 80027f8:	693b      	ldr	r3, [r7, #16]
 80027fa:	1ad3      	subs	r3, r2, r3
 80027fc:	2b02      	cmp	r3, #2
 80027fe:	d901      	bls.n	8002804 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8002800:	2303      	movs	r3, #3
 8002802:	e1b4      	b.n	8002b6e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002804:	4b2b      	ldr	r3, [pc, #172]	@ (80028b4 <HAL_RCC_OscConfig+0x274>)
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	f003 0302 	and.w	r3, r3, #2
 800280c:	2b00      	cmp	r3, #0
 800280e:	d0f0      	beq.n	80027f2 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002810:	4b28      	ldr	r3, [pc, #160]	@ (80028b4 <HAL_RCC_OscConfig+0x274>)
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	691b      	ldr	r3, [r3, #16]
 800281c:	00db      	lsls	r3, r3, #3
 800281e:	4925      	ldr	r1, [pc, #148]	@ (80028b4 <HAL_RCC_OscConfig+0x274>)
 8002820:	4313      	orrs	r3, r2
 8002822:	600b      	str	r3, [r1, #0]
 8002824:	e015      	b.n	8002852 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002826:	4b24      	ldr	r3, [pc, #144]	@ (80028b8 <HAL_RCC_OscConfig+0x278>)
 8002828:	2200      	movs	r2, #0
 800282a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800282c:	f7fe fa88 	bl	8000d40 <HAL_GetTick>
 8002830:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002832:	e008      	b.n	8002846 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002834:	f7fe fa84 	bl	8000d40 <HAL_GetTick>
 8002838:	4602      	mov	r2, r0
 800283a:	693b      	ldr	r3, [r7, #16]
 800283c:	1ad3      	subs	r3, r2, r3
 800283e:	2b02      	cmp	r3, #2
 8002840:	d901      	bls.n	8002846 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8002842:	2303      	movs	r3, #3
 8002844:	e193      	b.n	8002b6e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002846:	4b1b      	ldr	r3, [pc, #108]	@ (80028b4 <HAL_RCC_OscConfig+0x274>)
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	f003 0302 	and.w	r3, r3, #2
 800284e:	2b00      	cmp	r3, #0
 8002850:	d1f0      	bne.n	8002834 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	f003 0308 	and.w	r3, r3, #8
 800285a:	2b00      	cmp	r3, #0
 800285c:	d036      	beq.n	80028cc <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	695b      	ldr	r3, [r3, #20]
 8002862:	2b00      	cmp	r3, #0
 8002864:	d016      	beq.n	8002894 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002866:	4b15      	ldr	r3, [pc, #84]	@ (80028bc <HAL_RCC_OscConfig+0x27c>)
 8002868:	2201      	movs	r2, #1
 800286a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800286c:	f7fe fa68 	bl	8000d40 <HAL_GetTick>
 8002870:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002872:	e008      	b.n	8002886 <HAL_RCC_OscConfig+0x246>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002874:	f7fe fa64 	bl	8000d40 <HAL_GetTick>
 8002878:	4602      	mov	r2, r0
 800287a:	693b      	ldr	r3, [r7, #16]
 800287c:	1ad3      	subs	r3, r2, r3
 800287e:	2b02      	cmp	r3, #2
 8002880:	d901      	bls.n	8002886 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8002882:	2303      	movs	r3, #3
 8002884:	e173      	b.n	8002b6e <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002886:	4b0b      	ldr	r3, [pc, #44]	@ (80028b4 <HAL_RCC_OscConfig+0x274>)
 8002888:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800288a:	f003 0302 	and.w	r3, r3, #2
 800288e:	2b00      	cmp	r3, #0
 8002890:	d0f0      	beq.n	8002874 <HAL_RCC_OscConfig+0x234>
 8002892:	e01b      	b.n	80028cc <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002894:	4b09      	ldr	r3, [pc, #36]	@ (80028bc <HAL_RCC_OscConfig+0x27c>)
 8002896:	2200      	movs	r2, #0
 8002898:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800289a:	f7fe fa51 	bl	8000d40 <HAL_GetTick>
 800289e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80028a0:	e00e      	b.n	80028c0 <HAL_RCC_OscConfig+0x280>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80028a2:	f7fe fa4d 	bl	8000d40 <HAL_GetTick>
 80028a6:	4602      	mov	r2, r0
 80028a8:	693b      	ldr	r3, [r7, #16]
 80028aa:	1ad3      	subs	r3, r2, r3
 80028ac:	2b02      	cmp	r3, #2
 80028ae:	d907      	bls.n	80028c0 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 80028b0:	2303      	movs	r3, #3
 80028b2:	e15c      	b.n	8002b6e <HAL_RCC_OscConfig+0x52e>
 80028b4:	40023800 	.word	0x40023800
 80028b8:	42470000 	.word	0x42470000
 80028bc:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80028c0:	4b8a      	ldr	r3, [pc, #552]	@ (8002aec <HAL_RCC_OscConfig+0x4ac>)
 80028c2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80028c4:	f003 0302 	and.w	r3, r3, #2
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	d1ea      	bne.n	80028a2 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	f003 0304 	and.w	r3, r3, #4
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	f000 8097 	beq.w	8002a08 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 80028da:	2300      	movs	r3, #0
 80028dc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80028de:	4b83      	ldr	r3, [pc, #524]	@ (8002aec <HAL_RCC_OscConfig+0x4ac>)
 80028e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028e2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	d10f      	bne.n	800290a <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80028ea:	2300      	movs	r3, #0
 80028ec:	60bb      	str	r3, [r7, #8]
 80028ee:	4b7f      	ldr	r3, [pc, #508]	@ (8002aec <HAL_RCC_OscConfig+0x4ac>)
 80028f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028f2:	4a7e      	ldr	r2, [pc, #504]	@ (8002aec <HAL_RCC_OscConfig+0x4ac>)
 80028f4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80028f8:	6413      	str	r3, [r2, #64]	@ 0x40
 80028fa:	4b7c      	ldr	r3, [pc, #496]	@ (8002aec <HAL_RCC_OscConfig+0x4ac>)
 80028fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028fe:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002902:	60bb      	str	r3, [r7, #8]
 8002904:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002906:	2301      	movs	r3, #1
 8002908:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800290a:	4b79      	ldr	r3, [pc, #484]	@ (8002af0 <HAL_RCC_OscConfig+0x4b0>)
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002912:	2b00      	cmp	r3, #0
 8002914:	d118      	bne.n	8002948 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002916:	4b76      	ldr	r3, [pc, #472]	@ (8002af0 <HAL_RCC_OscConfig+0x4b0>)
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	4a75      	ldr	r2, [pc, #468]	@ (8002af0 <HAL_RCC_OscConfig+0x4b0>)
 800291c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002920:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002922:	f7fe fa0d 	bl	8000d40 <HAL_GetTick>
 8002926:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002928:	e008      	b.n	800293c <HAL_RCC_OscConfig+0x2fc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800292a:	f7fe fa09 	bl	8000d40 <HAL_GetTick>
 800292e:	4602      	mov	r2, r0
 8002930:	693b      	ldr	r3, [r7, #16]
 8002932:	1ad3      	subs	r3, r2, r3
 8002934:	2b02      	cmp	r3, #2
 8002936:	d901      	bls.n	800293c <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8002938:	2303      	movs	r3, #3
 800293a:	e118      	b.n	8002b6e <HAL_RCC_OscConfig+0x52e>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800293c:	4b6c      	ldr	r3, [pc, #432]	@ (8002af0 <HAL_RCC_OscConfig+0x4b0>)
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002944:	2b00      	cmp	r3, #0
 8002946:	d0f0      	beq.n	800292a <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	689b      	ldr	r3, [r3, #8]
 800294c:	2b01      	cmp	r3, #1
 800294e:	d106      	bne.n	800295e <HAL_RCC_OscConfig+0x31e>
 8002950:	4b66      	ldr	r3, [pc, #408]	@ (8002aec <HAL_RCC_OscConfig+0x4ac>)
 8002952:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002954:	4a65      	ldr	r2, [pc, #404]	@ (8002aec <HAL_RCC_OscConfig+0x4ac>)
 8002956:	f043 0301 	orr.w	r3, r3, #1
 800295a:	6713      	str	r3, [r2, #112]	@ 0x70
 800295c:	e01c      	b.n	8002998 <HAL_RCC_OscConfig+0x358>
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	689b      	ldr	r3, [r3, #8]
 8002962:	2b05      	cmp	r3, #5
 8002964:	d10c      	bne.n	8002980 <HAL_RCC_OscConfig+0x340>
 8002966:	4b61      	ldr	r3, [pc, #388]	@ (8002aec <HAL_RCC_OscConfig+0x4ac>)
 8002968:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800296a:	4a60      	ldr	r2, [pc, #384]	@ (8002aec <HAL_RCC_OscConfig+0x4ac>)
 800296c:	f043 0304 	orr.w	r3, r3, #4
 8002970:	6713      	str	r3, [r2, #112]	@ 0x70
 8002972:	4b5e      	ldr	r3, [pc, #376]	@ (8002aec <HAL_RCC_OscConfig+0x4ac>)
 8002974:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002976:	4a5d      	ldr	r2, [pc, #372]	@ (8002aec <HAL_RCC_OscConfig+0x4ac>)
 8002978:	f043 0301 	orr.w	r3, r3, #1
 800297c:	6713      	str	r3, [r2, #112]	@ 0x70
 800297e:	e00b      	b.n	8002998 <HAL_RCC_OscConfig+0x358>
 8002980:	4b5a      	ldr	r3, [pc, #360]	@ (8002aec <HAL_RCC_OscConfig+0x4ac>)
 8002982:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002984:	4a59      	ldr	r2, [pc, #356]	@ (8002aec <HAL_RCC_OscConfig+0x4ac>)
 8002986:	f023 0301 	bic.w	r3, r3, #1
 800298a:	6713      	str	r3, [r2, #112]	@ 0x70
 800298c:	4b57      	ldr	r3, [pc, #348]	@ (8002aec <HAL_RCC_OscConfig+0x4ac>)
 800298e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002990:	4a56      	ldr	r2, [pc, #344]	@ (8002aec <HAL_RCC_OscConfig+0x4ac>)
 8002992:	f023 0304 	bic.w	r3, r3, #4
 8002996:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	689b      	ldr	r3, [r3, #8]
 800299c:	2b00      	cmp	r3, #0
 800299e:	d015      	beq.n	80029cc <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80029a0:	f7fe f9ce 	bl	8000d40 <HAL_GetTick>
 80029a4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80029a6:	e00a      	b.n	80029be <HAL_RCC_OscConfig+0x37e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80029a8:	f7fe f9ca 	bl	8000d40 <HAL_GetTick>
 80029ac:	4602      	mov	r2, r0
 80029ae:	693b      	ldr	r3, [r7, #16]
 80029b0:	1ad3      	subs	r3, r2, r3
 80029b2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80029b6:	4293      	cmp	r3, r2
 80029b8:	d901      	bls.n	80029be <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 80029ba:	2303      	movs	r3, #3
 80029bc:	e0d7      	b.n	8002b6e <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80029be:	4b4b      	ldr	r3, [pc, #300]	@ (8002aec <HAL_RCC_OscConfig+0x4ac>)
 80029c0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80029c2:	f003 0302 	and.w	r3, r3, #2
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	d0ee      	beq.n	80029a8 <HAL_RCC_OscConfig+0x368>
 80029ca:	e014      	b.n	80029f6 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80029cc:	f7fe f9b8 	bl	8000d40 <HAL_GetTick>
 80029d0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80029d2:	e00a      	b.n	80029ea <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80029d4:	f7fe f9b4 	bl	8000d40 <HAL_GetTick>
 80029d8:	4602      	mov	r2, r0
 80029da:	693b      	ldr	r3, [r7, #16]
 80029dc:	1ad3      	subs	r3, r2, r3
 80029de:	f241 3288 	movw	r2, #5000	@ 0x1388
 80029e2:	4293      	cmp	r3, r2
 80029e4:	d901      	bls.n	80029ea <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 80029e6:	2303      	movs	r3, #3
 80029e8:	e0c1      	b.n	8002b6e <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80029ea:	4b40      	ldr	r3, [pc, #256]	@ (8002aec <HAL_RCC_OscConfig+0x4ac>)
 80029ec:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80029ee:	f003 0302 	and.w	r3, r3, #2
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	d1ee      	bne.n	80029d4 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80029f6:	7dfb      	ldrb	r3, [r7, #23]
 80029f8:	2b01      	cmp	r3, #1
 80029fa:	d105      	bne.n	8002a08 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80029fc:	4b3b      	ldr	r3, [pc, #236]	@ (8002aec <HAL_RCC_OscConfig+0x4ac>)
 80029fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a00:	4a3a      	ldr	r2, [pc, #232]	@ (8002aec <HAL_RCC_OscConfig+0x4ac>)
 8002a02:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002a06:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	699b      	ldr	r3, [r3, #24]
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	f000 80ad 	beq.w	8002b6c <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002a12:	4b36      	ldr	r3, [pc, #216]	@ (8002aec <HAL_RCC_OscConfig+0x4ac>)
 8002a14:	689b      	ldr	r3, [r3, #8]
 8002a16:	f003 030c 	and.w	r3, r3, #12
 8002a1a:	2b08      	cmp	r3, #8
 8002a1c:	d060      	beq.n	8002ae0 <HAL_RCC_OscConfig+0x4a0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	699b      	ldr	r3, [r3, #24]
 8002a22:	2b02      	cmp	r3, #2
 8002a24:	d145      	bne.n	8002ab2 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002a26:	4b33      	ldr	r3, [pc, #204]	@ (8002af4 <HAL_RCC_OscConfig+0x4b4>)
 8002a28:	2200      	movs	r2, #0
 8002a2a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a2c:	f7fe f988 	bl	8000d40 <HAL_GetTick>
 8002a30:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002a32:	e008      	b.n	8002a46 <HAL_RCC_OscConfig+0x406>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002a34:	f7fe f984 	bl	8000d40 <HAL_GetTick>
 8002a38:	4602      	mov	r2, r0
 8002a3a:	693b      	ldr	r3, [r7, #16]
 8002a3c:	1ad3      	subs	r3, r2, r3
 8002a3e:	2b02      	cmp	r3, #2
 8002a40:	d901      	bls.n	8002a46 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8002a42:	2303      	movs	r3, #3
 8002a44:	e093      	b.n	8002b6e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002a46:	4b29      	ldr	r3, [pc, #164]	@ (8002aec <HAL_RCC_OscConfig+0x4ac>)
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	d1f0      	bne.n	8002a34 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	69da      	ldr	r2, [r3, #28]
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	6a1b      	ldr	r3, [r3, #32]
 8002a5a:	431a      	orrs	r2, r3
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a60:	019b      	lsls	r3, r3, #6
 8002a62:	431a      	orrs	r2, r3
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002a68:	085b      	lsrs	r3, r3, #1
 8002a6a:	3b01      	subs	r3, #1
 8002a6c:	041b      	lsls	r3, r3, #16
 8002a6e:	431a      	orrs	r2, r3
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002a74:	061b      	lsls	r3, r3, #24
 8002a76:	431a      	orrs	r2, r3
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a7c:	071b      	lsls	r3, r3, #28
 8002a7e:	491b      	ldr	r1, [pc, #108]	@ (8002aec <HAL_RCC_OscConfig+0x4ac>)
 8002a80:	4313      	orrs	r3, r2
 8002a82:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002a84:	4b1b      	ldr	r3, [pc, #108]	@ (8002af4 <HAL_RCC_OscConfig+0x4b4>)
 8002a86:	2201      	movs	r2, #1
 8002a88:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a8a:	f7fe f959 	bl	8000d40 <HAL_GetTick>
 8002a8e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002a90:	e008      	b.n	8002aa4 <HAL_RCC_OscConfig+0x464>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002a92:	f7fe f955 	bl	8000d40 <HAL_GetTick>
 8002a96:	4602      	mov	r2, r0
 8002a98:	693b      	ldr	r3, [r7, #16]
 8002a9a:	1ad3      	subs	r3, r2, r3
 8002a9c:	2b02      	cmp	r3, #2
 8002a9e:	d901      	bls.n	8002aa4 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8002aa0:	2303      	movs	r3, #3
 8002aa2:	e064      	b.n	8002b6e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002aa4:	4b11      	ldr	r3, [pc, #68]	@ (8002aec <HAL_RCC_OscConfig+0x4ac>)
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002aac:	2b00      	cmp	r3, #0
 8002aae:	d0f0      	beq.n	8002a92 <HAL_RCC_OscConfig+0x452>
 8002ab0:	e05c      	b.n	8002b6c <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002ab2:	4b10      	ldr	r3, [pc, #64]	@ (8002af4 <HAL_RCC_OscConfig+0x4b4>)
 8002ab4:	2200      	movs	r2, #0
 8002ab6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ab8:	f7fe f942 	bl	8000d40 <HAL_GetTick>
 8002abc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002abe:	e008      	b.n	8002ad2 <HAL_RCC_OscConfig+0x492>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002ac0:	f7fe f93e 	bl	8000d40 <HAL_GetTick>
 8002ac4:	4602      	mov	r2, r0
 8002ac6:	693b      	ldr	r3, [r7, #16]
 8002ac8:	1ad3      	subs	r3, r2, r3
 8002aca:	2b02      	cmp	r3, #2
 8002acc:	d901      	bls.n	8002ad2 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8002ace:	2303      	movs	r3, #3
 8002ad0:	e04d      	b.n	8002b6e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002ad2:	4b06      	ldr	r3, [pc, #24]	@ (8002aec <HAL_RCC_OscConfig+0x4ac>)
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	d1f0      	bne.n	8002ac0 <HAL_RCC_OscConfig+0x480>
 8002ade:	e045      	b.n	8002b6c <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	699b      	ldr	r3, [r3, #24]
 8002ae4:	2b01      	cmp	r3, #1
 8002ae6:	d107      	bne.n	8002af8 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8002ae8:	2301      	movs	r3, #1
 8002aea:	e040      	b.n	8002b6e <HAL_RCC_OscConfig+0x52e>
 8002aec:	40023800 	.word	0x40023800
 8002af0:	40007000 	.word	0x40007000
 8002af4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002af8:	4b1f      	ldr	r3, [pc, #124]	@ (8002b78 <HAL_RCC_OscConfig+0x538>)
 8002afa:	685b      	ldr	r3, [r3, #4]
 8002afc:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	699b      	ldr	r3, [r3, #24]
 8002b02:	2b01      	cmp	r3, #1
 8002b04:	d030      	beq.n	8002b68 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002b06:	68fb      	ldr	r3, [r7, #12]
 8002b08:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002b10:	429a      	cmp	r2, r3
 8002b12:	d129      	bne.n	8002b68 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002b1e:	429a      	cmp	r2, r3
 8002b20:	d122      	bne.n	8002b68 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002b22:	68fa      	ldr	r2, [r7, #12]
 8002b24:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8002b28:	4013      	ands	r3, r2
 8002b2a:	687a      	ldr	r2, [r7, #4]
 8002b2c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8002b2e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002b30:	4293      	cmp	r3, r2
 8002b32:	d119      	bne.n	8002b68 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002b34:	68fb      	ldr	r3, [r7, #12]
 8002b36:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002b3e:	085b      	lsrs	r3, r3, #1
 8002b40:	3b01      	subs	r3, #1
 8002b42:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002b44:	429a      	cmp	r2, r3
 8002b46:	d10f      	bne.n	8002b68 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002b52:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002b54:	429a      	cmp	r2, r3
 8002b56:	d107      	bne.n	8002b68 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8002b58:	68fb      	ldr	r3, [r7, #12]
 8002b5a:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b62:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002b64:	429a      	cmp	r2, r3
 8002b66:	d001      	beq.n	8002b6c <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8002b68:	2301      	movs	r3, #1
 8002b6a:	e000      	b.n	8002b6e <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8002b6c:	2300      	movs	r3, #0
}
 8002b6e:	4618      	mov	r0, r3
 8002b70:	3718      	adds	r7, #24
 8002b72:	46bd      	mov	sp, r7
 8002b74:	bd80      	pop	{r7, pc}
 8002b76:	bf00      	nop
 8002b78:	40023800 	.word	0x40023800

08002b7c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002b7c:	b580      	push	{r7, lr}
 8002b7e:	b082      	sub	sp, #8
 8002b80:	af00      	add	r7, sp, #0
 8002b82:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	d101      	bne.n	8002b8e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002b8a:	2301      	movs	r3, #1
 8002b8c:	e041      	b.n	8002c12 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002b94:	b2db      	uxtb	r3, r3
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	d106      	bne.n	8002ba8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	2200      	movs	r2, #0
 8002b9e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002ba2:	6878      	ldr	r0, [r7, #4]
 8002ba4:	f7fd ff22 	bl	80009ec <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	2202      	movs	r2, #2
 8002bac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	681a      	ldr	r2, [r3, #0]
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	3304      	adds	r3, #4
 8002bb8:	4619      	mov	r1, r3
 8002bba:	4610      	mov	r0, r2
 8002bbc:	f000 f8f4 	bl	8002da8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	2201      	movs	r2, #1
 8002bc4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	2201      	movs	r2, #1
 8002bcc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	2201      	movs	r2, #1
 8002bd4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	2201      	movs	r2, #1
 8002bdc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	2201      	movs	r2, #1
 8002be4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	2201      	movs	r2, #1
 8002bec:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	2201      	movs	r2, #1
 8002bf4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	2201      	movs	r2, #1
 8002bfc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	2201      	movs	r2, #1
 8002c04:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	2201      	movs	r2, #1
 8002c0c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002c10:	2300      	movs	r3, #0
}
 8002c12:	4618      	mov	r0, r3
 8002c14:	3708      	adds	r7, #8
 8002c16:	46bd      	mov	sp, r7
 8002c18:	bd80      	pop	{r7, pc}

08002c1a <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002c1a:	b580      	push	{r7, lr}
 8002c1c:	b084      	sub	sp, #16
 8002c1e:	af00      	add	r7, sp, #0
 8002c20:	6078      	str	r0, [r7, #4]
 8002c22:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002c24:	2300      	movs	r3, #0
 8002c26:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002c2e:	2b01      	cmp	r3, #1
 8002c30:	d101      	bne.n	8002c36 <HAL_TIM_ConfigClockSource+0x1c>
 8002c32:	2302      	movs	r3, #2
 8002c34:	e0b4      	b.n	8002da0 <HAL_TIM_ConfigClockSource+0x186>
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	2201      	movs	r2, #1
 8002c3a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	2202      	movs	r2, #2
 8002c42:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	689b      	ldr	r3, [r3, #8]
 8002c4c:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002c4e:	68bb      	ldr	r3, [r7, #8]
 8002c50:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8002c54:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002c56:	68bb      	ldr	r3, [r7, #8]
 8002c58:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8002c5c:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	68ba      	ldr	r2, [r7, #8]
 8002c64:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002c66:	683b      	ldr	r3, [r7, #0]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002c6e:	d03e      	beq.n	8002cee <HAL_TIM_ConfigClockSource+0xd4>
 8002c70:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002c74:	f200 8087 	bhi.w	8002d86 <HAL_TIM_ConfigClockSource+0x16c>
 8002c78:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002c7c:	f000 8086 	beq.w	8002d8c <HAL_TIM_ConfigClockSource+0x172>
 8002c80:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002c84:	d87f      	bhi.n	8002d86 <HAL_TIM_ConfigClockSource+0x16c>
 8002c86:	2b70      	cmp	r3, #112	@ 0x70
 8002c88:	d01a      	beq.n	8002cc0 <HAL_TIM_ConfigClockSource+0xa6>
 8002c8a:	2b70      	cmp	r3, #112	@ 0x70
 8002c8c:	d87b      	bhi.n	8002d86 <HAL_TIM_ConfigClockSource+0x16c>
 8002c8e:	2b60      	cmp	r3, #96	@ 0x60
 8002c90:	d050      	beq.n	8002d34 <HAL_TIM_ConfigClockSource+0x11a>
 8002c92:	2b60      	cmp	r3, #96	@ 0x60
 8002c94:	d877      	bhi.n	8002d86 <HAL_TIM_ConfigClockSource+0x16c>
 8002c96:	2b50      	cmp	r3, #80	@ 0x50
 8002c98:	d03c      	beq.n	8002d14 <HAL_TIM_ConfigClockSource+0xfa>
 8002c9a:	2b50      	cmp	r3, #80	@ 0x50
 8002c9c:	d873      	bhi.n	8002d86 <HAL_TIM_ConfigClockSource+0x16c>
 8002c9e:	2b40      	cmp	r3, #64	@ 0x40
 8002ca0:	d058      	beq.n	8002d54 <HAL_TIM_ConfigClockSource+0x13a>
 8002ca2:	2b40      	cmp	r3, #64	@ 0x40
 8002ca4:	d86f      	bhi.n	8002d86 <HAL_TIM_ConfigClockSource+0x16c>
 8002ca6:	2b30      	cmp	r3, #48	@ 0x30
 8002ca8:	d064      	beq.n	8002d74 <HAL_TIM_ConfigClockSource+0x15a>
 8002caa:	2b30      	cmp	r3, #48	@ 0x30
 8002cac:	d86b      	bhi.n	8002d86 <HAL_TIM_ConfigClockSource+0x16c>
 8002cae:	2b20      	cmp	r3, #32
 8002cb0:	d060      	beq.n	8002d74 <HAL_TIM_ConfigClockSource+0x15a>
 8002cb2:	2b20      	cmp	r3, #32
 8002cb4:	d867      	bhi.n	8002d86 <HAL_TIM_ConfigClockSource+0x16c>
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	d05c      	beq.n	8002d74 <HAL_TIM_ConfigClockSource+0x15a>
 8002cba:	2b10      	cmp	r3, #16
 8002cbc:	d05a      	beq.n	8002d74 <HAL_TIM_ConfigClockSource+0x15a>
 8002cbe:	e062      	b.n	8002d86 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002cc4:	683b      	ldr	r3, [r7, #0]
 8002cc6:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002cc8:	683b      	ldr	r3, [r7, #0]
 8002cca:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002ccc:	683b      	ldr	r3, [r7, #0]
 8002cce:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002cd0:	f000 f98a 	bl	8002fe8 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	689b      	ldr	r3, [r3, #8]
 8002cda:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002cdc:	68bb      	ldr	r3, [r7, #8]
 8002cde:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8002ce2:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	68ba      	ldr	r2, [r7, #8]
 8002cea:	609a      	str	r2, [r3, #8]
      break;
 8002cec:	e04f      	b.n	8002d8e <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002cf2:	683b      	ldr	r3, [r7, #0]
 8002cf4:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002cf6:	683b      	ldr	r3, [r7, #0]
 8002cf8:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002cfa:	683b      	ldr	r3, [r7, #0]
 8002cfc:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002cfe:	f000 f973 	bl	8002fe8 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	689a      	ldr	r2, [r3, #8]
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8002d10:	609a      	str	r2, [r3, #8]
      break;
 8002d12:	e03c      	b.n	8002d8e <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002d18:	683b      	ldr	r3, [r7, #0]
 8002d1a:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002d1c:	683b      	ldr	r3, [r7, #0]
 8002d1e:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002d20:	461a      	mov	r2, r3
 8002d22:	f000 f8e7 	bl	8002ef4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	2150      	movs	r1, #80	@ 0x50
 8002d2c:	4618      	mov	r0, r3
 8002d2e:	f000 f940 	bl	8002fb2 <TIM_ITRx_SetConfig>
      break;
 8002d32:	e02c      	b.n	8002d8e <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002d38:	683b      	ldr	r3, [r7, #0]
 8002d3a:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002d3c:	683b      	ldr	r3, [r7, #0]
 8002d3e:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002d40:	461a      	mov	r2, r3
 8002d42:	f000 f906 	bl	8002f52 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	2160      	movs	r1, #96	@ 0x60
 8002d4c:	4618      	mov	r0, r3
 8002d4e:	f000 f930 	bl	8002fb2 <TIM_ITRx_SetConfig>
      break;
 8002d52:	e01c      	b.n	8002d8e <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002d58:	683b      	ldr	r3, [r7, #0]
 8002d5a:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002d5c:	683b      	ldr	r3, [r7, #0]
 8002d5e:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002d60:	461a      	mov	r2, r3
 8002d62:	f000 f8c7 	bl	8002ef4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	2140      	movs	r1, #64	@ 0x40
 8002d6c:	4618      	mov	r0, r3
 8002d6e:	f000 f920 	bl	8002fb2 <TIM_ITRx_SetConfig>
      break;
 8002d72:	e00c      	b.n	8002d8e <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	681a      	ldr	r2, [r3, #0]
 8002d78:	683b      	ldr	r3, [r7, #0]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	4619      	mov	r1, r3
 8002d7e:	4610      	mov	r0, r2
 8002d80:	f000 f917 	bl	8002fb2 <TIM_ITRx_SetConfig>
      break;
 8002d84:	e003      	b.n	8002d8e <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8002d86:	2301      	movs	r3, #1
 8002d88:	73fb      	strb	r3, [r7, #15]
      break;
 8002d8a:	e000      	b.n	8002d8e <HAL_TIM_ConfigClockSource+0x174>
      break;
 8002d8c:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	2201      	movs	r2, #1
 8002d92:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	2200      	movs	r2, #0
 8002d9a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8002d9e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002da0:	4618      	mov	r0, r3
 8002da2:	3710      	adds	r7, #16
 8002da4:	46bd      	mov	sp, r7
 8002da6:	bd80      	pop	{r7, pc}

08002da8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002da8:	b480      	push	{r7}
 8002daa:	b085      	sub	sp, #20
 8002dac:	af00      	add	r7, sp, #0
 8002dae:	6078      	str	r0, [r7, #4]
 8002db0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	4a43      	ldr	r2, [pc, #268]	@ (8002ec8 <TIM_Base_SetConfig+0x120>)
 8002dbc:	4293      	cmp	r3, r2
 8002dbe:	d013      	beq.n	8002de8 <TIM_Base_SetConfig+0x40>
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002dc6:	d00f      	beq.n	8002de8 <TIM_Base_SetConfig+0x40>
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	4a40      	ldr	r2, [pc, #256]	@ (8002ecc <TIM_Base_SetConfig+0x124>)
 8002dcc:	4293      	cmp	r3, r2
 8002dce:	d00b      	beq.n	8002de8 <TIM_Base_SetConfig+0x40>
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	4a3f      	ldr	r2, [pc, #252]	@ (8002ed0 <TIM_Base_SetConfig+0x128>)
 8002dd4:	4293      	cmp	r3, r2
 8002dd6:	d007      	beq.n	8002de8 <TIM_Base_SetConfig+0x40>
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	4a3e      	ldr	r2, [pc, #248]	@ (8002ed4 <TIM_Base_SetConfig+0x12c>)
 8002ddc:	4293      	cmp	r3, r2
 8002dde:	d003      	beq.n	8002de8 <TIM_Base_SetConfig+0x40>
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	4a3d      	ldr	r2, [pc, #244]	@ (8002ed8 <TIM_Base_SetConfig+0x130>)
 8002de4:	4293      	cmp	r3, r2
 8002de6:	d108      	bne.n	8002dfa <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002dee:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002df0:	683b      	ldr	r3, [r7, #0]
 8002df2:	685b      	ldr	r3, [r3, #4]
 8002df4:	68fa      	ldr	r2, [r7, #12]
 8002df6:	4313      	orrs	r3, r2
 8002df8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	4a32      	ldr	r2, [pc, #200]	@ (8002ec8 <TIM_Base_SetConfig+0x120>)
 8002dfe:	4293      	cmp	r3, r2
 8002e00:	d02b      	beq.n	8002e5a <TIM_Base_SetConfig+0xb2>
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002e08:	d027      	beq.n	8002e5a <TIM_Base_SetConfig+0xb2>
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	4a2f      	ldr	r2, [pc, #188]	@ (8002ecc <TIM_Base_SetConfig+0x124>)
 8002e0e:	4293      	cmp	r3, r2
 8002e10:	d023      	beq.n	8002e5a <TIM_Base_SetConfig+0xb2>
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	4a2e      	ldr	r2, [pc, #184]	@ (8002ed0 <TIM_Base_SetConfig+0x128>)
 8002e16:	4293      	cmp	r3, r2
 8002e18:	d01f      	beq.n	8002e5a <TIM_Base_SetConfig+0xb2>
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	4a2d      	ldr	r2, [pc, #180]	@ (8002ed4 <TIM_Base_SetConfig+0x12c>)
 8002e1e:	4293      	cmp	r3, r2
 8002e20:	d01b      	beq.n	8002e5a <TIM_Base_SetConfig+0xb2>
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	4a2c      	ldr	r2, [pc, #176]	@ (8002ed8 <TIM_Base_SetConfig+0x130>)
 8002e26:	4293      	cmp	r3, r2
 8002e28:	d017      	beq.n	8002e5a <TIM_Base_SetConfig+0xb2>
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	4a2b      	ldr	r2, [pc, #172]	@ (8002edc <TIM_Base_SetConfig+0x134>)
 8002e2e:	4293      	cmp	r3, r2
 8002e30:	d013      	beq.n	8002e5a <TIM_Base_SetConfig+0xb2>
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	4a2a      	ldr	r2, [pc, #168]	@ (8002ee0 <TIM_Base_SetConfig+0x138>)
 8002e36:	4293      	cmp	r3, r2
 8002e38:	d00f      	beq.n	8002e5a <TIM_Base_SetConfig+0xb2>
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	4a29      	ldr	r2, [pc, #164]	@ (8002ee4 <TIM_Base_SetConfig+0x13c>)
 8002e3e:	4293      	cmp	r3, r2
 8002e40:	d00b      	beq.n	8002e5a <TIM_Base_SetConfig+0xb2>
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	4a28      	ldr	r2, [pc, #160]	@ (8002ee8 <TIM_Base_SetConfig+0x140>)
 8002e46:	4293      	cmp	r3, r2
 8002e48:	d007      	beq.n	8002e5a <TIM_Base_SetConfig+0xb2>
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	4a27      	ldr	r2, [pc, #156]	@ (8002eec <TIM_Base_SetConfig+0x144>)
 8002e4e:	4293      	cmp	r3, r2
 8002e50:	d003      	beq.n	8002e5a <TIM_Base_SetConfig+0xb2>
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	4a26      	ldr	r2, [pc, #152]	@ (8002ef0 <TIM_Base_SetConfig+0x148>)
 8002e56:	4293      	cmp	r3, r2
 8002e58:	d108      	bne.n	8002e6c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002e5a:	68fb      	ldr	r3, [r7, #12]
 8002e5c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002e60:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002e62:	683b      	ldr	r3, [r7, #0]
 8002e64:	68db      	ldr	r3, [r3, #12]
 8002e66:	68fa      	ldr	r2, [r7, #12]
 8002e68:	4313      	orrs	r3, r2
 8002e6a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8002e72:	683b      	ldr	r3, [r7, #0]
 8002e74:	695b      	ldr	r3, [r3, #20]
 8002e76:	4313      	orrs	r3, r2
 8002e78:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002e7a:	683b      	ldr	r3, [r7, #0]
 8002e7c:	689a      	ldr	r2, [r3, #8]
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002e82:	683b      	ldr	r3, [r7, #0]
 8002e84:	681a      	ldr	r2, [r3, #0]
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	4a0e      	ldr	r2, [pc, #56]	@ (8002ec8 <TIM_Base_SetConfig+0x120>)
 8002e8e:	4293      	cmp	r3, r2
 8002e90:	d003      	beq.n	8002e9a <TIM_Base_SetConfig+0xf2>
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	4a10      	ldr	r2, [pc, #64]	@ (8002ed8 <TIM_Base_SetConfig+0x130>)
 8002e96:	4293      	cmp	r3, r2
 8002e98:	d103      	bne.n	8002ea2 <TIM_Base_SetConfig+0xfa>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002e9a:	683b      	ldr	r3, [r7, #0]
 8002e9c:	691a      	ldr	r2, [r3, #16]
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	f043 0204 	orr.w	r2, r3, #4
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	2201      	movs	r2, #1
 8002eb2:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	68fa      	ldr	r2, [r7, #12]
 8002eb8:	601a      	str	r2, [r3, #0]
}
 8002eba:	bf00      	nop
 8002ebc:	3714      	adds	r7, #20
 8002ebe:	46bd      	mov	sp, r7
 8002ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ec4:	4770      	bx	lr
 8002ec6:	bf00      	nop
 8002ec8:	40010000 	.word	0x40010000
 8002ecc:	40000400 	.word	0x40000400
 8002ed0:	40000800 	.word	0x40000800
 8002ed4:	40000c00 	.word	0x40000c00
 8002ed8:	40010400 	.word	0x40010400
 8002edc:	40014000 	.word	0x40014000
 8002ee0:	40014400 	.word	0x40014400
 8002ee4:	40014800 	.word	0x40014800
 8002ee8:	40001800 	.word	0x40001800
 8002eec:	40001c00 	.word	0x40001c00
 8002ef0:	40002000 	.word	0x40002000

08002ef4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002ef4:	b480      	push	{r7}
 8002ef6:	b087      	sub	sp, #28
 8002ef8:	af00      	add	r7, sp, #0
 8002efa:	60f8      	str	r0, [r7, #12]
 8002efc:	60b9      	str	r1, [r7, #8]
 8002efe:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	6a1b      	ldr	r3, [r3, #32]
 8002f04:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002f06:	68fb      	ldr	r3, [r7, #12]
 8002f08:	6a1b      	ldr	r3, [r3, #32]
 8002f0a:	f023 0201 	bic.w	r2, r3, #1
 8002f0e:	68fb      	ldr	r3, [r7, #12]
 8002f10:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002f12:	68fb      	ldr	r3, [r7, #12]
 8002f14:	699b      	ldr	r3, [r3, #24]
 8002f16:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002f18:	693b      	ldr	r3, [r7, #16]
 8002f1a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8002f1e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	011b      	lsls	r3, r3, #4
 8002f24:	693a      	ldr	r2, [r7, #16]
 8002f26:	4313      	orrs	r3, r2
 8002f28:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002f2a:	697b      	ldr	r3, [r7, #20]
 8002f2c:	f023 030a 	bic.w	r3, r3, #10
 8002f30:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002f32:	697a      	ldr	r2, [r7, #20]
 8002f34:	68bb      	ldr	r3, [r7, #8]
 8002f36:	4313      	orrs	r3, r2
 8002f38:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002f3a:	68fb      	ldr	r3, [r7, #12]
 8002f3c:	693a      	ldr	r2, [r7, #16]
 8002f3e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002f40:	68fb      	ldr	r3, [r7, #12]
 8002f42:	697a      	ldr	r2, [r7, #20]
 8002f44:	621a      	str	r2, [r3, #32]
}
 8002f46:	bf00      	nop
 8002f48:	371c      	adds	r7, #28
 8002f4a:	46bd      	mov	sp, r7
 8002f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f50:	4770      	bx	lr

08002f52 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002f52:	b480      	push	{r7}
 8002f54:	b087      	sub	sp, #28
 8002f56:	af00      	add	r7, sp, #0
 8002f58:	60f8      	str	r0, [r7, #12]
 8002f5a:	60b9      	str	r1, [r7, #8]
 8002f5c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8002f5e:	68fb      	ldr	r3, [r7, #12]
 8002f60:	6a1b      	ldr	r3, [r3, #32]
 8002f62:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002f64:	68fb      	ldr	r3, [r7, #12]
 8002f66:	6a1b      	ldr	r3, [r3, #32]
 8002f68:	f023 0210 	bic.w	r2, r3, #16
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002f70:	68fb      	ldr	r3, [r7, #12]
 8002f72:	699b      	ldr	r3, [r3, #24]
 8002f74:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002f76:	693b      	ldr	r3, [r7, #16]
 8002f78:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8002f7c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	031b      	lsls	r3, r3, #12
 8002f82:	693a      	ldr	r2, [r7, #16]
 8002f84:	4313      	orrs	r3, r2
 8002f86:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002f88:	697b      	ldr	r3, [r7, #20]
 8002f8a:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8002f8e:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002f90:	68bb      	ldr	r3, [r7, #8]
 8002f92:	011b      	lsls	r3, r3, #4
 8002f94:	697a      	ldr	r2, [r7, #20]
 8002f96:	4313      	orrs	r3, r2
 8002f98:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002f9a:	68fb      	ldr	r3, [r7, #12]
 8002f9c:	693a      	ldr	r2, [r7, #16]
 8002f9e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	697a      	ldr	r2, [r7, #20]
 8002fa4:	621a      	str	r2, [r3, #32]
}
 8002fa6:	bf00      	nop
 8002fa8:	371c      	adds	r7, #28
 8002faa:	46bd      	mov	sp, r7
 8002fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fb0:	4770      	bx	lr

08002fb2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002fb2:	b480      	push	{r7}
 8002fb4:	b085      	sub	sp, #20
 8002fb6:	af00      	add	r7, sp, #0
 8002fb8:	6078      	str	r0, [r7, #4]
 8002fba:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	689b      	ldr	r3, [r3, #8]
 8002fc0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002fc2:	68fb      	ldr	r3, [r7, #12]
 8002fc4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002fc8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002fca:	683a      	ldr	r2, [r7, #0]
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	4313      	orrs	r3, r2
 8002fd0:	f043 0307 	orr.w	r3, r3, #7
 8002fd4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	68fa      	ldr	r2, [r7, #12]
 8002fda:	609a      	str	r2, [r3, #8]
}
 8002fdc:	bf00      	nop
 8002fde:	3714      	adds	r7, #20
 8002fe0:	46bd      	mov	sp, r7
 8002fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fe6:	4770      	bx	lr

08002fe8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002fe8:	b480      	push	{r7}
 8002fea:	b087      	sub	sp, #28
 8002fec:	af00      	add	r7, sp, #0
 8002fee:	60f8      	str	r0, [r7, #12]
 8002ff0:	60b9      	str	r1, [r7, #8]
 8002ff2:	607a      	str	r2, [r7, #4]
 8002ff4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	689b      	ldr	r3, [r3, #8]
 8002ffa:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002ffc:	697b      	ldr	r3, [r7, #20]
 8002ffe:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8003002:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003004:	683b      	ldr	r3, [r7, #0]
 8003006:	021a      	lsls	r2, r3, #8
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	431a      	orrs	r2, r3
 800300c:	68bb      	ldr	r3, [r7, #8]
 800300e:	4313      	orrs	r3, r2
 8003010:	697a      	ldr	r2, [r7, #20]
 8003012:	4313      	orrs	r3, r2
 8003014:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003016:	68fb      	ldr	r3, [r7, #12]
 8003018:	697a      	ldr	r2, [r7, #20]
 800301a:	609a      	str	r2, [r3, #8]
}
 800301c:	bf00      	nop
 800301e:	371c      	adds	r7, #28
 8003020:	46bd      	mov	sp, r7
 8003022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003026:	4770      	bx	lr

08003028 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003028:	b480      	push	{r7}
 800302a:	b085      	sub	sp, #20
 800302c:	af00      	add	r7, sp, #0
 800302e:	6078      	str	r0, [r7, #4]
 8003030:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003038:	2b01      	cmp	r3, #1
 800303a:	d101      	bne.n	8003040 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800303c:	2302      	movs	r3, #2
 800303e:	e05a      	b.n	80030f6 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	2201      	movs	r2, #1
 8003044:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	2202      	movs	r2, #2
 800304c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	685b      	ldr	r3, [r3, #4]
 8003056:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	689b      	ldr	r3, [r3, #8]
 800305e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003066:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003068:	683b      	ldr	r3, [r7, #0]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	68fa      	ldr	r2, [r7, #12]
 800306e:	4313      	orrs	r3, r2
 8003070:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	68fa      	ldr	r2, [r7, #12]
 8003078:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	4a21      	ldr	r2, [pc, #132]	@ (8003104 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8003080:	4293      	cmp	r3, r2
 8003082:	d022      	beq.n	80030ca <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800308c:	d01d      	beq.n	80030ca <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	4a1d      	ldr	r2, [pc, #116]	@ (8003108 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8003094:	4293      	cmp	r3, r2
 8003096:	d018      	beq.n	80030ca <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	4a1b      	ldr	r2, [pc, #108]	@ (800310c <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800309e:	4293      	cmp	r3, r2
 80030a0:	d013      	beq.n	80030ca <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	4a1a      	ldr	r2, [pc, #104]	@ (8003110 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80030a8:	4293      	cmp	r3, r2
 80030aa:	d00e      	beq.n	80030ca <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	4a18      	ldr	r2, [pc, #96]	@ (8003114 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80030b2:	4293      	cmp	r3, r2
 80030b4:	d009      	beq.n	80030ca <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	4a17      	ldr	r2, [pc, #92]	@ (8003118 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80030bc:	4293      	cmp	r3, r2
 80030be:	d004      	beq.n	80030ca <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	4a15      	ldr	r2, [pc, #84]	@ (800311c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80030c6:	4293      	cmp	r3, r2
 80030c8:	d10c      	bne.n	80030e4 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80030ca:	68bb      	ldr	r3, [r7, #8]
 80030cc:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80030d0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80030d2:	683b      	ldr	r3, [r7, #0]
 80030d4:	685b      	ldr	r3, [r3, #4]
 80030d6:	68ba      	ldr	r2, [r7, #8]
 80030d8:	4313      	orrs	r3, r2
 80030da:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	68ba      	ldr	r2, [r7, #8]
 80030e2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	2201      	movs	r2, #1
 80030e8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	2200      	movs	r2, #0
 80030f0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80030f4:	2300      	movs	r3, #0
}
 80030f6:	4618      	mov	r0, r3
 80030f8:	3714      	adds	r7, #20
 80030fa:	46bd      	mov	sp, r7
 80030fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003100:	4770      	bx	lr
 8003102:	bf00      	nop
 8003104:	40010000 	.word	0x40010000
 8003108:	40000400 	.word	0x40000400
 800310c:	40000800 	.word	0x40000800
 8003110:	40000c00 	.word	0x40000c00
 8003114:	40010400 	.word	0x40010400
 8003118:	40014000 	.word	0x40014000
 800311c:	40001800 	.word	0x40001800

08003120 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8003120:	b084      	sub	sp, #16
 8003122:	b580      	push	{r7, lr}
 8003124:	b084      	sub	sp, #16
 8003126:	af00      	add	r7, sp, #0
 8003128:	6078      	str	r0, [r7, #4]
 800312a:	f107 001c 	add.w	r0, r7, #28
 800312e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8003132:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8003136:	2b01      	cmp	r3, #1
 8003138:	d123      	bne.n	8003182 <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800313e:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	68db      	ldr	r3, [r3, #12]
 800314a:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 800314e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003152:	687a      	ldr	r2, [r7, #4]
 8003154:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	68db      	ldr	r3, [r3, #12]
 800315a:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8003162:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8003166:	2b01      	cmp	r3, #1
 8003168:	d105      	bne.n	8003176 <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	68db      	ldr	r3, [r3, #12]
 800316e:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8003176:	6878      	ldr	r0, [r7, #4]
 8003178:	f000 f901 	bl	800337e <USB_CoreReset>
 800317c:	4603      	mov	r3, r0
 800317e:	73fb      	strb	r3, [r7, #15]
 8003180:	e01b      	b.n	80031ba <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	68db      	ldr	r3, [r3, #12]
 8003186:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800318e:	6878      	ldr	r0, [r7, #4]
 8003190:	f000 f8f5 	bl	800337e <USB_CoreReset>
 8003194:	4603      	mov	r3, r0
 8003196:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8003198:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 800319c:	2b00      	cmp	r3, #0
 800319e:	d106      	bne.n	80031ae <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80031a4:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	639a      	str	r2, [r3, #56]	@ 0x38
 80031ac:	e005      	b.n	80031ba <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80031b2:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80031ba:	7fbb      	ldrb	r3, [r7, #30]
 80031bc:	2b01      	cmp	r3, #1
 80031be:	d10b      	bne.n	80031d8 <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	689b      	ldr	r3, [r3, #8]
 80031c4:	f043 0206 	orr.w	r2, r3, #6
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	689b      	ldr	r3, [r3, #8]
 80031d0:	f043 0220 	orr.w	r2, r3, #32
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80031d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80031da:	4618      	mov	r0, r3
 80031dc:	3710      	adds	r7, #16
 80031de:	46bd      	mov	sp, r7
 80031e0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80031e4:	b004      	add	sp, #16
 80031e6:	4770      	bx	lr

080031e8 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80031e8:	b480      	push	{r7}
 80031ea:	b083      	sub	sp, #12
 80031ec:	af00      	add	r7, sp, #0
 80031ee:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	689b      	ldr	r3, [r3, #8]
 80031f4:	f023 0201 	bic.w	r2, r3, #1
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80031fc:	2300      	movs	r3, #0
}
 80031fe:	4618      	mov	r0, r3
 8003200:	370c      	adds	r7, #12
 8003202:	46bd      	mov	sp, r7
 8003204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003208:	4770      	bx	lr

0800320a <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800320a:	b580      	push	{r7, lr}
 800320c:	b084      	sub	sp, #16
 800320e:	af00      	add	r7, sp, #0
 8003210:	6078      	str	r0, [r7, #4]
 8003212:	460b      	mov	r3, r1
 8003214:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8003216:	2300      	movs	r3, #0
 8003218:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	68db      	ldr	r3, [r3, #12]
 800321e:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8003226:	78fb      	ldrb	r3, [r7, #3]
 8003228:	2b01      	cmp	r3, #1
 800322a:	d115      	bne.n	8003258 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	68db      	ldr	r3, [r3, #12]
 8003230:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8003238:	200a      	movs	r0, #10
 800323a:	f7fd fd8d 	bl	8000d58 <HAL_Delay>
      ms += 10U;
 800323e:	68fb      	ldr	r3, [r7, #12]
 8003240:	330a      	adds	r3, #10
 8003242:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8003244:	6878      	ldr	r0, [r7, #4]
 8003246:	f000 f88c 	bl	8003362 <USB_GetMode>
 800324a:	4603      	mov	r3, r0
 800324c:	2b01      	cmp	r3, #1
 800324e:	d01e      	beq.n	800328e <USB_SetCurrentMode+0x84>
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	2bc7      	cmp	r3, #199	@ 0xc7
 8003254:	d9f0      	bls.n	8003238 <USB_SetCurrentMode+0x2e>
 8003256:	e01a      	b.n	800328e <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8003258:	78fb      	ldrb	r3, [r7, #3]
 800325a:	2b00      	cmp	r3, #0
 800325c:	d115      	bne.n	800328a <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	68db      	ldr	r3, [r3, #12]
 8003262:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800326a:	200a      	movs	r0, #10
 800326c:	f7fd fd74 	bl	8000d58 <HAL_Delay>
      ms += 10U;
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	330a      	adds	r3, #10
 8003274:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8003276:	6878      	ldr	r0, [r7, #4]
 8003278:	f000 f873 	bl	8003362 <USB_GetMode>
 800327c:	4603      	mov	r3, r0
 800327e:	2b00      	cmp	r3, #0
 8003280:	d005      	beq.n	800328e <USB_SetCurrentMode+0x84>
 8003282:	68fb      	ldr	r3, [r7, #12]
 8003284:	2bc7      	cmp	r3, #199	@ 0xc7
 8003286:	d9f0      	bls.n	800326a <USB_SetCurrentMode+0x60>
 8003288:	e001      	b.n	800328e <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800328a:	2301      	movs	r3, #1
 800328c:	e005      	b.n	800329a <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 800328e:	68fb      	ldr	r3, [r7, #12]
 8003290:	2bc8      	cmp	r3, #200	@ 0xc8
 8003292:	d101      	bne.n	8003298 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8003294:	2301      	movs	r3, #1
 8003296:	e000      	b.n	800329a <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8003298:	2300      	movs	r3, #0
}
 800329a:	4618      	mov	r0, r3
 800329c:	3710      	adds	r7, #16
 800329e:	46bd      	mov	sp, r7
 80032a0:	bd80      	pop	{r7, pc}

080032a2 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80032a2:	b480      	push	{r7}
 80032a4:	b085      	sub	sp, #20
 80032a6:	af00      	add	r7, sp, #0
 80032a8:	6078      	str	r0, [r7, #4]
 80032aa:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80032ac:	2300      	movs	r3, #0
 80032ae:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	3301      	adds	r3, #1
 80032b4:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80032b6:	68fb      	ldr	r3, [r7, #12]
 80032b8:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80032bc:	d901      	bls.n	80032c2 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 80032be:	2303      	movs	r3, #3
 80032c0:	e01b      	b.n	80032fa <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	691b      	ldr	r3, [r3, #16]
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	daf2      	bge.n	80032b0 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 80032ca:	2300      	movs	r3, #0
 80032cc:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80032ce:	683b      	ldr	r3, [r7, #0]
 80032d0:	019b      	lsls	r3, r3, #6
 80032d2:	f043 0220 	orr.w	r2, r3, #32
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80032da:	68fb      	ldr	r3, [r7, #12]
 80032dc:	3301      	adds	r3, #1
 80032de:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80032e0:	68fb      	ldr	r3, [r7, #12]
 80032e2:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80032e6:	d901      	bls.n	80032ec <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 80032e8:	2303      	movs	r3, #3
 80032ea:	e006      	b.n	80032fa <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	691b      	ldr	r3, [r3, #16]
 80032f0:	f003 0320 	and.w	r3, r3, #32
 80032f4:	2b20      	cmp	r3, #32
 80032f6:	d0f0      	beq.n	80032da <USB_FlushTxFifo+0x38>

  return HAL_OK;
 80032f8:	2300      	movs	r3, #0
}
 80032fa:	4618      	mov	r0, r3
 80032fc:	3714      	adds	r7, #20
 80032fe:	46bd      	mov	sp, r7
 8003300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003304:	4770      	bx	lr

08003306 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8003306:	b480      	push	{r7}
 8003308:	b085      	sub	sp, #20
 800330a:	af00      	add	r7, sp, #0
 800330c:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800330e:	2300      	movs	r3, #0
 8003310:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8003312:	68fb      	ldr	r3, [r7, #12]
 8003314:	3301      	adds	r3, #1
 8003316:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800331e:	d901      	bls.n	8003324 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8003320:	2303      	movs	r3, #3
 8003322:	e018      	b.n	8003356 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	691b      	ldr	r3, [r3, #16]
 8003328:	2b00      	cmp	r3, #0
 800332a:	daf2      	bge.n	8003312 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800332c:	2300      	movs	r3, #0
 800332e:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	2210      	movs	r2, #16
 8003334:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8003336:	68fb      	ldr	r3, [r7, #12]
 8003338:	3301      	adds	r3, #1
 800333a:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8003342:	d901      	bls.n	8003348 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8003344:	2303      	movs	r3, #3
 8003346:	e006      	b.n	8003356 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	691b      	ldr	r3, [r3, #16]
 800334c:	f003 0310 	and.w	r3, r3, #16
 8003350:	2b10      	cmp	r3, #16
 8003352:	d0f0      	beq.n	8003336 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8003354:	2300      	movs	r3, #0
}
 8003356:	4618      	mov	r0, r3
 8003358:	3714      	adds	r7, #20
 800335a:	46bd      	mov	sp, r7
 800335c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003360:	4770      	bx	lr

08003362 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           1 : Host
  *           0 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8003362:	b480      	push	{r7}
 8003364:	b083      	sub	sp, #12
 8003366:	af00      	add	r7, sp, #0
 8003368:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	695b      	ldr	r3, [r3, #20]
 800336e:	f003 0301 	and.w	r3, r3, #1
}
 8003372:	4618      	mov	r0, r3
 8003374:	370c      	adds	r7, #12
 8003376:	46bd      	mov	sp, r7
 8003378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800337c:	4770      	bx	lr

0800337e <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800337e:	b480      	push	{r7}
 8003380:	b085      	sub	sp, #20
 8003382:	af00      	add	r7, sp, #0
 8003384:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8003386:	2300      	movs	r3, #0
 8003388:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800338a:	68fb      	ldr	r3, [r7, #12]
 800338c:	3301      	adds	r3, #1
 800338e:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8003396:	d901      	bls.n	800339c <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8003398:	2303      	movs	r3, #3
 800339a:	e022      	b.n	80033e2 <USB_CoreReset+0x64>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	691b      	ldr	r3, [r3, #16]
 80033a0:	2b00      	cmp	r3, #0
 80033a2:	daf2      	bge.n	800338a <USB_CoreReset+0xc>

  count = 10U;
 80033a4:	230a      	movs	r3, #10
 80033a6:	60fb      	str	r3, [r7, #12]

  /* few cycles before setting core reset */
  while (count > 0U)
 80033a8:	e002      	b.n	80033b0 <USB_CoreReset+0x32>
  {
    count--;
 80033aa:	68fb      	ldr	r3, [r7, #12]
 80033ac:	3b01      	subs	r3, #1
 80033ae:	60fb      	str	r3, [r7, #12]
  while (count > 0U)
 80033b0:	68fb      	ldr	r3, [r7, #12]
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	d1f9      	bne.n	80033aa <USB_CoreReset+0x2c>
  }

  /* Core Soft Reset */
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	691b      	ldr	r3, [r3, #16]
 80033ba:	f043 0201 	orr.w	r2, r3, #1
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80033c2:	68fb      	ldr	r3, [r7, #12]
 80033c4:	3301      	adds	r3, #1
 80033c6:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80033c8:	68fb      	ldr	r3, [r7, #12]
 80033ca:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80033ce:	d901      	bls.n	80033d4 <USB_CoreReset+0x56>
    {
      return HAL_TIMEOUT;
 80033d0:	2303      	movs	r3, #3
 80033d2:	e006      	b.n	80033e2 <USB_CoreReset+0x64>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	691b      	ldr	r3, [r3, #16]
 80033d8:	f003 0301 	and.w	r3, r3, #1
 80033dc:	2b01      	cmp	r3, #1
 80033de:	d0f0      	beq.n	80033c2 <USB_CoreReset+0x44>

  return HAL_OK;
 80033e0:	2300      	movs	r3, #0
}
 80033e2:	4618      	mov	r0, r3
 80033e4:	3714      	adds	r7, #20
 80033e6:	46bd      	mov	sp, r7
 80033e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ec:	4770      	bx	lr
	...

080033f0 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80033f0:	b084      	sub	sp, #16
 80033f2:	b580      	push	{r7, lr}
 80033f4:	b086      	sub	sp, #24
 80033f6:	af00      	add	r7, sp, #0
 80033f8:	6078      	str	r0, [r7, #4]
 80033fa:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 80033fe:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8003402:	2300      	movs	r3, #0
 8003404:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800340a:	68fb      	ldr	r3, [r7, #12]
 800340c:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8003410:	461a      	mov	r2, r3
 8003412:	2300      	movs	r3, #0
 8003414:	6013      	str	r3, [r2, #0]

#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) \
 || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) \
 || defined(STM32F423xx)
  /* Disable HW VBUS sensing */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_VBDEN);
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800341a:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	639a      	str	r2, [r3, #56]	@ 0x38
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) ||
          defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) == 0U)
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	68db      	ldr	r3, [r3, #12]
 8003426:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800342a:	2b00      	cmp	r3, #0
 800342c:	d119      	bne.n	8003462 <USB_HostInit+0x72>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 800342e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003432:	2b01      	cmp	r3, #1
 8003434:	d10a      	bne.n	800344c <USB_HostInit+0x5c>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 8003436:	68fb      	ldr	r3, [r7, #12]
 8003438:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	68fa      	ldr	r2, [r7, #12]
 8003440:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8003444:	f043 0304 	orr.w	r3, r3, #4
 8003448:	6013      	str	r3, [r2, #0]
 800344a:	e014      	b.n	8003476 <USB_HostInit+0x86>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	68fa      	ldr	r2, [r7, #12]
 8003456:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800345a:	f023 0304 	bic.w	r3, r3, #4
 800345e:	6013      	str	r3, [r2, #0]
 8003460:	e009      	b.n	8003476 <USB_HostInit+0x86>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8003462:	68fb      	ldr	r3, [r7, #12]
 8003464:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	68fa      	ldr	r2, [r7, #12]
 800346c:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8003470:	f023 0304 	bic.w	r3, r3, #4
 8003474:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8003476:	2110      	movs	r1, #16
 8003478:	6878      	ldr	r0, [r7, #4]
 800347a:	f7ff ff12 	bl	80032a2 <USB_FlushTxFifo>
 800347e:	4603      	mov	r3, r0
 8003480:	2b00      	cmp	r3, #0
 8003482:	d001      	beq.n	8003488 <USB_HostInit+0x98>
  {
    ret = HAL_ERROR;
 8003484:	2301      	movs	r3, #1
 8003486:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8003488:	6878      	ldr	r0, [r7, #4]
 800348a:	f7ff ff3c 	bl	8003306 <USB_FlushRxFifo>
 800348e:	4603      	mov	r3, r0
 8003490:	2b00      	cmp	r3, #0
 8003492:	d001      	beq.n	8003498 <USB_HostInit+0xa8>
  {
    ret = HAL_ERROR;
 8003494:	2301      	movs	r3, #1
 8003496:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 8003498:	2300      	movs	r3, #0
 800349a:	613b      	str	r3, [r7, #16]
 800349c:	e015      	b.n	80034ca <USB_HostInit+0xda>
  {
    USBx_HC(i)->HCINT = CLEAR_INTERRUPT_MASK;
 800349e:	693b      	ldr	r3, [r7, #16]
 80034a0:	015a      	lsls	r2, r3, #5
 80034a2:	68fb      	ldr	r3, [r7, #12]
 80034a4:	4413      	add	r3, r2
 80034a6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80034aa:	461a      	mov	r2, r3
 80034ac:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80034b0:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 80034b2:	693b      	ldr	r3, [r7, #16]
 80034b4:	015a      	lsls	r2, r3, #5
 80034b6:	68fb      	ldr	r3, [r7, #12]
 80034b8:	4413      	add	r3, r2
 80034ba:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80034be:	461a      	mov	r2, r3
 80034c0:	2300      	movs	r3, #0
 80034c2:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 80034c4:	693b      	ldr	r3, [r7, #16]
 80034c6:	3301      	adds	r3, #1
 80034c8:	613b      	str	r3, [r7, #16]
 80034ca:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 80034ce:	461a      	mov	r2, r3
 80034d0:	693b      	ldr	r3, [r7, #16]
 80034d2:	4293      	cmp	r3, r2
 80034d4:	d3e3      	bcc.n	800349e <USB_HostInit+0xae>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	2200      	movs	r2, #0
 80034da:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = CLEAR_INTERRUPT_MASK;
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80034e2:	615a      	str	r2, [r3, #20]
#if defined (USB_OTG_HS)
  if (USBx == USB_OTG_HS)
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	4a18      	ldr	r2, [pc, #96]	@ (8003548 <USB_HostInit+0x158>)
 80034e8:	4293      	cmp	r3, r2
 80034ea:	d10b      	bne.n	8003504 <USB_HostInit+0x114>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80034f2:	625a      	str	r2, [r3, #36]	@ 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	4a15      	ldr	r2, [pc, #84]	@ (800354c <USB_HostInit+0x15c>)
 80034f8:	629a      	str	r2, [r3, #40]	@ 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	4a14      	ldr	r2, [pc, #80]	@ (8003550 <USB_HostInit+0x160>)
 80034fe:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
 8003502:	e009      	b.n	8003518 <USB_HostInit+0x128>
  }
  else
#endif /* defined (USB_OTG_HS) */
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	2280      	movs	r2, #128	@ 0x80
 8003508:	625a      	str	r2, [r3, #36]	@ 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	4a11      	ldr	r2, [pc, #68]	@ (8003554 <USB_HostInit+0x164>)
 800350e:	629a      	str	r2, [r3, #40]	@ 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	4a11      	ldr	r2, [pc, #68]	@ (8003558 <USB_HostInit+0x168>)
 8003514:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8003518:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800351c:	2b00      	cmp	r3, #0
 800351e:	d105      	bne.n	800352c <USB_HostInit+0x13c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	699b      	ldr	r3, [r3, #24]
 8003524:	f043 0210 	orr.w	r2, r3, #16
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	699a      	ldr	r2, [r3, #24]
 8003530:	4b0a      	ldr	r3, [pc, #40]	@ (800355c <USB_HostInit+0x16c>)
 8003532:	4313      	orrs	r3, r2
 8003534:	687a      	ldr	r2, [r7, #4]
 8003536:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return ret;
 8003538:	7dfb      	ldrb	r3, [r7, #23]
}
 800353a:	4618      	mov	r0, r3
 800353c:	3718      	adds	r7, #24
 800353e:	46bd      	mov	sp, r7
 8003540:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003544:	b004      	add	sp, #16
 8003546:	4770      	bx	lr
 8003548:	40040000 	.word	0x40040000
 800354c:	01000200 	.word	0x01000200
 8003550:	00e00300 	.word	0x00e00300
 8003554:	00600080 	.word	0x00600080
 8003558:	004000e0 	.word	0x004000e0
 800355c:	a3200008 	.word	0xa3200008

08003560 <get_idx_by_epaddr>:
TU_ATTR_ALWAYS_INLINE static inline hidh_epbuf_t* get_hid_epbuf(uint8_t idx) {
  return &_hidh_epbuf[idx];
}

// Get instance ID by endpoint address
static uint8_t get_idx_by_epaddr(uint8_t daddr, uint8_t ep_addr) {
 8003560:	b480      	push	{r7}
 8003562:	b085      	sub	sp, #20
 8003564:	af00      	add	r7, sp, #0
 8003566:	4603      	mov	r3, r0
 8003568:	460a      	mov	r2, r1
 800356a:	71fb      	strb	r3, [r7, #7]
 800356c:	4613      	mov	r3, r2
 800356e:	71bb      	strb	r3, [r7, #6]
  for (uint8_t idx = 0; idx < CFG_TUH_HID; idx++) {
 8003570:	2300      	movs	r3, #0
 8003572:	73fb      	strb	r3, [r7, #15]
 8003574:	e01b      	b.n	80035ae <get_idx_by_epaddr+0x4e>
    hidh_interface_t const* p_hid = &_hidh_itf[idx];
 8003576:	7bfa      	ldrb	r2, [r7, #15]
 8003578:	4613      	mov	r3, r2
 800357a:	00db      	lsls	r3, r3, #3
 800357c:	1a9b      	subs	r3, r3, r2
 800357e:	005b      	lsls	r3, r3, #1
 8003580:	4a10      	ldr	r2, [pc, #64]	@ (80035c4 <get_idx_by_epaddr+0x64>)
 8003582:	4413      	add	r3, r2
 8003584:	60bb      	str	r3, [r7, #8]
    if (p_hid->daddr == daddr &&
 8003586:	68bb      	ldr	r3, [r7, #8]
 8003588:	781b      	ldrb	r3, [r3, #0]
 800358a:	79fa      	ldrb	r2, [r7, #7]
 800358c:	429a      	cmp	r2, r3
 800358e:	d10b      	bne.n	80035a8 <get_idx_by_epaddr+0x48>
        (p_hid->ep_in == ep_addr || p_hid->ep_out == ep_addr)) {
 8003590:	68bb      	ldr	r3, [r7, #8]
 8003592:	789b      	ldrb	r3, [r3, #2]
    if (p_hid->daddr == daddr &&
 8003594:	79ba      	ldrb	r2, [r7, #6]
 8003596:	429a      	cmp	r2, r3
 8003598:	d004      	beq.n	80035a4 <get_idx_by_epaddr+0x44>
        (p_hid->ep_in == ep_addr || p_hid->ep_out == ep_addr)) {
 800359a:	68bb      	ldr	r3, [r7, #8]
 800359c:	78db      	ldrb	r3, [r3, #3]
 800359e:	79ba      	ldrb	r2, [r7, #6]
 80035a0:	429a      	cmp	r2, r3
 80035a2:	d101      	bne.n	80035a8 <get_idx_by_epaddr+0x48>
      return idx;
 80035a4:	7bfb      	ldrb	r3, [r7, #15]
 80035a6:	e006      	b.n	80035b6 <get_idx_by_epaddr+0x56>
  for (uint8_t idx = 0; idx < CFG_TUH_HID; idx++) {
 80035a8:	7bfb      	ldrb	r3, [r7, #15]
 80035aa:	3301      	adds	r3, #1
 80035ac:	73fb      	strb	r3, [r7, #15]
 80035ae:	7bfb      	ldrb	r3, [r7, #15]
 80035b0:	2b00      	cmp	r3, #0
 80035b2:	d0e0      	beq.n	8003576 <get_idx_by_epaddr+0x16>
    }
  }
  return TUSB_INDEX_INVALID_8;
 80035b4:	23ff      	movs	r3, #255	@ 0xff
}
 80035b6:	4618      	mov	r0, r3
 80035b8:	3714      	adds	r7, #20
 80035ba:	46bd      	mov	sp, r7
 80035bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035c0:	4770      	bx	lr
 80035c2:	bf00      	nop
 80035c4:	200008f8 	.word	0x200008f8

080035c8 <find_new_itf>:

static hidh_interface_t* find_new_itf(void) {
 80035c8:	b480      	push	{r7}
 80035ca:	b083      	sub	sp, #12
 80035cc:	af00      	add	r7, sp, #0
  for (uint8_t i = 0; i < CFG_TUH_HID; i++) {
 80035ce:	2300      	movs	r3, #0
 80035d0:	71fb      	strb	r3, [r7, #7]
 80035d2:	e014      	b.n	80035fe <find_new_itf+0x36>
    if (_hidh_itf[i].daddr == 0) return &_hidh_itf[i];
 80035d4:	79fa      	ldrb	r2, [r7, #7]
 80035d6:	490f      	ldr	r1, [pc, #60]	@ (8003614 <find_new_itf+0x4c>)
 80035d8:	4613      	mov	r3, r2
 80035da:	00db      	lsls	r3, r3, #3
 80035dc:	1a9b      	subs	r3, r3, r2
 80035de:	005b      	lsls	r3, r3, #1
 80035e0:	440b      	add	r3, r1
 80035e2:	781b      	ldrb	r3, [r3, #0]
 80035e4:	2b00      	cmp	r3, #0
 80035e6:	d107      	bne.n	80035f8 <find_new_itf+0x30>
 80035e8:	79fa      	ldrb	r2, [r7, #7]
 80035ea:	4613      	mov	r3, r2
 80035ec:	00db      	lsls	r3, r3, #3
 80035ee:	1a9b      	subs	r3, r3, r2
 80035f0:	005b      	lsls	r3, r3, #1
 80035f2:	4a08      	ldr	r2, [pc, #32]	@ (8003614 <find_new_itf+0x4c>)
 80035f4:	4413      	add	r3, r2
 80035f6:	e006      	b.n	8003606 <find_new_itf+0x3e>
  for (uint8_t i = 0; i < CFG_TUH_HID; i++) {
 80035f8:	79fb      	ldrb	r3, [r7, #7]
 80035fa:	3301      	adds	r3, #1
 80035fc:	71fb      	strb	r3, [r7, #7]
 80035fe:	79fb      	ldrb	r3, [r7, #7]
 8003600:	2b00      	cmp	r3, #0
 8003602:	d0e7      	beq.n	80035d4 <find_new_itf+0xc>
  }
  return NULL;
 8003604:	2300      	movs	r3, #0
}
 8003606:	4618      	mov	r0, r3
 8003608:	370c      	adds	r7, #12
 800360a:	46bd      	mov	sp, r7
 800360c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003610:	4770      	bx	lr
 8003612:	bf00      	nop
 8003614:	200008f8 	.word	0x200008f8

08003618 <tuh_hid_itf_get_index>:
  desc->iInterface = 0; // not used yet

  return true;
}

uint8_t tuh_hid_itf_get_index(uint8_t daddr, uint8_t itf_num) {
 8003618:	b480      	push	{r7}
 800361a:	b085      	sub	sp, #20
 800361c:	af00      	add	r7, sp, #0
 800361e:	4603      	mov	r3, r0
 8003620:	460a      	mov	r2, r1
 8003622:	71fb      	strb	r3, [r7, #7]
 8003624:	4613      	mov	r3, r2
 8003626:	71bb      	strb	r3, [r7, #6]
  for (uint8_t idx = 0; idx < CFG_TUH_HID; idx++) {
 8003628:	2300      	movs	r3, #0
 800362a:	73fb      	strb	r3, [r7, #15]
 800362c:	e016      	b.n	800365c <tuh_hid_itf_get_index+0x44>
    hidh_interface_t const* p_hid = &_hidh_itf[idx];
 800362e:	7bfa      	ldrb	r2, [r7, #15]
 8003630:	4613      	mov	r3, r2
 8003632:	00db      	lsls	r3, r3, #3
 8003634:	1a9b      	subs	r3, r3, r2
 8003636:	005b      	lsls	r3, r3, #1
 8003638:	4a0d      	ldr	r2, [pc, #52]	@ (8003670 <tuh_hid_itf_get_index+0x58>)
 800363a:	4413      	add	r3, r2
 800363c:	60bb      	str	r3, [r7, #8]
    if (p_hid->daddr == daddr && p_hid->itf_num == itf_num) return idx;
 800363e:	68bb      	ldr	r3, [r7, #8]
 8003640:	781b      	ldrb	r3, [r3, #0]
 8003642:	79fa      	ldrb	r2, [r7, #7]
 8003644:	429a      	cmp	r2, r3
 8003646:	d106      	bne.n	8003656 <tuh_hid_itf_get_index+0x3e>
 8003648:	68bb      	ldr	r3, [r7, #8]
 800364a:	785b      	ldrb	r3, [r3, #1]
 800364c:	79ba      	ldrb	r2, [r7, #6]
 800364e:	429a      	cmp	r2, r3
 8003650:	d101      	bne.n	8003656 <tuh_hid_itf_get_index+0x3e>
 8003652:	7bfb      	ldrb	r3, [r7, #15]
 8003654:	e006      	b.n	8003664 <tuh_hid_itf_get_index+0x4c>
  for (uint8_t idx = 0; idx < CFG_TUH_HID; idx++) {
 8003656:	7bfb      	ldrb	r3, [r7, #15]
 8003658:	3301      	adds	r3, #1
 800365a:	73fb      	strb	r3, [r7, #15]
 800365c:	7bfb      	ldrb	r3, [r7, #15]
 800365e:	2b00      	cmp	r3, #0
 8003660:	d0e5      	beq.n	800362e <tuh_hid_itf_get_index+0x16>
  }

  return TUSB_INDEX_INVALID_8;
 8003662:	23ff      	movs	r3, #255	@ 0xff
}
 8003664:	4618      	mov	r0, r3
 8003666:	3714      	adds	r7, #20
 8003668:	46bd      	mov	sp, r7
 800366a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800366e:	4770      	bx	lr
 8003670:	200008f8 	.word	0x200008f8

08003674 <_hidh_set_protocol>:
void tuh_hid_set_default_protocol(uint8_t protocol) {
  _hidh_default_protocol = protocol;
}

static bool _hidh_set_protocol(uint8_t daddr, uint8_t itf_num, uint8_t protocol,
                               tuh_xfer_cb_t complete_cb, uintptr_t user_data) {
 8003674:	b580      	push	{r7, lr}
 8003676:	b08a      	sub	sp, #40	@ 0x28
 8003678:	af00      	add	r7, sp, #0
 800367a:	603b      	str	r3, [r7, #0]
 800367c:	4603      	mov	r3, r0
 800367e:	71fb      	strb	r3, [r7, #7]
 8003680:	460b      	mov	r3, r1
 8003682:	71bb      	strb	r3, [r7, #6]
 8003684:	4613      	mov	r3, r2
 8003686:	717b      	strb	r3, [r7, #5]
  TU_LOG_DRV("HID Set Protocol = %d\r\n", protocol);

  tusb_control_request_t const request = {
 8003688:	f897 3020 	ldrb.w	r3, [r7, #32]
 800368c:	2201      	movs	r2, #1
 800368e:	f362 0304 	bfi	r3, r2, #0, #5
 8003692:	f887 3020 	strb.w	r3, [r7, #32]
 8003696:	f897 3020 	ldrb.w	r3, [r7, #32]
 800369a:	2201      	movs	r2, #1
 800369c:	f362 1346 	bfi	r3, r2, #5, #2
 80036a0:	f887 3020 	strb.w	r3, [r7, #32]
 80036a4:	f897 3020 	ldrb.w	r3, [r7, #32]
 80036a8:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80036ac:	f887 3020 	strb.w	r3, [r7, #32]
 80036b0:	230b      	movs	r3, #11
 80036b2:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
 80036b6:	797b      	ldrb	r3, [r7, #5]
 80036b8:	b29b      	uxth	r3, r3
 80036ba:	847b      	strh	r3, [r7, #34]	@ 0x22
 80036bc:	79bb      	ldrb	r3, [r7, #6]
 80036be:	b29b      	uxth	r3, r3
 80036c0:	84bb      	strh	r3, [r7, #36]	@ 0x24
 80036c2:	2300      	movs	r3, #0
 80036c4:	84fb      	strh	r3, [r7, #38]	@ 0x26
      .wValue   = protocol,
      .wIndex   = itf_num,
      .wLength  = 0
  };

  tuh_xfer_t xfer = {
 80036c6:	f107 0308 	add.w	r3, r7, #8
 80036ca:	2200      	movs	r2, #0
 80036cc:	601a      	str	r2, [r3, #0]
 80036ce:	605a      	str	r2, [r3, #4]
 80036d0:	609a      	str	r2, [r3, #8]
 80036d2:	60da      	str	r2, [r3, #12]
 80036d4:	611a      	str	r2, [r3, #16]
 80036d6:	615a      	str	r2, [r3, #20]
 80036d8:	79fb      	ldrb	r3, [r7, #7]
 80036da:	723b      	strb	r3, [r7, #8]
 80036dc:	f107 0320 	add.w	r3, r7, #32
 80036e0:	613b      	str	r3, [r7, #16]
 80036e2:	683b      	ldr	r3, [r7, #0]
 80036e4:	61bb      	str	r3, [r7, #24]
 80036e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80036e8:	61fb      	str	r3, [r7, #28]
      .buffer      = NULL,
      .complete_cb = complete_cb,
      .user_data   = user_data
  };

  return tuh_control_xfer(&xfer);
 80036ea:	f107 0308 	add.w	r3, r7, #8
 80036ee:	4618      	mov	r0, r3
 80036f0:	f001 f8b6 	bl	8004860 <tuh_control_xfer>
 80036f4:	4603      	mov	r3, r0
}
 80036f6:	4618      	mov	r0, r3
 80036f8:	3728      	adds	r7, #40	@ 0x28
 80036fa:	46bd      	mov	sp, r7
 80036fc:	bd80      	pop	{r7, pc}

080036fe <_hidh_set_idle>:

  return tuh_control_xfer(&xfer);
}

static bool _hidh_set_idle(uint8_t daddr, uint8_t itf_num, uint16_t idle_rate,
                           tuh_xfer_cb_t complete_cb, uintptr_t user_data) {
 80036fe:	b580      	push	{r7, lr}
 8003700:	b08a      	sub	sp, #40	@ 0x28
 8003702:	af00      	add	r7, sp, #0
 8003704:	603b      	str	r3, [r7, #0]
 8003706:	4603      	mov	r3, r0
 8003708:	71fb      	strb	r3, [r7, #7]
 800370a:	460b      	mov	r3, r1
 800370c:	71bb      	strb	r3, [r7, #6]
 800370e:	4613      	mov	r3, r2
 8003710:	80bb      	strh	r3, [r7, #4]
  // SET IDLE request, device can stall if not support this request
  TU_LOG_DRV("HID Set Idle \r\n");

  tusb_control_request_t const request = {
 8003712:	f897 3020 	ldrb.w	r3, [r7, #32]
 8003716:	2201      	movs	r2, #1
 8003718:	f362 0304 	bfi	r3, r2, #0, #5
 800371c:	f887 3020 	strb.w	r3, [r7, #32]
 8003720:	f897 3020 	ldrb.w	r3, [r7, #32]
 8003724:	2201      	movs	r2, #1
 8003726:	f362 1346 	bfi	r3, r2, #5, #2
 800372a:	f887 3020 	strb.w	r3, [r7, #32]
 800372e:	f897 3020 	ldrb.w	r3, [r7, #32]
 8003732:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003736:	f887 3020 	strb.w	r3, [r7, #32]
 800373a:	230a      	movs	r3, #10
 800373c:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
 8003740:	88bb      	ldrh	r3, [r7, #4]
 8003742:	847b      	strh	r3, [r7, #34]	@ 0x22
          .type      = TUSB_REQ_TYPE_CLASS,
          .direction = TUSB_DIR_OUT
      },
      .bRequest = HID_REQ_CONTROL_SET_IDLE,
      .wValue   = tu_htole16(idle_rate),
      .wIndex   = tu_htole16((uint16_t) itf_num),
 8003744:	79bb      	ldrb	r3, [r7, #6]
 8003746:	b29b      	uxth	r3, r3
  tusb_control_request_t const request = {
 8003748:	84bb      	strh	r3, [r7, #36]	@ 0x24
 800374a:	2300      	movs	r3, #0
 800374c:	84fb      	strh	r3, [r7, #38]	@ 0x26
      .wLength  = 0
  };

  tuh_xfer_t xfer = {
 800374e:	f107 0308 	add.w	r3, r7, #8
 8003752:	2200      	movs	r2, #0
 8003754:	601a      	str	r2, [r3, #0]
 8003756:	605a      	str	r2, [r3, #4]
 8003758:	609a      	str	r2, [r3, #8]
 800375a:	60da      	str	r2, [r3, #12]
 800375c:	611a      	str	r2, [r3, #16]
 800375e:	615a      	str	r2, [r3, #20]
 8003760:	79fb      	ldrb	r3, [r7, #7]
 8003762:	723b      	strb	r3, [r7, #8]
 8003764:	f107 0320 	add.w	r3, r7, #32
 8003768:	613b      	str	r3, [r7, #16]
 800376a:	683b      	ldr	r3, [r7, #0]
 800376c:	61bb      	str	r3, [r7, #24]
 800376e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003770:	61fb      	str	r3, [r7, #28]
      .buffer      = NULL,
      .complete_cb = complete_cb,
      .user_data   = user_data
  };

  return tuh_control_xfer(&xfer);
 8003772:	f107 0308 	add.w	r3, r7, #8
 8003776:	4618      	mov	r0, r3
 8003778:	f001 f872 	bl	8004860 <tuh_control_xfer>
 800377c:	4603      	mov	r3, r0
}
 800377e:	4618      	mov	r0, r3
 8003780:	3728      	adds	r7, #40	@ 0x28
 8003782:	46bd      	mov	sp, r7
 8003784:	bd80      	pop	{r7, pc}
	...

08003788 <tuh_hid_receive_report>:
  hidh_interface_t* p_hid = get_hid_itf(dev_addr, idx);
  TU_VERIFY(p_hid);
  return !usbh_edpt_busy(dev_addr, p_hid->ep_in);
}

bool tuh_hid_receive_report(uint8_t daddr, uint8_t idx) {
 8003788:	b580      	push	{r7, lr}
 800378a:	b08c      	sub	sp, #48	@ 0x30
 800378c:	af02      	add	r7, sp, #8
 800378e:	4603      	mov	r3, r0
 8003790:	460a      	mov	r2, r1
 8003792:	71fb      	strb	r3, [r7, #7]
 8003794:	4613      	mov	r3, r2
 8003796:	71bb      	strb	r3, [r7, #6]
 8003798:	79fb      	ldrb	r3, [r7, #7]
 800379a:	77fb      	strb	r3, [r7, #31]
 800379c:	79bb      	ldrb	r3, [r7, #6]
 800379e:	77bb      	strb	r3, [r7, #30]
  TU_ASSERT(daddr > 0 && idx < CFG_TUH_HID, NULL);
 80037a0:	7ffb      	ldrb	r3, [r7, #31]
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	d002      	beq.n	80037ac <tuh_hid_receive_report+0x24>
 80037a6:	7fbb      	ldrb	r3, [r7, #30]
 80037a8:	2b00      	cmp	r3, #0
 80037aa:	d00a      	beq.n	80037c2 <tuh_hid_receive_report+0x3a>
 80037ac:	4b30      	ldr	r3, [pc, #192]	@ (8003870 <tuh_hid_receive_report+0xe8>)
 80037ae:	61bb      	str	r3, [r7, #24]
 80037b0:	69bb      	ldr	r3, [r7, #24]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	f003 0301 	and.w	r3, r3, #1
 80037b8:	2b00      	cmp	r3, #0
 80037ba:	d000      	beq.n	80037be <tuh_hid_receive_report+0x36>
 80037bc:	be00      	bkpt	0x0000
 80037be:	2300      	movs	r3, #0
 80037c0:	e00f      	b.n	80037e2 <tuh_hid_receive_report+0x5a>
  hidh_interface_t* p_hid = &_hidh_itf[idx];
 80037c2:	7fba      	ldrb	r2, [r7, #30]
 80037c4:	4613      	mov	r3, r2
 80037c6:	00db      	lsls	r3, r3, #3
 80037c8:	1a9b      	subs	r3, r3, r2
 80037ca:	005b      	lsls	r3, r3, #1
 80037cc:	4a29      	ldr	r2, [pc, #164]	@ (8003874 <tuh_hid_receive_report+0xec>)
 80037ce:	4413      	add	r3, r2
 80037d0:	617b      	str	r3, [r7, #20]
  return (p_hid->daddr == daddr) ? p_hid : NULL;
 80037d2:	697b      	ldr	r3, [r7, #20]
 80037d4:	781b      	ldrb	r3, [r3, #0]
 80037d6:	7ffa      	ldrb	r2, [r7, #31]
 80037d8:	429a      	cmp	r2, r3
 80037da:	d101      	bne.n	80037e0 <tuh_hid_receive_report+0x58>
 80037dc:	697b      	ldr	r3, [r7, #20]
 80037de:	e000      	b.n	80037e2 <tuh_hid_receive_report+0x5a>
 80037e0:	2300      	movs	r3, #0
  hidh_interface_t* p_hid = get_hid_itf(daddr, idx);
 80037e2:	627b      	str	r3, [r7, #36]	@ 0x24
  TU_VERIFY(p_hid);
 80037e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	d101      	bne.n	80037ee <tuh_hid_receive_report+0x66>
 80037ea:	2300      	movs	r3, #0
 80037ec:	e03b      	b.n	8003866 <tuh_hid_receive_report+0xde>
 80037ee:	79bb      	ldrb	r3, [r7, #6]
 80037f0:	74fb      	strb	r3, [r7, #19]
  return &_hidh_epbuf[idx];
 80037f2:	7cfb      	ldrb	r3, [r7, #19]
 80037f4:	01db      	lsls	r3, r3, #7
 80037f6:	4a20      	ldr	r2, [pc, #128]	@ (8003878 <tuh_hid_receive_report+0xf0>)
 80037f8:	4413      	add	r3, r2
  hidh_epbuf_t* epbuf = get_hid_epbuf(idx);
 80037fa:	623b      	str	r3, [r7, #32]

  // claim endpoint
  TU_VERIFY(usbh_edpt_claim(daddr, p_hid->ep_in));
 80037fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80037fe:	789a      	ldrb	r2, [r3, #2]
 8003800:	79fb      	ldrb	r3, [r7, #7]
 8003802:	4611      	mov	r1, r2
 8003804:	4618      	mov	r0, r3
 8003806:	f001 fbb7 	bl	8004f78 <usbh_edpt_claim>
 800380a:	4603      	mov	r3, r0
 800380c:	f083 0301 	eor.w	r3, r3, #1
 8003810:	b2db      	uxtb	r3, r3
 8003812:	2b00      	cmp	r3, #0
 8003814:	d001      	beq.n	800381a <tuh_hid_receive_report+0x92>
 8003816:	2300      	movs	r3, #0
 8003818:	e025      	b.n	8003866 <tuh_hid_receive_report+0xde>

  if (!usbh_edpt_xfer(daddr, p_hid->ep_in, epbuf->epin, p_hid->epin_size)) {
 800381a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800381c:	7898      	ldrb	r0, [r3, #2]
 800381e:	6a3b      	ldr	r3, [r7, #32]
 8003820:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003822:	8951      	ldrh	r1, [r2, #10]
 8003824:	79fa      	ldrb	r2, [r7, #7]
 8003826:	74ba      	strb	r2, [r7, #18]
 8003828:	4602      	mov	r2, r0
 800382a:	747a      	strb	r2, [r7, #17]
 800382c:	60fb      	str	r3, [r7, #12]
 800382e:	460b      	mov	r3, r1
 8003830:	817b      	strh	r3, [r7, #10]
bool usbh_edpt_xfer_with_callback(uint8_t dev_addr, uint8_t ep_addr, uint8_t * buffer, uint16_t total_bytes,
                                  tuh_xfer_cb_t complete_cb, uintptr_t user_data);

TU_ATTR_ALWAYS_INLINE static inline
bool usbh_edpt_xfer(uint8_t dev_addr, uint8_t ep_addr, uint8_t * buffer, uint16_t total_bytes) {
  return usbh_edpt_xfer_with_callback(dev_addr, ep_addr, buffer, total_bytes, NULL, 0);
 8003832:	897b      	ldrh	r3, [r7, #10]
 8003834:	7c79      	ldrb	r1, [r7, #17]
 8003836:	7cb8      	ldrb	r0, [r7, #18]
 8003838:	2200      	movs	r2, #0
 800383a:	9201      	str	r2, [sp, #4]
 800383c:	2200      	movs	r2, #0
 800383e:	9200      	str	r2, [sp, #0]
 8003840:	68fa      	ldr	r2, [r7, #12]
 8003842:	f001 fc41 	bl	80050c8 <usbh_edpt_xfer_with_callback>
 8003846:	4603      	mov	r3, r0
 8003848:	f083 0301 	eor.w	r3, r3, #1
 800384c:	b2db      	uxtb	r3, r3
 800384e:	2b00      	cmp	r3, #0
 8003850:	d008      	beq.n	8003864 <tuh_hid_receive_report+0xdc>
    usbh_edpt_release(daddr, p_hid->ep_in);
 8003852:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003854:	789a      	ldrb	r2, [r3, #2]
 8003856:	79fb      	ldrb	r3, [r7, #7]
 8003858:	4611      	mov	r1, r2
 800385a:	4618      	mov	r0, r3
 800385c:	f001 fbe6 	bl	800502c <usbh_edpt_release>
    return false;
 8003860:	2300      	movs	r3, #0
 8003862:	e000      	b.n	8003866 <tuh_hid_receive_report+0xde>
  }

  return true;
 8003864:	2301      	movs	r3, #1
}
 8003866:	4618      	mov	r0, r3
 8003868:	3728      	adds	r7, #40	@ 0x28
 800386a:	46bd      	mov	sp, r7
 800386c:	bd80      	pop	{r7, pc}
 800386e:	bf00      	nop
 8003870:	e000edf0 	.word	0xe000edf0
 8003874:	200008f8 	.word	0x200008f8
 8003878:	20000908 	.word	0x20000908

0800387c <hidh_init>:
}

//--------------------------------------------------------------------+
// USBH API
//--------------------------------------------------------------------+
bool hidh_init(void) {
 800387c:	b580      	push	{r7, lr}
 800387e:	af00      	add	r7, sp, #0
  TU_LOG_DRV("sizeof(hidh_interface_t) = %u\r\n", sizeof(hidh_interface_t));
  tu_memclr(_hidh_itf, sizeof(_hidh_itf));
 8003880:	220e      	movs	r2, #14
 8003882:	2100      	movs	r1, #0
 8003884:	4802      	ldr	r0, [pc, #8]	@ (8003890 <hidh_init+0x14>)
 8003886:	f004 fbe2 	bl	800804e <memset>
  return true;
 800388a:	2301      	movs	r3, #1
}
 800388c:	4618      	mov	r0, r3
 800388e:	bd80      	pop	{r7, pc}
 8003890:	200008f8 	.word	0x200008f8

08003894 <hidh_deinit>:

bool hidh_deinit(void) {
 8003894:	b480      	push	{r7}
 8003896:	af00      	add	r7, sp, #0
  return true;
 8003898:	2301      	movs	r3, #1
}
 800389a:	4618      	mov	r0, r3
 800389c:	46bd      	mov	sp, r7
 800389e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038a2:	4770      	bx	lr

080038a4 <hidh_xfer_cb>:

bool hidh_xfer_cb(uint8_t daddr, uint8_t ep_addr, xfer_result_t result, uint32_t xferred_bytes) {
 80038a4:	b580      	push	{r7, lr}
 80038a6:	b08a      	sub	sp, #40	@ 0x28
 80038a8:	af00      	add	r7, sp, #0
 80038aa:	603b      	str	r3, [r7, #0]
 80038ac:	4603      	mov	r3, r0
 80038ae:	71fb      	strb	r3, [r7, #7]
 80038b0:	460b      	mov	r3, r1
 80038b2:	71bb      	strb	r3, [r7, #6]
 80038b4:	4613      	mov	r3, r2
 80038b6:	717b      	strb	r3, [r7, #5]
 80038b8:	79bb      	ldrb	r3, [r7, #6]
 80038ba:	73fb      	strb	r3, [r7, #15]
// Endpoint helper
//--------------------------------------------------------------------+

// Get direction from Endpoint address
TU_ATTR_ALWAYS_INLINE static inline tusb_dir_t tu_edpt_dir(uint8_t addr) {
  return (addr & TUSB_DIR_IN_MASK) ? TUSB_DIR_IN : TUSB_DIR_OUT;
 80038bc:	7bfb      	ldrb	r3, [r7, #15]
 80038be:	09db      	lsrs	r3, r3, #7
 80038c0:	b2db      	uxtb	r3, r3
  (void) result;

  uint8_t const dir = tu_edpt_dir(ep_addr);
 80038c2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint8_t const idx = get_idx_by_epaddr(daddr, ep_addr);
 80038c6:	79ba      	ldrb	r2, [r7, #6]
 80038c8:	79fb      	ldrb	r3, [r7, #7]
 80038ca:	4611      	mov	r1, r2
 80038cc:	4618      	mov	r0, r3
 80038ce:	f7ff fe47 	bl	8003560 <get_idx_by_epaddr>
 80038d2:	4603      	mov	r3, r0
 80038d4:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 80038d8:	79fb      	ldrb	r3, [r7, #7]
 80038da:	76fb      	strb	r3, [r7, #27]
 80038dc:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80038e0:	76bb      	strb	r3, [r7, #26]
  TU_ASSERT(daddr > 0 && idx < CFG_TUH_HID, NULL);
 80038e2:	7efb      	ldrb	r3, [r7, #27]
 80038e4:	2b00      	cmp	r3, #0
 80038e6:	d002      	beq.n	80038ee <hidh_xfer_cb+0x4a>
 80038e8:	7ebb      	ldrb	r3, [r7, #26]
 80038ea:	2b00      	cmp	r3, #0
 80038ec:	d00a      	beq.n	8003904 <hidh_xfer_cb+0x60>
 80038ee:	4b24      	ldr	r3, [pc, #144]	@ (8003980 <hidh_xfer_cb+0xdc>)
 80038f0:	617b      	str	r3, [r7, #20]
 80038f2:	697b      	ldr	r3, [r7, #20]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	f003 0301 	and.w	r3, r3, #1
 80038fa:	2b00      	cmp	r3, #0
 80038fc:	d000      	beq.n	8003900 <hidh_xfer_cb+0x5c>
 80038fe:	be00      	bkpt	0x0000
 8003900:	2300      	movs	r3, #0
 8003902:	e00f      	b.n	8003924 <hidh_xfer_cb+0x80>
  hidh_interface_t* p_hid = &_hidh_itf[idx];
 8003904:	7eba      	ldrb	r2, [r7, #26]
 8003906:	4613      	mov	r3, r2
 8003908:	00db      	lsls	r3, r3, #3
 800390a:	1a9b      	subs	r3, r3, r2
 800390c:	005b      	lsls	r3, r3, #1
 800390e:	4a1d      	ldr	r2, [pc, #116]	@ (8003984 <hidh_xfer_cb+0xe0>)
 8003910:	4413      	add	r3, r2
 8003912:	613b      	str	r3, [r7, #16]
  return (p_hid->daddr == daddr) ? p_hid : NULL;
 8003914:	693b      	ldr	r3, [r7, #16]
 8003916:	781b      	ldrb	r3, [r3, #0]
 8003918:	7efa      	ldrb	r2, [r7, #27]
 800391a:	429a      	cmp	r2, r3
 800391c:	d101      	bne.n	8003922 <hidh_xfer_cb+0x7e>
 800391e:	693b      	ldr	r3, [r7, #16]
 8003920:	e000      	b.n	8003924 <hidh_xfer_cb+0x80>
 8003922:	2300      	movs	r3, #0

  hidh_interface_t* p_hid = get_hid_itf(daddr, idx);
 8003924:	623b      	str	r3, [r7, #32]
  TU_VERIFY(p_hid);
 8003926:	6a3b      	ldr	r3, [r7, #32]
 8003928:	2b00      	cmp	r3, #0
 800392a:	d101      	bne.n	8003930 <hidh_xfer_cb+0x8c>
 800392c:	2300      	movs	r3, #0
 800392e:	e022      	b.n	8003976 <hidh_xfer_cb+0xd2>
 8003930:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8003934:	73bb      	strb	r3, [r7, #14]
  return &_hidh_epbuf[idx];
 8003936:	7bbb      	ldrb	r3, [r7, #14]
 8003938:	01db      	lsls	r3, r3, #7
 800393a:	4a13      	ldr	r2, [pc, #76]	@ (8003988 <hidh_xfer_cb+0xe4>)
 800393c:	4413      	add	r3, r2
  hidh_epbuf_t* epbuf = get_hid_epbuf(idx);
 800393e:	61fb      	str	r3, [r7, #28]

  if (dir == TUSB_DIR_IN) {
 8003940:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003944:	2b01      	cmp	r3, #1
 8003946:	d108      	bne.n	800395a <hidh_xfer_cb+0xb6>
    TU_LOG_DRV("  [idx=%u] Get Report callback\r\n", idx);
    TU_LOG3_MEM(epbuf->epin, xferred_bytes, 2);
    tuh_hid_report_received_cb(daddr, idx, epbuf->epin, (uint16_t) xferred_bytes);
 8003948:	69fa      	ldr	r2, [r7, #28]
 800394a:	683b      	ldr	r3, [r7, #0]
 800394c:	b29b      	uxth	r3, r3
 800394e:	f897 1026 	ldrb.w	r1, [r7, #38]	@ 0x26
 8003952:	79f8      	ldrb	r0, [r7, #7]
 8003954:	f7fc fe10 	bl	8000578 <tuh_hid_report_received_cb>
 8003958:	e00c      	b.n	8003974 <hidh_xfer_cb+0xd0>
  } else {
    if (tuh_hid_report_sent_cb) {
 800395a:	4b0c      	ldr	r3, [pc, #48]	@ (800398c <hidh_xfer_cb+0xe8>)
 800395c:	2b00      	cmp	r3, #0
 800395e:	d009      	beq.n	8003974 <hidh_xfer_cb+0xd0>
      tuh_hid_report_sent_cb(daddr, idx, epbuf->epout, (uint16_t) xferred_bytes);
 8003960:	69fb      	ldr	r3, [r7, #28]
 8003962:	f103 0240 	add.w	r2, r3, #64	@ 0x40
 8003966:	683b      	ldr	r3, [r7, #0]
 8003968:	b29b      	uxth	r3, r3
 800396a:	f897 1026 	ldrb.w	r1, [r7, #38]	@ 0x26
 800396e:	79f8      	ldrb	r0, [r7, #7]
 8003970:	f3af 8000 	nop.w
    }
  }

  return true;
 8003974:	2301      	movs	r3, #1
}
 8003976:	4618      	mov	r0, r3
 8003978:	3728      	adds	r7, #40	@ 0x28
 800397a:	46bd      	mov	sp, r7
 800397c:	bd80      	pop	{r7, pc}
 800397e:	bf00      	nop
 8003980:	e000edf0 	.word	0xe000edf0
 8003984:	200008f8 	.word	0x200008f8
 8003988:	20000908 	.word	0x20000908
 800398c:	00000000 	.word	0x00000000

08003990 <hidh_close>:

void hidh_close(uint8_t daddr) {
 8003990:	b580      	push	{r7, lr}
 8003992:	b084      	sub	sp, #16
 8003994:	af00      	add	r7, sp, #0
 8003996:	4603      	mov	r3, r0
 8003998:	71fb      	strb	r3, [r7, #7]
  for (uint8_t i = 0; i < CFG_TUH_HID; i++) {
 800399a:	2300      	movs	r3, #0
 800399c:	73fb      	strb	r3, [r7, #15]
 800399e:	e01d      	b.n	80039dc <hidh_close+0x4c>
    hidh_interface_t* p_hid = &_hidh_itf[i];
 80039a0:	7bfa      	ldrb	r2, [r7, #15]
 80039a2:	4613      	mov	r3, r2
 80039a4:	00db      	lsls	r3, r3, #3
 80039a6:	1a9b      	subs	r3, r3, r2
 80039a8:	005b      	lsls	r3, r3, #1
 80039aa:	4a10      	ldr	r2, [pc, #64]	@ (80039ec <hidh_close+0x5c>)
 80039ac:	4413      	add	r3, r2
 80039ae:	60bb      	str	r3, [r7, #8]
    if (p_hid->daddr == daddr) {
 80039b0:	68bb      	ldr	r3, [r7, #8]
 80039b2:	781b      	ldrb	r3, [r3, #0]
 80039b4:	79fa      	ldrb	r2, [r7, #7]
 80039b6:	429a      	cmp	r2, r3
 80039b8:	d10d      	bne.n	80039d6 <hidh_close+0x46>
      TU_LOG_DRV("  HIDh close addr = %u index = %u\r\n", daddr, i);
      if (tuh_hid_umount_cb) {
 80039ba:	4b0d      	ldr	r3, [pc, #52]	@ (80039f0 <hidh_close+0x60>)
 80039bc:	2b00      	cmp	r3, #0
 80039be:	d005      	beq.n	80039cc <hidh_close+0x3c>
        tuh_hid_umount_cb(daddr, i);
 80039c0:	7bfa      	ldrb	r2, [r7, #15]
 80039c2:	79fb      	ldrb	r3, [r7, #7]
 80039c4:	4611      	mov	r1, r2
 80039c6:	4618      	mov	r0, r3
 80039c8:	f7fc fdc7 	bl	800055a <tuh_hid_umount_cb>
      }
      tu_memclr(p_hid, sizeof(hidh_interface_t));
 80039cc:	220e      	movs	r2, #14
 80039ce:	2100      	movs	r1, #0
 80039d0:	68b8      	ldr	r0, [r7, #8]
 80039d2:	f004 fb3c 	bl	800804e <memset>
  for (uint8_t i = 0; i < CFG_TUH_HID; i++) {
 80039d6:	7bfb      	ldrb	r3, [r7, #15]
 80039d8:	3301      	adds	r3, #1
 80039da:	73fb      	strb	r3, [r7, #15]
 80039dc:	7bfb      	ldrb	r3, [r7, #15]
 80039de:	2b00      	cmp	r3, #0
 80039e0:	d0de      	beq.n	80039a0 <hidh_close+0x10>
    }
  }
}
 80039e2:	bf00      	nop
 80039e4:	bf00      	nop
 80039e6:	3710      	adds	r7, #16
 80039e8:	46bd      	mov	sp, r7
 80039ea:	bd80      	pop	{r7, pc}
 80039ec:	200008f8 	.word	0x200008f8
 80039f0:	0800055b 	.word	0x0800055b

080039f4 <hidh_open>:

//--------------------------------------------------------------------+
// Enumeration
//--------------------------------------------------------------------+

bool hidh_open(uint8_t rhport, uint8_t daddr, tusb_desc_interface_t const* desc_itf, uint16_t max_len) {
 80039f4:	b580      	push	{r7, lr}
 80039f6:	b098      	sub	sp, #96	@ 0x60
 80039f8:	af00      	add	r7, sp, #0
 80039fa:	603a      	str	r2, [r7, #0]
 80039fc:	461a      	mov	r2, r3
 80039fe:	4603      	mov	r3, r0
 8003a00:	71fb      	strb	r3, [r7, #7]
 8003a02:	460b      	mov	r3, r1
 8003a04:	71bb      	strb	r3, [r7, #6]
 8003a06:	4613      	mov	r3, r2
 8003a08:	80bb      	strh	r3, [r7, #4]
  (void) rhport;
  (void) max_len;

  TU_VERIFY(TUSB_CLASS_HID == desc_itf->bInterfaceClass);
 8003a0a:	683b      	ldr	r3, [r7, #0]
 8003a0c:	795b      	ldrb	r3, [r3, #5]
 8003a0e:	2b03      	cmp	r3, #3
 8003a10:	d001      	beq.n	8003a16 <hidh_open+0x22>
 8003a12:	2300      	movs	r3, #0
 8003a14:	e0d5      	b.n	8003bc2 <hidh_open+0x1ce>
  TU_LOG_DRV("[%u] HID opening Interface %u\r\n", daddr, desc_itf->bInterfaceNumber);

  // len = interface + hid + n*endpoints
  uint16_t const drv_len = (uint16_t) (sizeof(tusb_desc_interface_t) + sizeof(tusb_hid_descriptor_hid_t) +
                                       desc_itf->bNumEndpoints * sizeof(tusb_desc_endpoint_t));
 8003a16:	683b      	ldr	r3, [r7, #0]
 8003a18:	791b      	ldrb	r3, [r3, #4]
 8003a1a:	461a      	mov	r2, r3
 8003a1c:	00d2      	lsls	r2, r2, #3
 8003a1e:	1ad3      	subs	r3, r2, r3
 8003a20:	b29b      	uxth	r3, r3
  uint16_t const drv_len = (uint16_t) (sizeof(tusb_desc_interface_t) + sizeof(tusb_hid_descriptor_hid_t) +
 8003a22:	3312      	adds	r3, #18
 8003a24:	f8a7 3052 	strh.w	r3, [r7, #82]	@ 0x52
  TU_ASSERT(max_len >= drv_len);
 8003a28:	88ba      	ldrh	r2, [r7, #4]
 8003a2a:	f8b7 3052 	ldrh.w	r3, [r7, #82]	@ 0x52
 8003a2e:	429a      	cmp	r2, r3
 8003a30:	d20a      	bcs.n	8003a48 <hidh_open+0x54>
 8003a32:	4b66      	ldr	r3, [pc, #408]	@ (8003bcc <hidh_open+0x1d8>)
 8003a34:	637b      	str	r3, [r7, #52]	@ 0x34
 8003a36:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	f003 0301 	and.w	r3, r3, #1
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	d000      	beq.n	8003a44 <hidh_open+0x50>
 8003a42:	be00      	bkpt	0x0000
 8003a44:	2300      	movs	r3, #0
 8003a46:	e0bc      	b.n	8003bc2 <hidh_open+0x1ce>
  uint8_t const* p_desc = (uint8_t const*) desc_itf;
 8003a48:	683b      	ldr	r3, [r7, #0]
 8003a4a:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8003a4c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003a4e:	633b      	str	r3, [r7, #48]	@ 0x30
// Descriptor helper
//--------------------------------------------------------------------+

// return next descriptor
TU_ATTR_ALWAYS_INLINE static inline uint8_t const * tu_desc_next(void const* desc) {
  uint8_t const* desc8 = (uint8_t const*) desc;
 8003a50:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003a52:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return desc8 + desc8[DESC_OFFSET_LEN];
 8003a54:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003a56:	781b      	ldrb	r3, [r3, #0]
 8003a58:	461a      	mov	r2, r3
 8003a5a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003a5c:	4413      	add	r3, r2

  //------------- HID descriptor -------------//
  p_desc = tu_desc_next(p_desc);
 8003a5e:	65fb      	str	r3, [r7, #92]	@ 0x5c
  tusb_hid_descriptor_hid_t const* desc_hid = (tusb_hid_descriptor_hid_t const*) p_desc;
 8003a60:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003a62:	64fb      	str	r3, [r7, #76]	@ 0x4c
  TU_ASSERT(HID_DESC_TYPE_HID == desc_hid->bDescriptorType);
 8003a64:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003a66:	785b      	ldrb	r3, [r3, #1]
 8003a68:	2b21      	cmp	r3, #33	@ 0x21
 8003a6a:	d00a      	beq.n	8003a82 <hidh_open+0x8e>
 8003a6c:	4b57      	ldr	r3, [pc, #348]	@ (8003bcc <hidh_open+0x1d8>)
 8003a6e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003a70:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	f003 0301 	and.w	r3, r3, #1
 8003a78:	2b00      	cmp	r3, #0
 8003a7a:	d000      	beq.n	8003a7e <hidh_open+0x8a>
 8003a7c:	be00      	bkpt	0x0000
 8003a7e:	2300      	movs	r3, #0
 8003a80:	e09f      	b.n	8003bc2 <hidh_open+0x1ce>

  hidh_interface_t* p_hid = find_new_itf();
 8003a82:	f7ff fda1 	bl	80035c8 <find_new_itf>
 8003a86:	64b8      	str	r0, [r7, #72]	@ 0x48
  TU_ASSERT(p_hid); // not enough interface, try to increase CFG_TUH_HID
 8003a88:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	d10a      	bne.n	8003aa4 <hidh_open+0xb0>
 8003a8e:	4b4f      	ldr	r3, [pc, #316]	@ (8003bcc <hidh_open+0x1d8>)
 8003a90:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003a92:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	f003 0301 	and.w	r3, r3, #1
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	d000      	beq.n	8003aa0 <hidh_open+0xac>
 8003a9e:	be00      	bkpt	0x0000
 8003aa0:	2300      	movs	r3, #0
 8003aa2:	e08e      	b.n	8003bc2 <hidh_open+0x1ce>
  p_hid->daddr = daddr;
 8003aa4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003aa6:	79ba      	ldrb	r2, [r7, #6]
 8003aa8:	701a      	strb	r2, [r3, #0]
 8003aaa:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003aac:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint8_t const* desc8 = (uint8_t const*) desc;
 8003aae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003ab0:	627b      	str	r3, [r7, #36]	@ 0x24
  return desc8 + desc8[DESC_OFFSET_LEN];
 8003ab2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ab4:	781b      	ldrb	r3, [r3, #0]
 8003ab6:	461a      	mov	r2, r3
 8003ab8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003aba:	4413      	add	r3, r2

  //------------- Endpoint Descriptors -------------//
  p_desc = tu_desc_next(p_desc);
 8003abc:	65fb      	str	r3, [r7, #92]	@ 0x5c
  tusb_desc_endpoint_t const* desc_ep = (tusb_desc_endpoint_t const*) p_desc;
 8003abe:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003ac0:	65bb      	str	r3, [r7, #88]	@ 0x58

  for (int i = 0; i < desc_itf->bNumEndpoints; i++) {
 8003ac2:	2300      	movs	r3, #0
 8003ac4:	657b      	str	r3, [r7, #84]	@ 0x54
 8003ac6:	e05a      	b.n	8003b7e <hidh_open+0x18a>
    TU_ASSERT(TUSB_DESC_ENDPOINT == desc_ep->bDescriptorType);
 8003ac8:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003aca:	785b      	ldrb	r3, [r3, #1]
 8003acc:	2b05      	cmp	r3, #5
 8003ace:	d00a      	beq.n	8003ae6 <hidh_open+0xf2>
 8003ad0:	4b3e      	ldr	r3, [pc, #248]	@ (8003bcc <hidh_open+0x1d8>)
 8003ad2:	643b      	str	r3, [r7, #64]	@ 0x40
 8003ad4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	f003 0301 	and.w	r3, r3, #1
 8003adc:	2b00      	cmp	r3, #0
 8003ade:	d000      	beq.n	8003ae2 <hidh_open+0xee>
 8003ae0:	be00      	bkpt	0x0000
 8003ae2:	2300      	movs	r3, #0
 8003ae4:	e06d      	b.n	8003bc2 <hidh_open+0x1ce>
    TU_ASSERT(tuh_edpt_open(daddr, desc_ep));
 8003ae6:	79bb      	ldrb	r3, [r7, #6]
 8003ae8:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8003aea:	4618      	mov	r0, r3
 8003aec:	f001 fb82 	bl	80051f4 <tuh_edpt_open>
 8003af0:	4603      	mov	r3, r0
 8003af2:	f083 0301 	eor.w	r3, r3, #1
 8003af6:	b2db      	uxtb	r3, r3
 8003af8:	2b00      	cmp	r3, #0
 8003afa:	d00a      	beq.n	8003b12 <hidh_open+0x11e>
 8003afc:	4b33      	ldr	r3, [pc, #204]	@ (8003bcc <hidh_open+0x1d8>)
 8003afe:	647b      	str	r3, [r7, #68]	@ 0x44
 8003b00:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	f003 0301 	and.w	r3, r3, #1
 8003b08:	2b00      	cmp	r3, #0
 8003b0a:	d000      	beq.n	8003b0e <hidh_open+0x11a>
 8003b0c:	be00      	bkpt	0x0000
 8003b0e:	2300      	movs	r3, #0
 8003b10:	e057      	b.n	8003bc2 <hidh_open+0x1ce>

    if (tu_edpt_dir(desc_ep->bEndpointAddress) == TUSB_DIR_IN) {
 8003b12:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003b14:	789b      	ldrb	r3, [r3, #2]
 8003b16:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003b1a:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8003b1e:	09db      	lsrs	r3, r3, #7
 8003b20:	b2db      	uxtb	r3, r3
 8003b22:	2b01      	cmp	r3, #1
 8003b24:	d10e      	bne.n	8003b44 <hidh_open+0x150>
      p_hid->ep_in = desc_ep->bEndpointAddress;
 8003b26:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003b28:	789a      	ldrb	r2, [r3, #2]
 8003b2a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003b2c:	709a      	strb	r2, [r3, #2]
 8003b2e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003b30:	61fb      	str	r3, [r7, #28]
TU_ATTR_ALWAYS_INLINE static inline uint8_t tu_edpt_addr(uint8_t num, uint8_t dir) {
  return (uint8_t)(num | (dir ? TUSB_DIR_IN_MASK : 0));
}

TU_ATTR_ALWAYS_INLINE static inline uint16_t tu_edpt_packet_size(tusb_desc_endpoint_t const* desc_ep) {
  return tu_le16toh(desc_ep->wMaxPacketSize) & 0x7FF;
 8003b32:	69fb      	ldr	r3, [r7, #28]
 8003b34:	889b      	ldrh	r3, [r3, #4]
 8003b36:	b29b      	uxth	r3, r3
 8003b38:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003b3c:	b29a      	uxth	r2, r3
      p_hid->epin_size = tu_edpt_packet_size(desc_ep);
 8003b3e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003b40:	815a      	strh	r2, [r3, #10]
 8003b42:	e00d      	b.n	8003b60 <hidh_open+0x16c>
    } else {
      p_hid->ep_out = desc_ep->bEndpointAddress;
 8003b44:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003b46:	789a      	ldrb	r2, [r3, #2]
 8003b48:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003b4a:	70da      	strb	r2, [r3, #3]
 8003b4c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003b4e:	61bb      	str	r3, [r7, #24]
 8003b50:	69bb      	ldr	r3, [r7, #24]
 8003b52:	889b      	ldrh	r3, [r3, #4]
 8003b54:	b29b      	uxth	r3, r3
 8003b56:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003b5a:	b29a      	uxth	r2, r3
      p_hid->epout_size = tu_edpt_packet_size(desc_ep);
 8003b5c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003b5e:	819a      	strh	r2, [r3, #12]
 8003b60:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003b62:	617b      	str	r3, [r7, #20]
  uint8_t const* desc8 = (uint8_t const*) desc;
 8003b64:	697b      	ldr	r3, [r7, #20]
 8003b66:	613b      	str	r3, [r7, #16]
  return desc8 + desc8[DESC_OFFSET_LEN];
 8003b68:	693b      	ldr	r3, [r7, #16]
 8003b6a:	781b      	ldrb	r3, [r3, #0]
 8003b6c:	461a      	mov	r2, r3
 8003b6e:	693b      	ldr	r3, [r7, #16]
 8003b70:	4413      	add	r3, r2
    }

    p_desc = tu_desc_next(p_desc);
 8003b72:	65fb      	str	r3, [r7, #92]	@ 0x5c
    desc_ep = (tusb_desc_endpoint_t const*) p_desc;
 8003b74:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003b76:	65bb      	str	r3, [r7, #88]	@ 0x58
  for (int i = 0; i < desc_itf->bNumEndpoints; i++) {
 8003b78:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003b7a:	3301      	adds	r3, #1
 8003b7c:	657b      	str	r3, [r7, #84]	@ 0x54
 8003b7e:	683b      	ldr	r3, [r7, #0]
 8003b80:	791b      	ldrb	r3, [r3, #4]
 8003b82:	461a      	mov	r2, r3
 8003b84:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003b86:	4293      	cmp	r3, r2
 8003b88:	db9e      	blt.n	8003ac8 <hidh_open+0xd4>
  }

  p_hid->itf_num = desc_itf->bInterfaceNumber;
 8003b8a:	683b      	ldr	r3, [r7, #0]
 8003b8c:	789a      	ldrb	r2, [r3, #2]
 8003b8e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003b90:	705a      	strb	r2, [r3, #1]

  // Assume bNumDescriptors = 1
  p_hid->report_desc_type = desc_hid->bReportType;
 8003b92:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003b94:	799a      	ldrb	r2, [r3, #6]
 8003b96:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003b98:	71da      	strb	r2, [r3, #7]
  p_hid->report_desc_len = tu_unaligned_read16(&desc_hid->wReportLength);
 8003b9a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003b9c:	3307      	adds	r3, #7
 8003b9e:	60fb      	str	r3, [r7, #12]
  return *((uint16_t const *) mem);
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	881a      	ldrh	r2, [r3, #0]
 8003ba4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003ba6:	811a      	strh	r2, [r3, #8]

  // Per HID Specs: default is Report protocol, though we will force Boot protocol when set_config
  p_hid->protocol_mode = _hidh_default_protocol;
 8003ba8:	4b09      	ldr	r3, [pc, #36]	@ (8003bd0 <hidh_open+0x1dc>)
 8003baa:	781a      	ldrb	r2, [r3, #0]
 8003bac:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003bae:	719a      	strb	r2, [r3, #6]
  if (HID_SUBCLASS_BOOT == desc_itf->bInterfaceSubClass) {
 8003bb0:	683b      	ldr	r3, [r7, #0]
 8003bb2:	799b      	ldrb	r3, [r3, #6]
 8003bb4:	2b01      	cmp	r3, #1
 8003bb6:	d103      	bne.n	8003bc0 <hidh_open+0x1cc>
    p_hid->itf_protocol = desc_itf->bInterfaceProtocol;
 8003bb8:	683b      	ldr	r3, [r7, #0]
 8003bba:	79da      	ldrb	r2, [r3, #7]
 8003bbc:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003bbe:	715a      	strb	r2, [r3, #5]
  }

  return true;
 8003bc0:	2301      	movs	r3, #1
}
 8003bc2:	4618      	mov	r0, r3
 8003bc4:	3760      	adds	r7, #96	@ 0x60
 8003bc6:	46bd      	mov	sp, r7
 8003bc8:	bd80      	pop	{r7, pc}
 8003bca:	bf00      	nop
 8003bcc:	e000edf0 	.word	0xe000edf0
 8003bd0:	20000988 	.word	0x20000988

08003bd4 <hidh_set_config>:
};

static void config_driver_mount_complete(uint8_t daddr, uint8_t idx, uint8_t const* desc_report, uint16_t desc_len);
static void process_set_config(tuh_xfer_t* xfer);

bool hidh_set_config(uint8_t daddr, uint8_t itf_num) {
 8003bd4:	b580      	push	{r7, lr}
 8003bd6:	b08a      	sub	sp, #40	@ 0x28
 8003bd8:	af00      	add	r7, sp, #0
 8003bda:	4603      	mov	r3, r0
 8003bdc:	460a      	mov	r2, r1
 8003bde:	71fb      	strb	r3, [r7, #7]
 8003be0:	4613      	mov	r3, r2
 8003be2:	71bb      	strb	r3, [r7, #6]
  tusb_control_request_t request;
  request.wIndex = tu_htole16((uint16_t) itf_num);
 8003be4:	79bb      	ldrb	r3, [r7, #6]
 8003be6:	b29b      	uxth	r3, r3
 8003be8:	84bb      	strh	r3, [r7, #36]	@ 0x24

  tuh_xfer_t xfer;
  xfer.daddr = daddr;
 8003bea:	79fb      	ldrb	r3, [r7, #7]
 8003bec:	723b      	strb	r3, [r7, #8]
  xfer.result = XFER_RESULT_SUCCESS;
 8003bee:	2300      	movs	r3, #0
 8003bf0:	72fb      	strb	r3, [r7, #11]
  xfer.setup = &request;
 8003bf2:	f107 0320 	add.w	r3, r7, #32
 8003bf6:	613b      	str	r3, [r7, #16]
  xfer.user_data = CONFG_SET_IDLE;
 8003bf8:	2300      	movs	r3, #0
 8003bfa:	61fb      	str	r3, [r7, #28]

  // fake request to kick-off the set config process
  process_set_config(&xfer);
 8003bfc:	f107 0308 	add.w	r3, r7, #8
 8003c00:	4618      	mov	r0, r3
 8003c02:	f000 f805 	bl	8003c10 <process_set_config>

  return true;
 8003c06:	2301      	movs	r3, #1
}
 8003c08:	4618      	mov	r0, r3
 8003c0a:	3728      	adds	r7, #40	@ 0x28
 8003c0c:	46bd      	mov	sp, r7
 8003c0e:	bd80      	pop	{r7, pc}

08003c10 <process_set_config>:

static void process_set_config(tuh_xfer_t* xfer) {
 8003c10:	b5b0      	push	{r4, r5, r7, lr}
 8003c12:	b090      	sub	sp, #64	@ 0x40
 8003c14:	af04      	add	r7, sp, #16
 8003c16:	6078      	str	r0, [r7, #4]
  // Stall is a valid response for SET_IDLE, sometime SET_PROTOCOL as well
  // therefore we could ignore its result
  if (!(xfer->setup->bRequest == HID_REQ_CONTROL_SET_IDLE ||
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	689b      	ldr	r3, [r3, #8]
 8003c1c:	785b      	ldrb	r3, [r3, #1]
 8003c1e:	2b0a      	cmp	r3, #10
 8003c20:	d013      	beq.n	8003c4a <process_set_config+0x3a>
        xfer->setup->bRequest == HID_REQ_CONTROL_SET_PROTOCOL)) {
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	689b      	ldr	r3, [r3, #8]
 8003c26:	785b      	ldrb	r3, [r3, #1]
  if (!(xfer->setup->bRequest == HID_REQ_CONTROL_SET_IDLE ||
 8003c28:	2b0b      	cmp	r3, #11
 8003c2a:	d00e      	beq.n	8003c4a <process_set_config+0x3a>
    TU_ASSERT(xfer->result == XFER_RESULT_SUCCESS,);
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	78db      	ldrb	r3, [r3, #3]
 8003c30:	2b00      	cmp	r3, #0
 8003c32:	d00a      	beq.n	8003c4a <process_set_config+0x3a>
 8003c34:	4b5c      	ldr	r3, [pc, #368]	@ (8003da8 <process_set_config+0x198>)
 8003c36:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003c38:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	f003 0301 	and.w	r3, r3, #1
 8003c40:	2b00      	cmp	r3, #0
 8003c42:	f000 80ab 	beq.w	8003d9c <process_set_config+0x18c>
 8003c46:	be00      	bkpt	0x0000
 8003c48:	e0a8      	b.n	8003d9c <process_set_config+0x18c>
  }

  uintptr_t const state = xfer->user_data;
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	695b      	ldr	r3, [r3, #20]
 8003c4e:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint8_t const itf_num = (uint8_t) tu_le16toh(xfer->setup->wIndex);
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	689b      	ldr	r3, [r3, #8]
 8003c54:	889b      	ldrh	r3, [r3, #4]
 8003c56:	b29b      	uxth	r3, r3
 8003c58:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint8_t const daddr = xfer->daddr;
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	781b      	ldrb	r3, [r3, #0]
 8003c60:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26

  uint8_t const idx = tuh_hid_itf_get_index(daddr, itf_num);
 8003c64:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 8003c68:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8003c6c:	4611      	mov	r1, r2
 8003c6e:	4618      	mov	r0, r3
 8003c70:	f7ff fcd2 	bl	8003618 <tuh_hid_itf_get_index>
 8003c74:	4603      	mov	r3, r0
 8003c76:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
 8003c7a:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8003c7e:	74fb      	strb	r3, [r7, #19]
 8003c80:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8003c84:	74bb      	strb	r3, [r7, #18]
  TU_ASSERT(daddr > 0 && idx < CFG_TUH_HID, NULL);
 8003c86:	7cfb      	ldrb	r3, [r7, #19]
 8003c88:	2b00      	cmp	r3, #0
 8003c8a:	d002      	beq.n	8003c92 <process_set_config+0x82>
 8003c8c:	7cbb      	ldrb	r3, [r7, #18]
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	d00a      	beq.n	8003ca8 <process_set_config+0x98>
 8003c92:	4b45      	ldr	r3, [pc, #276]	@ (8003da8 <process_set_config+0x198>)
 8003c94:	60fb      	str	r3, [r7, #12]
 8003c96:	68fb      	ldr	r3, [r7, #12]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	f003 0301 	and.w	r3, r3, #1
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	d000      	beq.n	8003ca4 <process_set_config+0x94>
 8003ca2:	be00      	bkpt	0x0000
 8003ca4:	2300      	movs	r3, #0
 8003ca6:	e00f      	b.n	8003cc8 <process_set_config+0xb8>
  hidh_interface_t* p_hid = &_hidh_itf[idx];
 8003ca8:	7cba      	ldrb	r2, [r7, #18]
 8003caa:	4613      	mov	r3, r2
 8003cac:	00db      	lsls	r3, r3, #3
 8003cae:	1a9b      	subs	r3, r3, r2
 8003cb0:	005b      	lsls	r3, r3, #1
 8003cb2:	4a3e      	ldr	r2, [pc, #248]	@ (8003dac <process_set_config+0x19c>)
 8003cb4:	4413      	add	r3, r2
 8003cb6:	60bb      	str	r3, [r7, #8]
  return (p_hid->daddr == daddr) ? p_hid : NULL;
 8003cb8:	68bb      	ldr	r3, [r7, #8]
 8003cba:	781b      	ldrb	r3, [r3, #0]
 8003cbc:	7cfa      	ldrb	r2, [r7, #19]
 8003cbe:	429a      	cmp	r2, r3
 8003cc0:	d101      	bne.n	8003cc6 <process_set_config+0xb6>
 8003cc2:	68bb      	ldr	r3, [r7, #8]
 8003cc4:	e000      	b.n	8003cc8 <process_set_config+0xb8>
 8003cc6:	2300      	movs	r3, #0
  hidh_interface_t* p_hid = get_hid_itf(daddr, idx);
 8003cc8:	623b      	str	r3, [r7, #32]
  TU_VERIFY(p_hid,);
 8003cca:	6a3b      	ldr	r3, [r7, #32]
 8003ccc:	2b00      	cmp	r3, #0
 8003cce:	d068      	beq.n	8003da2 <process_set_config+0x192>

  switch (state) {
 8003cd0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003cd2:	2b03      	cmp	r3, #3
 8003cd4:	d864      	bhi.n	8003da0 <process_set_config+0x190>
 8003cd6:	a201      	add	r2, pc, #4	@ (adr r2, 8003cdc <process_set_config+0xcc>)
 8003cd8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003cdc:	08003ced 	.word	0x08003ced
 8003ce0:	08003d17 	.word	0x08003d17
 8003ce4:	08003d2f 	.word	0x08003d2f
 8003ce8:	08003d77 	.word	0x08003d77
    case CONFG_SET_IDLE: {
      // Idle rate = 0 mean only report when there is changes
      const uint16_t idle_rate = 0;
 8003cec:	2300      	movs	r3, #0
 8003cee:	833b      	strh	r3, [r7, #24]
      const uintptr_t next_state = (p_hid->itf_protocol != HID_ITF_PROTOCOL_NONE)
 8003cf0:	6a3b      	ldr	r3, [r7, #32]
 8003cf2:	795b      	ldrb	r3, [r3, #5]
                                   ? CONFIG_SET_PROTOCOL : CONFIG_GET_REPORT_DESC;
 8003cf4:	2b00      	cmp	r3, #0
 8003cf6:	d001      	beq.n	8003cfc <process_set_config+0xec>
 8003cf8:	2301      	movs	r3, #1
 8003cfa:	e000      	b.n	8003cfe <process_set_config+0xee>
 8003cfc:	2302      	movs	r3, #2
      const uintptr_t next_state = (p_hid->itf_protocol != HID_ITF_PROTOCOL_NONE)
 8003cfe:	617b      	str	r3, [r7, #20]
      _hidh_set_idle(daddr, itf_num, idle_rate, process_set_config, next_state);
 8003d00:	8b3a      	ldrh	r2, [r7, #24]
 8003d02:	f897 1027 	ldrb.w	r1, [r7, #39]	@ 0x27
 8003d06:	f897 0026 	ldrb.w	r0, [r7, #38]	@ 0x26
 8003d0a:	697b      	ldr	r3, [r7, #20]
 8003d0c:	9300      	str	r3, [sp, #0]
 8003d0e:	4b28      	ldr	r3, [pc, #160]	@ (8003db0 <process_set_config+0x1a0>)
 8003d10:	f7ff fcf5 	bl	80036fe <_hidh_set_idle>
      break;
 8003d14:	e045      	b.n	8003da2 <process_set_config+0x192>
    }

    case CONFIG_SET_PROTOCOL:
      _hidh_set_protocol(daddr, p_hid->itf_num, _hidh_default_protocol, process_set_config, CONFIG_GET_REPORT_DESC);
 8003d16:	6a3b      	ldr	r3, [r7, #32]
 8003d18:	7859      	ldrb	r1, [r3, #1]
 8003d1a:	4b26      	ldr	r3, [pc, #152]	@ (8003db4 <process_set_config+0x1a4>)
 8003d1c:	781a      	ldrb	r2, [r3, #0]
 8003d1e:	f897 0026 	ldrb.w	r0, [r7, #38]	@ 0x26
 8003d22:	2302      	movs	r3, #2
 8003d24:	9300      	str	r3, [sp, #0]
 8003d26:	4b22      	ldr	r3, [pc, #136]	@ (8003db0 <process_set_config+0x1a0>)
 8003d28:	f7ff fca4 	bl	8003674 <_hidh_set_protocol>
      break;
 8003d2c:	e039      	b.n	8003da2 <process_set_config+0x192>

    case CONFIG_GET_REPORT_DESC:
      // Get Report Descriptor if possible
      // using usbh enumeration buffer since report descriptor can be very long
      if (p_hid->report_desc_len > CFG_TUH_ENUMERATION_BUFSIZE) {
 8003d2e:	6a3b      	ldr	r3, [r7, #32]
 8003d30:	891b      	ldrh	r3, [r3, #8]
 8003d32:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003d36:	d908      	bls.n	8003d4a <process_set_config+0x13a>
        TU_LOG_DRV("HID Skip Report Descriptor since it is too large %u bytes\r\n", p_hid->report_desc_len);

        // Driver is mounted without report descriptor
        config_driver_mount_complete(daddr, idx, NULL, 0);
 8003d38:	f897 1025 	ldrb.w	r1, [r7, #37]	@ 0x25
 8003d3c:	f897 0026 	ldrb.w	r0, [r7, #38]	@ 0x26
 8003d40:	2300      	movs	r3, #0
 8003d42:	2200      	movs	r2, #0
 8003d44:	f000 f838 	bl	8003db8 <config_driver_mount_complete>
      } else {
        tuh_descriptor_get_hid_report(daddr, itf_num, p_hid->report_desc_type, 0,
                                      usbh_get_enum_buf(), p_hid->report_desc_len,
                                      process_set_config, CONFIG_COMPLETE);
      }
      break;
 8003d48:	e02b      	b.n	8003da2 <process_set_config+0x192>
        tuh_descriptor_get_hid_report(daddr, itf_num, p_hid->report_desc_type, 0,
 8003d4a:	6a3b      	ldr	r3, [r7, #32]
 8003d4c:	79dc      	ldrb	r4, [r3, #7]
                                      usbh_get_enum_buf(), p_hid->report_desc_len,
 8003d4e:	f001 f8ef 	bl	8004f30 <usbh_get_enum_buf>
 8003d52:	4602      	mov	r2, r0
        tuh_descriptor_get_hid_report(daddr, itf_num, p_hid->report_desc_type, 0,
 8003d54:	6a3b      	ldr	r3, [r7, #32]
 8003d56:	891b      	ldrh	r3, [r3, #8]
 8003d58:	f897 1027 	ldrb.w	r1, [r7, #39]	@ 0x27
 8003d5c:	f897 0026 	ldrb.w	r0, [r7, #38]	@ 0x26
 8003d60:	2503      	movs	r5, #3
 8003d62:	9503      	str	r5, [sp, #12]
 8003d64:	4d12      	ldr	r5, [pc, #72]	@ (8003db0 <process_set_config+0x1a0>)
 8003d66:	9502      	str	r5, [sp, #8]
 8003d68:	9301      	str	r3, [sp, #4]
 8003d6a:	9200      	str	r2, [sp, #0]
 8003d6c:	2300      	movs	r3, #0
 8003d6e:	4622      	mov	r2, r4
 8003d70:	f001 fba9 	bl	80054c6 <tuh_descriptor_get_hid_report>
      break;
 8003d74:	e015      	b.n	8003da2 <process_set_config+0x192>

    case CONFIG_COMPLETE: {
      uint8_t const* desc_report = usbh_get_enum_buf();
 8003d76:	f001 f8db 	bl	8004f30 <usbh_get_enum_buf>
 8003d7a:	61f8      	str	r0, [r7, #28]
      uint16_t const desc_len = tu_le16toh(xfer->setup->wLength);
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	689b      	ldr	r3, [r3, #8]
 8003d80:	799a      	ldrb	r2, [r3, #6]
 8003d82:	79db      	ldrb	r3, [r3, #7]
 8003d84:	021b      	lsls	r3, r3, #8
 8003d86:	4313      	orrs	r3, r2
 8003d88:	837b      	strh	r3, [r7, #26]

      config_driver_mount_complete(daddr, idx, desc_report, desc_len);
 8003d8a:	8b7b      	ldrh	r3, [r7, #26]
 8003d8c:	f897 1025 	ldrb.w	r1, [r7, #37]	@ 0x25
 8003d90:	f897 0026 	ldrb.w	r0, [r7, #38]	@ 0x26
 8003d94:	69fa      	ldr	r2, [r7, #28]
 8003d96:	f000 f80f 	bl	8003db8 <config_driver_mount_complete>
      break;
 8003d9a:	e002      	b.n	8003da2 <process_set_config+0x192>
    TU_ASSERT(xfer->result == XFER_RESULT_SUCCESS,);
 8003d9c:	bf00      	nop
 8003d9e:	e000      	b.n	8003da2 <process_set_config+0x192>
    }

    default:
      break;
 8003da0:	bf00      	nop
  }
}
 8003da2:	3730      	adds	r7, #48	@ 0x30
 8003da4:	46bd      	mov	sp, r7
 8003da6:	bdb0      	pop	{r4, r5, r7, pc}
 8003da8:	e000edf0 	.word	0xe000edf0
 8003dac:	200008f8 	.word	0x200008f8
 8003db0:	08003c11 	.word	0x08003c11
 8003db4:	20000988 	.word	0x20000988

08003db8 <config_driver_mount_complete>:

static void config_driver_mount_complete(uint8_t daddr, uint8_t idx, uint8_t const* desc_report, uint16_t desc_len) {
 8003db8:	b580      	push	{r7, lr}
 8003dba:	b086      	sub	sp, #24
 8003dbc:	af00      	add	r7, sp, #0
 8003dbe:	603a      	str	r2, [r7, #0]
 8003dc0:	461a      	mov	r2, r3
 8003dc2:	4603      	mov	r3, r0
 8003dc4:	71fb      	strb	r3, [r7, #7]
 8003dc6:	460b      	mov	r3, r1
 8003dc8:	71bb      	strb	r3, [r7, #6]
 8003dca:	4613      	mov	r3, r2
 8003dcc:	80bb      	strh	r3, [r7, #4]
 8003dce:	79fb      	ldrb	r3, [r7, #7]
 8003dd0:	74fb      	strb	r3, [r7, #19]
 8003dd2:	79bb      	ldrb	r3, [r7, #6]
 8003dd4:	74bb      	strb	r3, [r7, #18]
  TU_ASSERT(daddr > 0 && idx < CFG_TUH_HID, NULL);
 8003dd6:	7cfb      	ldrb	r3, [r7, #19]
 8003dd8:	2b00      	cmp	r3, #0
 8003dda:	d002      	beq.n	8003de2 <config_driver_mount_complete+0x2a>
 8003ddc:	7cbb      	ldrb	r3, [r7, #18]
 8003dde:	2b00      	cmp	r3, #0
 8003de0:	d00a      	beq.n	8003df8 <config_driver_mount_complete+0x40>
 8003de2:	4b1a      	ldr	r3, [pc, #104]	@ (8003e4c <config_driver_mount_complete+0x94>)
 8003de4:	60fb      	str	r3, [r7, #12]
 8003de6:	68fb      	ldr	r3, [r7, #12]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	f003 0301 	and.w	r3, r3, #1
 8003dee:	2b00      	cmp	r3, #0
 8003df0:	d000      	beq.n	8003df4 <config_driver_mount_complete+0x3c>
 8003df2:	be00      	bkpt	0x0000
 8003df4:	2300      	movs	r3, #0
 8003df6:	e00f      	b.n	8003e18 <config_driver_mount_complete+0x60>
  hidh_interface_t* p_hid = &_hidh_itf[idx];
 8003df8:	7cba      	ldrb	r2, [r7, #18]
 8003dfa:	4613      	mov	r3, r2
 8003dfc:	00db      	lsls	r3, r3, #3
 8003dfe:	1a9b      	subs	r3, r3, r2
 8003e00:	005b      	lsls	r3, r3, #1
 8003e02:	4a13      	ldr	r2, [pc, #76]	@ (8003e50 <config_driver_mount_complete+0x98>)
 8003e04:	4413      	add	r3, r2
 8003e06:	60bb      	str	r3, [r7, #8]
  return (p_hid->daddr == daddr) ? p_hid : NULL;
 8003e08:	68bb      	ldr	r3, [r7, #8]
 8003e0a:	781b      	ldrb	r3, [r3, #0]
 8003e0c:	7cfa      	ldrb	r2, [r7, #19]
 8003e0e:	429a      	cmp	r2, r3
 8003e10:	d101      	bne.n	8003e16 <config_driver_mount_complete+0x5e>
 8003e12:	68bb      	ldr	r3, [r7, #8]
 8003e14:	e000      	b.n	8003e18 <config_driver_mount_complete+0x60>
 8003e16:	2300      	movs	r3, #0
  hidh_interface_t* p_hid = get_hid_itf(daddr, idx);
 8003e18:	617b      	str	r3, [r7, #20]
  TU_VERIFY(p_hid,);
 8003e1a:	697b      	ldr	r3, [r7, #20]
 8003e1c:	2b00      	cmp	r3, #0
 8003e1e:	d012      	beq.n	8003e46 <config_driver_mount_complete+0x8e>
  p_hid->mounted = true;
 8003e20:	697b      	ldr	r3, [r7, #20]
 8003e22:	2201      	movs	r2, #1
 8003e24:	711a      	strb	r2, [r3, #4]

  // enumeration is complete
  if (tuh_hid_mount_cb) tuh_hid_mount_cb(daddr, idx, desc_report, desc_len);
 8003e26:	4b0b      	ldr	r3, [pc, #44]	@ (8003e54 <config_driver_mount_complete+0x9c>)
 8003e28:	2b00      	cmp	r3, #0
 8003e2a:	d005      	beq.n	8003e38 <config_driver_mount_complete+0x80>
 8003e2c:	88bb      	ldrh	r3, [r7, #4]
 8003e2e:	79b9      	ldrb	r1, [r7, #6]
 8003e30:	79f8      	ldrb	r0, [r7, #7]
 8003e32:	683a      	ldr	r2, [r7, #0]
 8003e34:	f7fc fb7c 	bl	8000530 <tuh_hid_mount_cb>

  // notify usbh that driver enumeration is complete
  usbh_driver_set_config_complete(daddr, p_hid->itf_num);
 8003e38:	697b      	ldr	r3, [r7, #20]
 8003e3a:	785a      	ldrb	r2, [r3, #1]
 8003e3c:	79fb      	ldrb	r3, [r7, #7]
 8003e3e:	4611      	mov	r1, r2
 8003e40:	4618      	mov	r0, r3
 8003e42:	f002 facd 	bl	80063e0 <usbh_driver_set_config_complete>
}
 8003e46:	3718      	adds	r7, #24
 8003e48:	46bd      	mov	sp, r7
 8003e4a:	bd80      	pop	{r7, pc}
 8003e4c:	e000edf0 	.word	0xe000edf0
 8003e50:	200008f8 	.word	0x200008f8
 8003e54:	08000531 	.word	0x08000531

08003e58 <_ff_push>:
}
#endif

// send one item to fifo WITHOUT updating write pointer
static inline void _ff_push(tu_fifo_t* f, void const * app_buf, uint16_t rel)
{
 8003e58:	b580      	push	{r7, lr}
 8003e5a:	b084      	sub	sp, #16
 8003e5c:	af00      	add	r7, sp, #0
 8003e5e:	60f8      	str	r0, [r7, #12]
 8003e60:	60b9      	str	r1, [r7, #8]
 8003e62:	4613      	mov	r3, r2
 8003e64:	80fb      	strh	r3, [r7, #6]
  memcpy(f->buffer + (rel * f->item_size), app_buf, f->item_size);
 8003e66:	68fb      	ldr	r3, [r7, #12]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	88fa      	ldrh	r2, [r7, #6]
 8003e6c:	68f9      	ldr	r1, [r7, #12]
 8003e6e:	88c9      	ldrh	r1, [r1, #6]
 8003e70:	f3c1 010e 	ubfx	r1, r1, #0, #15
 8003e74:	b289      	uxth	r1, r1
 8003e76:	fb01 f202 	mul.w	r2, r1, r2
 8003e7a:	1898      	adds	r0, r3, r2
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	88db      	ldrh	r3, [r3, #6]
 8003e80:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8003e84:	b29b      	uxth	r3, r3
 8003e86:	461a      	mov	r2, r3
 8003e88:	68b9      	ldr	r1, [r7, #8]
 8003e8a:	f004 f90d 	bl	80080a8 <memcpy>
}
 8003e8e:	bf00      	nop
 8003e90:	3710      	adds	r7, #16
 8003e92:	46bd      	mov	sp, r7
 8003e94:	bd80      	pop	{r7, pc}

08003e96 <_ff_pull>:
  }
}

// get one item from fifo WITHOUT updating read pointer
static inline void _ff_pull(tu_fifo_t* f, void * app_buf, uint16_t rel)
{
 8003e96:	b580      	push	{r7, lr}
 8003e98:	b084      	sub	sp, #16
 8003e9a:	af00      	add	r7, sp, #0
 8003e9c:	60f8      	str	r0, [r7, #12]
 8003e9e:	60b9      	str	r1, [r7, #8]
 8003ea0:	4613      	mov	r3, r2
 8003ea2:	80fb      	strh	r3, [r7, #6]
  memcpy(app_buf, f->buffer + (rel * f->item_size), f->item_size);
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	88fa      	ldrh	r2, [r7, #6]
 8003eaa:	68f9      	ldr	r1, [r7, #12]
 8003eac:	88c9      	ldrh	r1, [r1, #6]
 8003eae:	f3c1 010e 	ubfx	r1, r1, #0, #15
 8003eb2:	b289      	uxth	r1, r1
 8003eb4:	fb01 f202 	mul.w	r2, r1, r2
 8003eb8:	1899      	adds	r1, r3, r2
 8003eba:	68fb      	ldr	r3, [r7, #12]
 8003ebc:	88db      	ldrh	r3, [r3, #6]
 8003ebe:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8003ec2:	b29b      	uxth	r3, r3
 8003ec4:	461a      	mov	r2, r3
 8003ec6:	68b8      	ldr	r0, [r7, #8]
 8003ec8:	f004 f8ee 	bl	80080a8 <memcpy>
}
 8003ecc:	bf00      	nop
 8003ece:	3710      	adds	r7, #16
 8003ed0:	46bd      	mov	sp, r7
 8003ed2:	bd80      	pop	{r7, pc}

08003ed4 <advance_index>:
//--------------------------------------------------------------------+

// Advance an absolute index
// "absolute" index is only in the range of [0..2*depth)
static uint16_t advance_index(uint16_t depth, uint16_t idx, uint16_t offset)
{
 8003ed4:	b480      	push	{r7}
 8003ed6:	b085      	sub	sp, #20
 8003ed8:	af00      	add	r7, sp, #0
 8003eda:	4603      	mov	r3, r0
 8003edc:	80fb      	strh	r3, [r7, #6]
 8003ede:	460b      	mov	r3, r1
 8003ee0:	80bb      	strh	r3, [r7, #4]
 8003ee2:	4613      	mov	r3, r2
 8003ee4:	807b      	strh	r3, [r7, #2]
  // We limit the index space of p such that a correct wrap around happens
  // Check for a wrap around or if we are in unused index space - This has to be checked first!!
  // We are exploiting the wrap around to the correct index
  uint16_t new_idx = (uint16_t) (idx + offset);
 8003ee6:	88ba      	ldrh	r2, [r7, #4]
 8003ee8:	887b      	ldrh	r3, [r7, #2]
 8003eea:	4413      	add	r3, r2
 8003eec:	81fb      	strh	r3, [r7, #14]
  if ( (idx > new_idx) || (new_idx >= 2*depth) )
 8003eee:	88ba      	ldrh	r2, [r7, #4]
 8003ef0:	89fb      	ldrh	r3, [r7, #14]
 8003ef2:	429a      	cmp	r2, r3
 8003ef4:	d804      	bhi.n	8003f00 <advance_index+0x2c>
 8003ef6:	89fa      	ldrh	r2, [r7, #14]
 8003ef8:	88fb      	ldrh	r3, [r7, #6]
 8003efa:	005b      	lsls	r3, r3, #1
 8003efc:	429a      	cmp	r2, r3
 8003efe:	db08      	blt.n	8003f12 <advance_index+0x3e>
  {
    uint16_t const non_used_index_space = (uint16_t) (UINT16_MAX - (2*depth-1));
 8003f00:	88fb      	ldrh	r3, [r7, #6]
 8003f02:	005b      	lsls	r3, r3, #1
 8003f04:	b29b      	uxth	r3, r3
 8003f06:	425b      	negs	r3, r3
 8003f08:	81bb      	strh	r3, [r7, #12]
    new_idx = (uint16_t) (new_idx + non_used_index_space);
 8003f0a:	89fa      	ldrh	r2, [r7, #14]
 8003f0c:	89bb      	ldrh	r3, [r7, #12]
 8003f0e:	4413      	add	r3, r2
 8003f10:	81fb      	strh	r3, [r7, #14]
  }

  return new_idx;
 8003f12:	89fb      	ldrh	r3, [r7, #14]
}
 8003f14:	4618      	mov	r0, r3
 8003f16:	3714      	adds	r7, #20
 8003f18:	46bd      	mov	sp, r7
 8003f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f1e:	4770      	bx	lr

08003f20 <_tu_fifo_peek>:
}

// Works on local copies of w and r
// Must be protected by mutexes since in case of an overflow read pointer gets modified
static bool _tu_fifo_peek(tu_fifo_t* f, void * p_buffer, uint16_t wr_idx, uint16_t rd_idx)
{
 8003f20:	b580      	push	{r7, lr}
 8003f22:	b08a      	sub	sp, #40	@ 0x28
 8003f24:	af00      	add	r7, sp, #0
 8003f26:	60f8      	str	r0, [r7, #12]
 8003f28:	60b9      	str	r1, [r7, #8]
 8003f2a:	4611      	mov	r1, r2
 8003f2c:	461a      	mov	r2, r3
 8003f2e:	460b      	mov	r3, r1
 8003f30:	80fb      	strh	r3, [r7, #6]
 8003f32:	4613      	mov	r3, r2
 8003f34:	80bb      	strh	r3, [r7, #4]
  uint16_t cnt = _ff_count(f->depth, wr_idx, rd_idx);
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	889b      	ldrh	r3, [r3, #4]
 8003f3a:	847b      	strh	r3, [r7, #34]	@ 0x22
 8003f3c:	88fb      	ldrh	r3, [r7, #6]
 8003f3e:	843b      	strh	r3, [r7, #32]
 8003f40:	88bb      	ldrh	r3, [r7, #4]
 8003f42:	83fb      	strh	r3, [r7, #30]
  if (wr_idx >= rd_idx)
 8003f44:	8c3a      	ldrh	r2, [r7, #32]
 8003f46:	8bfb      	ldrh	r3, [r7, #30]
 8003f48:	429a      	cmp	r2, r3
 8003f4a:	d304      	bcc.n	8003f56 <_tu_fifo_peek+0x36>
    return (uint16_t) (wr_idx - rd_idx);
 8003f4c:	8c3a      	ldrh	r2, [r7, #32]
 8003f4e:	8bfb      	ldrh	r3, [r7, #30]
 8003f50:	1ad3      	subs	r3, r2, r3
 8003f52:	b29b      	uxth	r3, r3
 8003f54:	e008      	b.n	8003f68 <_tu_fifo_peek+0x48>
    return (uint16_t) (2*depth - (rd_idx - wr_idx));
 8003f56:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8003f58:	005b      	lsls	r3, r3, #1
 8003f5a:	b29a      	uxth	r2, r3
 8003f5c:	8c39      	ldrh	r1, [r7, #32]
 8003f5e:	8bfb      	ldrh	r3, [r7, #30]
 8003f60:	1acb      	subs	r3, r1, r3
 8003f62:	b29b      	uxth	r3, r3
 8003f64:	4413      	add	r3, r2
 8003f66:	b29b      	uxth	r3, r3
  uint16_t cnt = _ff_count(f->depth, wr_idx, rd_idx);
 8003f68:	84fb      	strh	r3, [r7, #38]	@ 0x26

  // nothing to peek
  if ( cnt == 0 ) return false;
 8003f6a:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8003f6c:	2b00      	cmp	r3, #0
 8003f6e:	d101      	bne.n	8003f74 <_tu_fifo_peek+0x54>
 8003f70:	2300      	movs	r3, #0
 8003f72:	e037      	b.n	8003fe4 <_tu_fifo_peek+0xc4>

  // Check overflow and correct if required
  if ( cnt > f->depth )
 8003f74:	68fb      	ldr	r3, [r7, #12]
 8003f76:	889b      	ldrh	r3, [r3, #4]
 8003f78:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 8003f7a:	429a      	cmp	r2, r3
 8003f7c:	d91b      	bls.n	8003fb6 <_tu_fifo_peek+0x96>
 8003f7e:	68fb      	ldr	r3, [r7, #12]
 8003f80:	61bb      	str	r3, [r7, #24]
 8003f82:	88fb      	ldrh	r3, [r7, #6]
 8003f84:	82fb      	strh	r3, [r7, #22]
  if ( wr_idx >= f->depth )
 8003f86:	69bb      	ldr	r3, [r7, #24]
 8003f88:	889b      	ldrh	r3, [r3, #4]
 8003f8a:	8afa      	ldrh	r2, [r7, #22]
 8003f8c:	429a      	cmp	r2, r3
 8003f8e:	d305      	bcc.n	8003f9c <_tu_fifo_peek+0x7c>
    rd_idx = wr_idx - f->depth;
 8003f90:	69bb      	ldr	r3, [r7, #24]
 8003f92:	889b      	ldrh	r3, [r3, #4]
 8003f94:	8afa      	ldrh	r2, [r7, #22]
 8003f96:	1ad3      	subs	r3, r2, r3
 8003f98:	82bb      	strh	r3, [r7, #20]
 8003f9a:	e004      	b.n	8003fa6 <_tu_fifo_peek+0x86>
    rd_idx = wr_idx + f->depth;
 8003f9c:	69bb      	ldr	r3, [r7, #24]
 8003f9e:	889a      	ldrh	r2, [r3, #4]
 8003fa0:	8afb      	ldrh	r3, [r7, #22]
 8003fa2:	4413      	add	r3, r2
 8003fa4:	82bb      	strh	r3, [r7, #20]
  f->rd_idx = rd_idx;
 8003fa6:	69bb      	ldr	r3, [r7, #24]
 8003fa8:	8aba      	ldrh	r2, [r7, #20]
 8003faa:	815a      	strh	r2, [r3, #10]
  return rd_idx;
 8003fac:	8abb      	ldrh	r3, [r7, #20]
  {
    rd_idx = _ff_correct_read_index(f, wr_idx);
 8003fae:	80bb      	strh	r3, [r7, #4]
    cnt = f->depth;
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	889b      	ldrh	r3, [r3, #4]
 8003fb4:	84fb      	strh	r3, [r7, #38]	@ 0x26
  }

  uint16_t rd_ptr = idx2ptr(f->depth, rd_idx);
 8003fb6:	68fb      	ldr	r3, [r7, #12]
 8003fb8:	889b      	ldrh	r3, [r3, #4]
 8003fba:	827b      	strh	r3, [r7, #18]
 8003fbc:	88bb      	ldrh	r3, [r7, #4]
 8003fbe:	823b      	strh	r3, [r7, #16]
  while ( idx >= depth ) idx -= depth;
 8003fc0:	e003      	b.n	8003fca <_tu_fifo_peek+0xaa>
 8003fc2:	8a3a      	ldrh	r2, [r7, #16]
 8003fc4:	8a7b      	ldrh	r3, [r7, #18]
 8003fc6:	1ad3      	subs	r3, r2, r3
 8003fc8:	823b      	strh	r3, [r7, #16]
 8003fca:	8a7a      	ldrh	r2, [r7, #18]
 8003fcc:	8a3b      	ldrh	r3, [r7, #16]
 8003fce:	429a      	cmp	r2, r3
 8003fd0:	d9f7      	bls.n	8003fc2 <_tu_fifo_peek+0xa2>
  return idx;
 8003fd2:	8a3b      	ldrh	r3, [r7, #16]
  uint16_t rd_ptr = idx2ptr(f->depth, rd_idx);
 8003fd4:	84bb      	strh	r3, [r7, #36]	@ 0x24

  // Peek data
  _ff_pull(f, p_buffer, rd_ptr);
 8003fd6:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8003fd8:	461a      	mov	r2, r3
 8003fda:	68b9      	ldr	r1, [r7, #8]
 8003fdc:	68f8      	ldr	r0, [r7, #12]
 8003fde:	f7ff ff5a 	bl	8003e96 <_ff_pull>

  return true;
 8003fe2:	2301      	movs	r3, #1
}
 8003fe4:	4618      	mov	r0, r3
 8003fe6:	3728      	adds	r7, #40	@ 0x28
 8003fe8:	46bd      	mov	sp, r7
 8003fea:	bd80      	pop	{r7, pc}

08003fec <tu_fifo_empty>:

    @returns Number of items in FIFO
 */
/******************************************************************************/
bool tu_fifo_empty(tu_fifo_t* f)
{
 8003fec:	b480      	push	{r7}
 8003fee:	b083      	sub	sp, #12
 8003ff0:	af00      	add	r7, sp, #0
 8003ff2:	6078      	str	r0, [r7, #4]
  return f->wr_idx == f->rd_idx;
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	891b      	ldrh	r3, [r3, #8]
 8003ff8:	b29a      	uxth	r2, r3
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	895b      	ldrh	r3, [r3, #10]
 8003ffe:	b29b      	uxth	r3, r3
 8004000:	429a      	cmp	r2, r3
 8004002:	bf0c      	ite	eq
 8004004:	2301      	moveq	r3, #1
 8004006:	2300      	movne	r3, #0
 8004008:	b2db      	uxtb	r3, r3
}
 800400a:	4618      	mov	r0, r3
 800400c:	370c      	adds	r7, #12
 800400e:	46bd      	mov	sp, r7
 8004010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004014:	4770      	bx	lr

08004016 <tu_fifo_full>:

    @returns Number of items in FIFO
 */
/******************************************************************************/
bool tu_fifo_full(tu_fifo_t* f)
{
 8004016:	b480      	push	{r7}
 8004018:	b085      	sub	sp, #20
 800401a:	af00      	add	r7, sp, #0
 800401c:	6078      	str	r0, [r7, #4]
  return _ff_count(f->depth, f->wr_idx, f->rd_idx) >= f->depth;
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	8899      	ldrh	r1, [r3, #4]
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	891b      	ldrh	r3, [r3, #8]
 8004026:	b29a      	uxth	r2, r3
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	895b      	ldrh	r3, [r3, #10]
 800402c:	b29b      	uxth	r3, r3
 800402e:	81f9      	strh	r1, [r7, #14]
 8004030:	81ba      	strh	r2, [r7, #12]
 8004032:	817b      	strh	r3, [r7, #10]
  if (wr_idx >= rd_idx)
 8004034:	89ba      	ldrh	r2, [r7, #12]
 8004036:	897b      	ldrh	r3, [r7, #10]
 8004038:	429a      	cmp	r2, r3
 800403a:	d304      	bcc.n	8004046 <tu_fifo_full+0x30>
    return (uint16_t) (wr_idx - rd_idx);
 800403c:	89ba      	ldrh	r2, [r7, #12]
 800403e:	897b      	ldrh	r3, [r7, #10]
 8004040:	1ad3      	subs	r3, r2, r3
 8004042:	b29b      	uxth	r3, r3
 8004044:	e008      	b.n	8004058 <tu_fifo_full+0x42>
    return (uint16_t) (2*depth - (rd_idx - wr_idx));
 8004046:	89fb      	ldrh	r3, [r7, #14]
 8004048:	005b      	lsls	r3, r3, #1
 800404a:	b29a      	uxth	r2, r3
 800404c:	89b9      	ldrh	r1, [r7, #12]
 800404e:	897b      	ldrh	r3, [r7, #10]
 8004050:	1acb      	subs	r3, r1, r3
 8004052:	b29b      	uxth	r3, r3
 8004054:	4413      	add	r3, r2
 8004056:	b29b      	uxth	r3, r3
  return _ff_count(f->depth, f->wr_idx, f->rd_idx) >= f->depth;
 8004058:	687a      	ldr	r2, [r7, #4]
 800405a:	8892      	ldrh	r2, [r2, #4]
 800405c:	4293      	cmp	r3, r2
 800405e:	bf2c      	ite	cs
 8004060:	2301      	movcs	r3, #1
 8004062:	2300      	movcc	r3, #0
 8004064:	b2db      	uxtb	r3, r3
}
 8004066:	4618      	mov	r0, r3
 8004068:	3714      	adds	r7, #20
 800406a:	46bd      	mov	sp, r7
 800406c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004070:	4770      	bx	lr

08004072 <tu_fifo_read>:

    @returns TRUE if the queue is not empty
 */
/******************************************************************************/
bool tu_fifo_read(tu_fifo_t* f, void * buffer)
{
 8004072:	b580      	push	{r7, lr}
 8004074:	b084      	sub	sp, #16
 8004076:	af00      	add	r7, sp, #0
 8004078:	6078      	str	r0, [r7, #4]
 800407a:	6039      	str	r1, [r7, #0]
  _ff_lock(f->mutex_rd);

  // Peek the data
  // f->rd_idx might get modified in case of an overflow so we can not use a local variable
  bool ret = _tu_fifo_peek(f, buffer, f->wr_idx, f->rd_idx);
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	891b      	ldrh	r3, [r3, #8]
 8004080:	b29a      	uxth	r2, r3
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	895b      	ldrh	r3, [r3, #10]
 8004086:	b29b      	uxth	r3, r3
 8004088:	6839      	ldr	r1, [r7, #0]
 800408a:	6878      	ldr	r0, [r7, #4]
 800408c:	f7ff ff48 	bl	8003f20 <_tu_fifo_peek>
 8004090:	4603      	mov	r3, r0
 8004092:	73fb      	strb	r3, [r7, #15]

  // Advance pointer
  f->rd_idx = advance_index(f->depth, f->rd_idx, ret);
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	8898      	ldrh	r0, [r3, #4]
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	895b      	ldrh	r3, [r3, #10]
 800409c:	b29b      	uxth	r3, r3
 800409e:	7bfa      	ldrb	r2, [r7, #15]
 80040a0:	b292      	uxth	r2, r2
 80040a2:	4619      	mov	r1, r3
 80040a4:	f7ff ff16 	bl	8003ed4 <advance_index>
 80040a8:	4603      	mov	r3, r0
 80040aa:	461a      	mov	r2, r3
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	815a      	strh	r2, [r3, #10]

  _ff_unlock(f->mutex_rd);
  return ret;
 80040b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80040b2:	4618      	mov	r0, r3
 80040b4:	3710      	adds	r7, #16
 80040b6:	46bd      	mov	sp, r7
 80040b8:	bd80      	pop	{r7, pc}

080040ba <tu_fifo_write>:
    @returns TRUE if the data was written to the FIFO (overwrittable
             FIFO will always return TRUE)
 */
/******************************************************************************/
bool tu_fifo_write(tu_fifo_t* f, const void * data)
{
 80040ba:	b580      	push	{r7, lr}
 80040bc:	b086      	sub	sp, #24
 80040be:	af00      	add	r7, sp, #0
 80040c0:	6078      	str	r0, [r7, #4]
 80040c2:	6039      	str	r1, [r7, #0]
  _ff_lock(f->mutex_wr);

  bool ret;
  uint16_t const wr_idx = f->wr_idx;
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	891b      	ldrh	r3, [r3, #8]
 80040c8:	82bb      	strh	r3, [r7, #20]

  if ( tu_fifo_full(f) && !f->overwritable )
 80040ca:	6878      	ldr	r0, [r7, #4]
 80040cc:	f7ff ffa3 	bl	8004016 <tu_fifo_full>
 80040d0:	4603      	mov	r3, r0
 80040d2:	2b00      	cmp	r3, #0
 80040d4:	d00c      	beq.n	80040f0 <tu_fifo_write+0x36>
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	79db      	ldrb	r3, [r3, #7]
 80040da:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 80040de:	b2db      	uxtb	r3, r3
 80040e0:	f083 0301 	eor.w	r3, r3, #1
 80040e4:	b2db      	uxtb	r3, r3
 80040e6:	2b00      	cmp	r3, #0
 80040e8:	d002      	beq.n	80040f0 <tu_fifo_write+0x36>
  {
    ret = false;
 80040ea:	2300      	movs	r3, #0
 80040ec:	75fb      	strb	r3, [r7, #23]
 80040ee:	e022      	b.n	8004136 <tu_fifo_write+0x7c>
  }else
  {
    uint16_t wr_ptr = idx2ptr(f->depth, wr_idx);
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	889b      	ldrh	r3, [r3, #4]
 80040f4:	823b      	strh	r3, [r7, #16]
 80040f6:	8abb      	ldrh	r3, [r7, #20]
 80040f8:	81fb      	strh	r3, [r7, #14]
  while ( idx >= depth ) idx -= depth;
 80040fa:	e003      	b.n	8004104 <tu_fifo_write+0x4a>
 80040fc:	89fa      	ldrh	r2, [r7, #14]
 80040fe:	8a3b      	ldrh	r3, [r7, #16]
 8004100:	1ad3      	subs	r3, r2, r3
 8004102:	81fb      	strh	r3, [r7, #14]
 8004104:	8a3a      	ldrh	r2, [r7, #16]
 8004106:	89fb      	ldrh	r3, [r7, #14]
 8004108:	429a      	cmp	r2, r3
 800410a:	d9f7      	bls.n	80040fc <tu_fifo_write+0x42>
  return idx;
 800410c:	89fb      	ldrh	r3, [r7, #14]
    uint16_t wr_ptr = idx2ptr(f->depth, wr_idx);
 800410e:	827b      	strh	r3, [r7, #18]

    // Write data
    _ff_push(f, data, wr_ptr);
 8004110:	8a7b      	ldrh	r3, [r7, #18]
 8004112:	461a      	mov	r2, r3
 8004114:	6839      	ldr	r1, [r7, #0]
 8004116:	6878      	ldr	r0, [r7, #4]
 8004118:	f7ff fe9e 	bl	8003e58 <_ff_push>

    // Advance pointer
    f->wr_idx = advance_index(f->depth, wr_idx, 1);
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	889b      	ldrh	r3, [r3, #4]
 8004120:	8ab9      	ldrh	r1, [r7, #20]
 8004122:	2201      	movs	r2, #1
 8004124:	4618      	mov	r0, r3
 8004126:	f7ff fed5 	bl	8003ed4 <advance_index>
 800412a:	4603      	mov	r3, r0
 800412c:	461a      	mov	r2, r3
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	811a      	strh	r2, [r3, #8]

    ret = true;
 8004132:	2301      	movs	r3, #1
 8004134:	75fb      	strb	r3, [r7, #23]
  }

  _ff_unlock(f->mutex_wr);

  return ret;
 8004136:	7dfb      	ldrb	r3, [r7, #23]
}
 8004138:	4618      	mov	r0, r3
 800413a:	3718      	adds	r7, #24
 800413c:	46bd      	mov	sp, r7
 800413e:	bd80      	pop	{r7, pc}

08004140 <tu_fifo_clear>:
    @param[in]  f
                Pointer to the FIFO buffer to manipulate
 */
/******************************************************************************/
bool tu_fifo_clear(tu_fifo_t *f)
{
 8004140:	b480      	push	{r7}
 8004142:	b083      	sub	sp, #12
 8004144:	af00      	add	r7, sp, #0
 8004146:	6078      	str	r0, [r7, #4]
  _ff_lock(f->mutex_wr);
  _ff_lock(f->mutex_rd);

  f->rd_idx = 0;
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	2200      	movs	r2, #0
 800414c:	815a      	strh	r2, [r3, #10]
  f->wr_idx = 0;
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	2200      	movs	r2, #0
 8004152:	811a      	strh	r2, [r3, #8]

  _ff_unlock(f->mutex_wr);
  _ff_unlock(f->mutex_rd);
  return true;
 8004154:	2301      	movs	r3, #1
}
 8004156:	4618      	mov	r0, r3
 8004158:	370c      	adds	r7, #12
 800415a:	46bd      	mov	sp, r7
 800415c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004160:	4770      	bx	lr

08004162 <tuh_enum_descriptor_device_cb>:
TU_ATTR_WEAK bool hcd_configure(uint8_t rhport, uint32_t cfg_id, const void* cfg_param) {
  (void) rhport; (void) cfg_id; (void) cfg_param;
  return false;
}

TU_ATTR_WEAK void tuh_enum_descriptor_device_cb(uint8_t daddr, const tusb_desc_device_t *desc_device) {
 8004162:	b480      	push	{r7}
 8004164:	b083      	sub	sp, #12
 8004166:	af00      	add	r7, sp, #0
 8004168:	4603      	mov	r3, r0
 800416a:	6039      	str	r1, [r7, #0]
 800416c:	71fb      	strb	r3, [r7, #7]
  (void) daddr; (void) desc_device;
}
 800416e:	bf00      	nop
 8004170:	370c      	adds	r7, #12
 8004172:	46bd      	mov	sp, r7
 8004174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004178:	4770      	bx	lr

0800417a <tuh_enum_descriptor_configuration_cb>:

TU_ATTR_WEAK bool tuh_enum_descriptor_configuration_cb(uint8_t daddr, uint8_t cfg_index, const tusb_desc_configuration_t *desc_config) {
 800417a:	b480      	push	{r7}
 800417c:	b083      	sub	sp, #12
 800417e:	af00      	add	r7, sp, #0
 8004180:	4603      	mov	r3, r0
 8004182:	603a      	str	r2, [r7, #0]
 8004184:	71fb      	strb	r3, [r7, #7]
 8004186:	460b      	mov	r3, r1
 8004188:	71bb      	strb	r3, [r7, #6]
  (void) daddr; (void) cfg_index; (void) desc_config;
  return true;
 800418a:	2301      	movs	r3, #1
}
 800418c:	4618      	mov	r0, r3
 800418e:	370c      	adds	r7, #12
 8004190:	46bd      	mov	sp, r7
 8004192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004196:	4770      	bx	lr

08004198 <tuh_event_hook_cb>:

TU_ATTR_WEAK void tuh_event_hook_cb(uint8_t rhport, uint32_t eventid, bool in_isr) {
 8004198:	b480      	push	{r7}
 800419a:	b083      	sub	sp, #12
 800419c:	af00      	add	r7, sp, #0
 800419e:	4603      	mov	r3, r0
 80041a0:	6039      	str	r1, [r7, #0]
 80041a2:	71fb      	strb	r3, [r7, #7]
 80041a4:	4613      	mov	r3, r2
 80041a6:	71bb      	strb	r3, [r7, #6]
  (void) rhport; (void) eventid; (void) in_isr;
}
 80041a8:	bf00      	nop
 80041aa:	370c      	adds	r7, #12
 80041ac:	46bd      	mov	sp, r7
 80041ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041b2:	4770      	bx	lr

080041b4 <hcd_dcache_clean>:

TU_ATTR_WEAK bool hcd_dcache_clean(const void* addr, uint32_t data_size) {
 80041b4:	b480      	push	{r7}
 80041b6:	b083      	sub	sp, #12
 80041b8:	af00      	add	r7, sp, #0
 80041ba:	6078      	str	r0, [r7, #4]
 80041bc:	6039      	str	r1, [r7, #0]
  (void) addr; (void) data_size;
  return false;
 80041be:	2300      	movs	r3, #0
}
 80041c0:	4618      	mov	r0, r3
 80041c2:	370c      	adds	r7, #12
 80041c4:	46bd      	mov	sp, r7
 80041c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ca:	4770      	bx	lr

080041cc <get_driver>:
static usbh_class_driver_t const * _app_driver = NULL;
static uint8_t _app_driver_count = 0;

#define TOTAL_DRIVER_COUNT    (_app_driver_count + BUILTIN_DRIVER_COUNT)

static inline usbh_class_driver_t const *get_driver(uint8_t drv_id) {
 80041cc:	b480      	push	{r7}
 80041ce:	b085      	sub	sp, #20
 80041d0:	af00      	add	r7, sp, #0
 80041d2:	4603      	mov	r3, r0
 80041d4:	71fb      	strb	r3, [r7, #7]
  usbh_class_driver_t const *driver = NULL;
 80041d6:	2300      	movs	r3, #0
 80041d8:	60fb      	str	r3, [r7, #12]

  if ( drv_id < _app_driver_count ) {
 80041da:	4b13      	ldr	r3, [pc, #76]	@ (8004228 <get_driver+0x5c>)
 80041dc:	781b      	ldrb	r3, [r3, #0]
 80041de:	79fa      	ldrb	r2, [r7, #7]
 80041e0:	429a      	cmp	r2, r3
 80041e2:	d209      	bcs.n	80041f8 <get_driver+0x2c>
    driver = &_app_driver[drv_id];
 80041e4:	4b11      	ldr	r3, [pc, #68]	@ (800422c <get_driver+0x60>)
 80041e6:	6819      	ldr	r1, [r3, #0]
 80041e8:	79fa      	ldrb	r2, [r7, #7]
 80041ea:	4613      	mov	r3, r2
 80041ec:	00db      	lsls	r3, r3, #3
 80041ee:	1a9b      	subs	r3, r3, r2
 80041f0:	009b      	lsls	r3, r3, #2
 80041f2:	440b      	add	r3, r1
 80041f4:	60fb      	str	r3, [r7, #12]
 80041f6:	e00f      	b.n	8004218 <get_driver+0x4c>
  } else if ( drv_id < TOTAL_DRIVER_COUNT && BUILTIN_DRIVER_COUNT > 0) {
 80041f8:	4b0b      	ldr	r3, [pc, #44]	@ (8004228 <get_driver+0x5c>)
 80041fa:	781b      	ldrb	r3, [r3, #0]
 80041fc:	79fa      	ldrb	r2, [r7, #7]
 80041fe:	429a      	cmp	r2, r3
 8004200:	d80a      	bhi.n	8004218 <get_driver+0x4c>
    driver = &usbh_class_drivers[drv_id - _app_driver_count];
 8004202:	79fb      	ldrb	r3, [r7, #7]
 8004204:	4a08      	ldr	r2, [pc, #32]	@ (8004228 <get_driver+0x5c>)
 8004206:	7812      	ldrb	r2, [r2, #0]
 8004208:	1a9a      	subs	r2, r3, r2
 800420a:	4613      	mov	r3, r2
 800420c:	00db      	lsls	r3, r3, #3
 800420e:	1a9b      	subs	r3, r3, r2
 8004210:	009b      	lsls	r3, r3, #2
 8004212:	4a07      	ldr	r2, [pc, #28]	@ (8004230 <get_driver+0x64>)
 8004214:	4413      	add	r3, r2
 8004216:	60fb      	str	r3, [r7, #12]
  }

  return driver;
 8004218:	68fb      	ldr	r3, [r7, #12]
}
 800421a:	4618      	mov	r0, r3
 800421c:	3714      	adds	r7, #20
 800421e:	46bd      	mov	sp, r7
 8004220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004224:	4770      	bx	lr
 8004226:	bf00      	nop
 8004228:	20000bbc 	.word	0x20000bbc
 800422c:	20000bb8 	.word	0x20000bb8
 8004230:	080080f4 	.word	0x080080f4

08004234 <tuh_connected>:
  usbh_device_t *dev = get_device(dev_addr);
  TU_VERIFY(dev);
  return dev->configured;
}

bool tuh_connected(uint8_t daddr) {
 8004234:	b480      	push	{r7}
 8004236:	b085      	sub	sp, #20
 8004238:	af00      	add	r7, sp, #0
 800423a:	4603      	mov	r3, r0
 800423c:	71fb      	strb	r3, [r7, #7]
  if (daddr == 0) {
 800423e:	79fb      	ldrb	r3, [r7, #7]
 8004240:	2b00      	cmp	r3, #0
 8004242:	d107      	bne.n	8004254 <tuh_connected+0x20>
    return _usbh_data.enumerating_daddr == 0;
 8004244:	4b17      	ldr	r3, [pc, #92]	@ (80042a4 <tuh_connected+0x70>)
 8004246:	785b      	ldrb	r3, [r3, #1]
 8004248:	2b00      	cmp	r3, #0
 800424a:	bf0c      	ite	eq
 800424c:	2301      	moveq	r3, #1
 800424e:	2300      	movne	r3, #0
 8004250:	b2db      	uxtb	r3, r3
 8004252:	e021      	b.n	8004298 <tuh_connected+0x64>
 8004254:	79fb      	ldrb	r3, [r7, #7]
 8004256:	72fb      	strb	r3, [r7, #11]
  TU_VERIFY(dev_addr > 0 && dev_addr <= TOTAL_DEVICES, NULL);
 8004258:	7afb      	ldrb	r3, [r7, #11]
 800425a:	2b00      	cmp	r3, #0
 800425c:	d002      	beq.n	8004264 <tuh_connected+0x30>
 800425e:	7afb      	ldrb	r3, [r7, #11]
 8004260:	2b01      	cmp	r3, #1
 8004262:	d901      	bls.n	8004268 <tuh_connected+0x34>
 8004264:	2300      	movs	r3, #0
 8004266:	e006      	b.n	8004276 <tuh_connected+0x42>
  return &_usbh_devices[dev_addr-1];
 8004268:	7afb      	ldrb	r3, [r7, #11]
 800426a:	3b01      	subs	r3, #1
 800426c:	225e      	movs	r2, #94	@ 0x5e
 800426e:	fb02 f303 	mul.w	r3, r2, r3
 8004272:	4a0d      	ldr	r2, [pc, #52]	@ (80042a8 <tuh_connected+0x74>)
 8004274:	4413      	add	r3, r2
  } else {
    const usbh_device_t* dev = get_device(daddr);
 8004276:	60fb      	str	r3, [r7, #12]
    return dev && dev->connected;
 8004278:	68fb      	ldr	r3, [r7, #12]
 800427a:	2b00      	cmp	r3, #0
 800427c:	d008      	beq.n	8004290 <tuh_connected+0x5c>
 800427e:	68fb      	ldr	r3, [r7, #12]
 8004280:	7d1b      	ldrb	r3, [r3, #20]
 8004282:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8004286:	b2db      	uxtb	r3, r3
 8004288:	2b00      	cmp	r3, #0
 800428a:	d001      	beq.n	8004290 <tuh_connected+0x5c>
 800428c:	2301      	movs	r3, #1
 800428e:	e000      	b.n	8004292 <tuh_connected+0x5e>
 8004290:	2300      	movs	r3, #0
 8004292:	f003 0301 	and.w	r3, r3, #1
 8004296:	b2db      	uxtb	r3, r3
  }
}
 8004298:	4618      	mov	r0, r3
 800429a:	3714      	adds	r7, #20
 800429c:	46bd      	mov	sp, r7
 800429e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042a2:	4770      	bx	lr
 80042a4:	20000020 	.word	0x20000020
 80042a8:	2000098c 	.word	0x2000098c

080042ac <tuh_speed_get>:
  desc_device->bNumConfigurations = dev->bNumConfigurations;

  return true;
}

tusb_speed_t tuh_speed_get(uint8_t daddr) {
 80042ac:	b580      	push	{r7, lr}
 80042ae:	b084      	sub	sp, #16
 80042b0:	af00      	add	r7, sp, #0
 80042b2:	4603      	mov	r3, r0
 80042b4:	71fb      	strb	r3, [r7, #7]
  tuh_bus_info_t bus_info;
  tuh_bus_info_get(daddr, &bus_info);
 80042b6:	f107 020c 	add.w	r2, r7, #12
 80042ba:	79fb      	ldrb	r3, [r7, #7]
 80042bc:	4611      	mov	r1, r2
 80042be:	4618      	mov	r0, r3
 80042c0:	f000 ffcc 	bl	800525c <tuh_bus_info_get>
  return bus_info.speed;
 80042c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80042c6:	4618      	mov	r0, r3
 80042c8:	3710      	adds	r7, #16
 80042ca:	46bd      	mov	sp, r7
 80042cc:	bd80      	pop	{r7, pc}
	...

080042d0 <tuh_rhport_is_active>:

bool tuh_rhport_is_active(uint8_t rhport) {
 80042d0:	b480      	push	{r7}
 80042d2:	b083      	sub	sp, #12
 80042d4:	af00      	add	r7, sp, #0
 80042d6:	4603      	mov	r3, r0
 80042d8:	71fb      	strb	r3, [r7, #7]
  return _usbh_data.controller_id == rhport;
 80042da:	4b07      	ldr	r3, [pc, #28]	@ (80042f8 <tuh_rhport_is_active+0x28>)
 80042dc:	781b      	ldrb	r3, [r3, #0]
 80042de:	79fa      	ldrb	r2, [r7, #7]
 80042e0:	429a      	cmp	r2, r3
 80042e2:	bf0c      	ite	eq
 80042e4:	2301      	moveq	r3, #1
 80042e6:	2300      	movne	r3, #0
 80042e8:	b2db      	uxtb	r3, r3
}
 80042ea:	4618      	mov	r0, r3
 80042ec:	370c      	adds	r7, #12
 80042ee:	46bd      	mov	sp, r7
 80042f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042f4:	4770      	bx	lr
 80042f6:	bf00      	nop
 80042f8:	20000020 	.word	0x20000020

080042fc <clear_device>:
//--------------------------------------------------------------------+
bool tuh_configure(uint8_t rhport, uint32_t cfg_id, const void *cfg_param) {
  return hcd_configure(rhport, cfg_id, cfg_param);
}

static void clear_device(usbh_device_t* dev) {
 80042fc:	b580      	push	{r7, lr}
 80042fe:	b082      	sub	sp, #8
 8004300:	af00      	add	r7, sp, #0
 8004302:	6078      	str	r0, [r7, #4]
  tu_memclr(dev, sizeof(usbh_device_t));
 8004304:	225e      	movs	r2, #94	@ 0x5e
 8004306:	2100      	movs	r1, #0
 8004308:	6878      	ldr	r0, [r7, #4]
 800430a:	f003 fea0 	bl	800804e <memset>
  memset(dev->itf2drv, TUSB_INDEX_INVALID_8, sizeof(dev->itf2drv)); // invalid mapping
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	3315      	adds	r3, #21
 8004312:	2208      	movs	r2, #8
 8004314:	21ff      	movs	r1, #255	@ 0xff
 8004316:	4618      	mov	r0, r3
 8004318:	f003 fe99 	bl	800804e <memset>
  memset(dev->ep2drv , TUSB_INDEX_INVALID_8, sizeof(dev->ep2drv )); // invalid mapping
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	331d      	adds	r3, #29
 8004320:	2220      	movs	r2, #32
 8004322:	21ff      	movs	r1, #255	@ 0xff
 8004324:	4618      	mov	r0, r3
 8004326:	f003 fe92 	bl	800804e <memset>
}
 800432a:	bf00      	nop
 800432c:	3708      	adds	r7, #8
 800432e:	46bd      	mov	sp, r7
 8004330:	bd80      	pop	{r7, pc}
	...

08004334 <tuh_inited>:

bool tuh_inited(void) {
 8004334:	b480      	push	{r7}
 8004336:	af00      	add	r7, sp, #0
  return _usbh_data.controller_id != TUSB_INDEX_INVALID_8;
 8004338:	4b05      	ldr	r3, [pc, #20]	@ (8004350 <tuh_inited+0x1c>)
 800433a:	781b      	ldrb	r3, [r3, #0]
 800433c:	2bff      	cmp	r3, #255	@ 0xff
 800433e:	bf14      	ite	ne
 8004340:	2301      	movne	r3, #1
 8004342:	2300      	moveq	r3, #0
 8004344:	b2db      	uxtb	r3, r3
}
 8004346:	4618      	mov	r0, r3
 8004348:	46bd      	mov	sp, r7
 800434a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800434e:	4770      	bx	lr
 8004350:	20000020 	.word	0x20000020

08004354 <tuh_rhport_init>:

bool tuh_rhport_init(uint8_t rhport, const tusb_rhport_init_t* rh_init) {
 8004354:	b580      	push	{r7, lr}
 8004356:	b088      	sub	sp, #32
 8004358:	af00      	add	r7, sp, #0
 800435a:	4603      	mov	r3, r0
 800435c:	6039      	str	r1, [r7, #0]
 800435e:	71fb      	strb	r3, [r7, #7]
  if (tuh_rhport_is_active(rhport)) {
 8004360:	79fb      	ldrb	r3, [r7, #7]
 8004362:	4618      	mov	r0, r3
 8004364:	f7ff ffb4 	bl	80042d0 <tuh_rhport_is_active>
 8004368:	4603      	mov	r3, r0
 800436a:	2b00      	cmp	r3, #0
 800436c:	d001      	beq.n	8004372 <tuh_rhport_init+0x1e>
    return true; // skip if already initialized
 800436e:	2301      	movs	r3, #1
 8004370:	e082      	b.n	8004478 <tuh_rhport_init+0x124>
  }
  TU_LOG_USBH("USBH init on controller %u, speed = %s\r\n", rhport, speed_str);
#endif

  // Init host stack if not already
  if (!tuh_inited()) {
 8004372:	f7ff ffdf 	bl	8004334 <tuh_inited>
 8004376:	4603      	mov	r3, r0
 8004378:	f083 0301 	eor.w	r3, r3, #1
 800437c:	b2db      	uxtb	r3, r3
 800437e:	2b00      	cmp	r3, #0
 8004380:	d05c      	beq.n	800443c <tuh_rhport_init+0xe8>
 8004382:	4b3f      	ldr	r3, [pc, #252]	@ (8004480 <tuh_rhport_init+0x12c>)
 8004384:	60bb      	str	r3, [r7, #8]
#define OSAL_SPINLOCK_DEF(_name, _int_set) \
  osal_spinlock_t _name = { .interrupt_set = _int_set }

TU_ATTR_ALWAYS_INLINE static inline void osal_spin_init(osal_spinlock_t *ctx) {
  (void) ctx;
}
 8004386:	bf00      	nop
 8004388:	4b3e      	ldr	r3, [pc, #248]	@ (8004484 <tuh_rhport_init+0x130>)
 800438a:	60fb      	str	r3, [r7, #12]
    .interrupt_set = _int_set,                            \
    .ff = TU_FIFO_INIT(_name##_buf, _depth, _type, false) \
  }

TU_ATTR_ALWAYS_INLINE static inline osal_queue_t osal_queue_create(osal_queue_def_t* qdef) {
  tu_fifo_clear(&qdef->ff);
 800438c:	68fb      	ldr	r3, [r7, #12]
 800438e:	3304      	adds	r3, #4
 8004390:	4618      	mov	r0, r3
 8004392:	f7ff fed5 	bl	8004140 <tu_fifo_clear>
  return (osal_queue_t) qdef;
 8004396:	68fb      	ldr	r3, [r7, #12]
    TU_LOG_INT_USBH(sizeof(tu_edpt_stream_t));

    osal_spin_init(&_usbh_spin);

    // Event queue
    _usbh_q = osal_queue_create(&_usbh_qdef);
 8004398:	4a3b      	ldr	r2, [pc, #236]	@ (8004488 <tuh_rhport_init+0x134>)
 800439a:	6013      	str	r3, [r2, #0]
    TU_ASSERT(_usbh_q != NULL);
 800439c:	4b3a      	ldr	r3, [pc, #232]	@ (8004488 <tuh_rhport_init+0x134>)
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	2b00      	cmp	r3, #0
 80043a2:	d10a      	bne.n	80043ba <tuh_rhport_init+0x66>
 80043a4:	4b39      	ldr	r3, [pc, #228]	@ (800448c <tuh_rhport_init+0x138>)
 80043a6:	617b      	str	r3, [r7, #20]
 80043a8:	697b      	ldr	r3, [r7, #20]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	f003 0301 	and.w	r3, r3, #1
 80043b0:	2b00      	cmp	r3, #0
 80043b2:	d000      	beq.n	80043b6 <tuh_rhport_init+0x62>
 80043b4:	be00      	bkpt	0x0000
 80043b6:	2300      	movs	r3, #0
 80043b8:	e05e      	b.n	8004478 <tuh_rhport_init+0x124>
    _usbh_mutex = osal_mutex_create(&_usbh_mutexdef);
    TU_ASSERT(_usbh_mutex);
#endif

    // Get application driver if available
    if (usbh_app_driver_get_cb) {
 80043ba:	4b35      	ldr	r3, [pc, #212]	@ (8004490 <tuh_rhport_init+0x13c>)
 80043bc:	2b00      	cmp	r3, #0
 80043be:	d005      	beq.n	80043cc <tuh_rhport_init+0x78>
      _app_driver = usbh_app_driver_get_cb(&_app_driver_count);
 80043c0:	4834      	ldr	r0, [pc, #208]	@ (8004494 <tuh_rhport_init+0x140>)
 80043c2:	f3af 8000 	nop.w
 80043c6:	4603      	mov	r3, r0
 80043c8:	4a33      	ldr	r2, [pc, #204]	@ (8004498 <tuh_rhport_init+0x144>)
 80043ca:	6013      	str	r3, [r2, #0]
    }

    // Device
    tu_memclr(_usbh_devices, sizeof(_usbh_devices));
 80043cc:	225e      	movs	r2, #94	@ 0x5e
 80043ce:	2100      	movs	r1, #0
 80043d0:	4832      	ldr	r0, [pc, #200]	@ (800449c <tuh_rhport_init+0x148>)
 80043d2:	f003 fe3c 	bl	800804e <memset>
    tu_memclr(&_usbh_data, sizeof(_usbh_data));
 80043d6:	221c      	movs	r2, #28
 80043d8:	2100      	movs	r1, #0
 80043da:	4831      	ldr	r0, [pc, #196]	@ (80044a0 <tuh_rhport_init+0x14c>)
 80043dc:	f003 fe37 	bl	800804e <memset>

    _usbh_data.controller_id = TUSB_INDEX_INVALID_8;
 80043e0:	4b2f      	ldr	r3, [pc, #188]	@ (80044a0 <tuh_rhport_init+0x14c>)
 80043e2:	22ff      	movs	r2, #255	@ 0xff
 80043e4:	701a      	strb	r2, [r3, #0]
    _usbh_data.enumerating_daddr = TUSB_INDEX_INVALID_8;
 80043e6:	4b2e      	ldr	r3, [pc, #184]	@ (80044a0 <tuh_rhport_init+0x14c>)
 80043e8:	22ff      	movs	r2, #255	@ 0xff
 80043ea:	705a      	strb	r2, [r3, #1]

    for (uint8_t i = 0; i < TOTAL_DEVICES; i++) {
 80043ec:	2300      	movs	r3, #0
 80043ee:	77fb      	strb	r3, [r7, #31]
 80043f0:	e00b      	b.n	800440a <tuh_rhport_init+0xb6>
      clear_device(&_usbh_devices[i]);
 80043f2:	7ffb      	ldrb	r3, [r7, #31]
 80043f4:	225e      	movs	r2, #94	@ 0x5e
 80043f6:	fb02 f303 	mul.w	r3, r2, r3
 80043fa:	4a28      	ldr	r2, [pc, #160]	@ (800449c <tuh_rhport_init+0x148>)
 80043fc:	4413      	add	r3, r2
 80043fe:	4618      	mov	r0, r3
 8004400:	f7ff ff7c 	bl	80042fc <clear_device>
    for (uint8_t i = 0; i < TOTAL_DEVICES; i++) {
 8004404:	7ffb      	ldrb	r3, [r7, #31]
 8004406:	3301      	adds	r3, #1
 8004408:	77fb      	strb	r3, [r7, #31]
 800440a:	7ffb      	ldrb	r3, [r7, #31]
 800440c:	2b00      	cmp	r3, #0
 800440e:	d0f0      	beq.n	80043f2 <tuh_rhport_init+0x9e>
    }

    // Class drivers
    for (uint8_t drv_id = 0; drv_id < TOTAL_DRIVER_COUNT; drv_id++) {
 8004410:	2300      	movs	r3, #0
 8004412:	77bb      	strb	r3, [r7, #30]
 8004414:	e00d      	b.n	8004432 <tuh_rhport_init+0xde>
      usbh_class_driver_t const* driver = get_driver(drv_id);
 8004416:	7fbb      	ldrb	r3, [r7, #30]
 8004418:	4618      	mov	r0, r3
 800441a:	f7ff fed7 	bl	80041cc <get_driver>
 800441e:	61b8      	str	r0, [r7, #24]
      if (driver) {
 8004420:	69bb      	ldr	r3, [r7, #24]
 8004422:	2b00      	cmp	r3, #0
 8004424:	d002      	beq.n	800442c <tuh_rhport_init+0xd8>
        TU_LOG_USBH("%s init\r\n", driver->name);
        driver->init();
 8004426:	69bb      	ldr	r3, [r7, #24]
 8004428:	685b      	ldr	r3, [r3, #4]
 800442a:	4798      	blx	r3
    for (uint8_t drv_id = 0; drv_id < TOTAL_DRIVER_COUNT; drv_id++) {
 800442c:	7fbb      	ldrb	r3, [r7, #30]
 800442e:	3301      	adds	r3, #1
 8004430:	77bb      	strb	r3, [r7, #30]
 8004432:	4b18      	ldr	r3, [pc, #96]	@ (8004494 <tuh_rhport_init+0x140>)
 8004434:	781b      	ldrb	r3, [r3, #0]
 8004436:	7fba      	ldrb	r2, [r7, #30]
 8004438:	429a      	cmp	r2, r3
 800443a:	d9ec      	bls.n	8004416 <tuh_rhport_init+0xc2>
      }
    }
  }

  // Init host controller
  _usbh_data.controller_id = rhport;
 800443c:	4a18      	ldr	r2, [pc, #96]	@ (80044a0 <tuh_rhport_init+0x14c>)
 800443e:	79fb      	ldrb	r3, [r7, #7]
 8004440:	7013      	strb	r3, [r2, #0]
  TU_ASSERT(hcd_init(rhport, rh_init));
 8004442:	79fb      	ldrb	r3, [r7, #7]
 8004444:	6839      	ldr	r1, [r7, #0]
 8004446:	4618      	mov	r0, r3
 8004448:	f002 fb64 	bl	8006b14 <hcd_init>
 800444c:	4603      	mov	r3, r0
 800444e:	f083 0301 	eor.w	r3, r3, #1
 8004452:	b2db      	uxtb	r3, r3
 8004454:	2b00      	cmp	r3, #0
 8004456:	d00a      	beq.n	800446e <tuh_rhport_init+0x11a>
 8004458:	4b0c      	ldr	r3, [pc, #48]	@ (800448c <tuh_rhport_init+0x138>)
 800445a:	613b      	str	r3, [r7, #16]
 800445c:	693b      	ldr	r3, [r7, #16]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	f003 0301 	and.w	r3, r3, #1
 8004464:	2b00      	cmp	r3, #0
 8004466:	d000      	beq.n	800446a <tuh_rhport_init+0x116>
 8004468:	be00      	bkpt	0x0000
 800446a:	2300      	movs	r3, #0
 800446c:	e004      	b.n	8004478 <tuh_rhport_init+0x124>
  hcd_int_enable(rhport);
 800446e:	79fb      	ldrb	r3, [r7, #7]
 8004470:	4618      	mov	r0, r3
 8004472:	f002 fbe3 	bl	8006c3c <hcd_int_enable>

  return true;
 8004476:	2301      	movs	r3, #1
}
 8004478:	4618      	mov	r0, r3
 800447a:	3720      	adds	r7, #32
 800447c:	46bd      	mov	sp, r7
 800447e:	bd80      	pop	{r7, pc}
 8004480:	2000000c 	.word	0x2000000c
 8004484:	20000010 	.word	0x20000010
 8004488:	20000aac 	.word	0x20000aac
 800448c:	e000edf0 	.word	0xe000edf0
 8004490:	00000000 	.word	0x00000000
 8004494:	20000bbc 	.word	0x20000bbc
 8004498:	20000bb8 	.word	0x20000bb8
 800449c:	2000098c 	.word	0x2000098c
 80044a0:	20000020 	.word	0x20000020

080044a4 <tuh_task_event_ready>:
  }

  return true;
}

bool tuh_task_event_ready(void) {
 80044a4:	b580      	push	{r7, lr}
 80044a6:	b082      	sub	sp, #8
 80044a8:	af00      	add	r7, sp, #0
  if (!tuh_inited()) {
 80044aa:	f7ff ff43 	bl	8004334 <tuh_inited>
 80044ae:	4603      	mov	r3, r0
 80044b0:	f083 0301 	eor.w	r3, r3, #1
 80044b4:	b2db      	uxtb	r3, r3
 80044b6:	2b00      	cmp	r3, #0
 80044b8:	d001      	beq.n	80044be <tuh_task_event_ready+0x1a>
    return false; // Skip if stack is not initialized
 80044ba:	2300      	movs	r3, #0
 80044bc:	e013      	b.n	80044e6 <tuh_task_event_ready+0x42>
  }
  return !osal_queue_empty(_usbh_q);
 80044be:	4b0c      	ldr	r3, [pc, #48]	@ (80044f0 <tuh_task_event_ready+0x4c>)
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	607b      	str	r3, [r7, #4]
}

TU_ATTR_ALWAYS_INLINE static inline bool osal_queue_empty(osal_queue_t qhdl) {
  // Skip queue lock/unlock since this function is primarily called
  // with interrupt disabled before going into low power mode
  return tu_fifo_empty(&qhdl->ff);
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	3304      	adds	r3, #4
 80044c8:	4618      	mov	r0, r3
 80044ca:	f7ff fd8f 	bl	8003fec <tu_fifo_empty>
 80044ce:	4603      	mov	r3, r0
 80044d0:	2b00      	cmp	r3, #0
 80044d2:	bf14      	ite	ne
 80044d4:	2301      	movne	r3, #1
 80044d6:	2300      	moveq	r3, #0
 80044d8:	b2db      	uxtb	r3, r3
 80044da:	f083 0301 	eor.w	r3, r3, #1
 80044de:	b2db      	uxtb	r3, r3
 80044e0:	f003 0301 	and.w	r3, r3, #1
 80044e4:	b2db      	uxtb	r3, r3
}
 80044e6:	4618      	mov	r0, r3
 80044e8:	3708      	adds	r7, #8
 80044ea:	46bd      	mov	sp, r7
 80044ec:	bd80      	pop	{r7, pc}
 80044ee:	bf00      	nop
 80044f0:	20000aac 	.word	0x20000aac

080044f4 <tuh_task_ext>:
        tuh_task(); // tinyusb host task
      }
    }
    @endcode
 */
void tuh_task_ext(uint32_t timeout_ms, bool in_isr) {
 80044f4:	b590      	push	{r4, r7, lr}
 80044f6:	b09b      	sub	sp, #108	@ 0x6c
 80044f8:	af00      	add	r7, sp, #0
 80044fa:	6078      	str	r0, [r7, #4]
 80044fc:	460b      	mov	r3, r1
 80044fe:	70fb      	strb	r3, [r7, #3]
  (void) in_isr; // not implemented yet

  // Skip if stack is not initialized
  if (!tuh_inited()) {
 8004500:	f7ff ff18 	bl	8004334 <tuh_inited>
 8004504:	4603      	mov	r3, r0
 8004506:	f083 0301 	eor.w	r3, r3, #1
 800450a:	b2db      	uxtb	r3, r3
 800450c:	2b00      	cmp	r3, #0
 800450e:	f040 818b 	bne.w	8004828 <tuh_task_ext+0x334>
  }

  // Loop until there is no more events in the queue
  while (1) {
    hcd_event_t event;
    if (!osal_queue_receive(_usbh_q, &event, timeout_ms)) { return; }
 8004512:	4ba6      	ldr	r3, [pc, #664]	@ (80047ac <tuh_task_ext+0x2b8>)
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004518:	f107 030c 	add.w	r3, r7, #12
 800451c:	647b      	str	r3, [r7, #68]	@ 0x44
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	643b      	str	r3, [r7, #64]	@ 0x40
  qhdl->interrupt_set(false);
 8004522:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	2000      	movs	r0, #0
 8004528:	4798      	blx	r3
  const bool success = tu_fifo_read(&qhdl->ff, data);
 800452a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800452c:	3304      	adds	r3, #4
 800452e:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8004530:	4618      	mov	r0, r3
 8004532:	f7ff fd9e 	bl	8004072 <tu_fifo_read>
 8004536:	4603      	mov	r3, r0
 8004538:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
  qhdl->interrupt_set(true);
 800453c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	2001      	movs	r0, #1
 8004542:	4798      	blx	r3
  return success;
 8004544:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8004548:	f083 0301 	eor.w	r3, r3, #1
 800454c:	b2db      	uxtb	r3, r3
 800454e:	2b00      	cmp	r3, #0
 8004550:	f040 816c 	bne.w	800482c <tuh_task_ext+0x338>

    switch (event.event_id) {
 8004554:	7b7b      	ldrb	r3, [r7, #13]
 8004556:	2b03      	cmp	r3, #3
 8004558:	f200 8160 	bhi.w	800481c <tuh_task_ext+0x328>
 800455c:	a201      	add	r2, pc, #4	@ (adr r2, 8004564 <tuh_task_ext+0x70>)
 800455e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004562:	bf00      	nop
 8004564:	08004575 	.word	0x08004575
 8004568:	08004647 	.word	0x08004647
 800456c:	080046c9 	.word	0x080046c9
 8004570:	0800480d 	.word	0x0800480d
      case HCD_EVENT_DEVICE_ATTACH:
        // due to the shared control buffer, we must fully complete enumerating one device first.
        // TODO better to have an separated queue for newly attached devices
        if (_usbh_data.enumerating_daddr == TUSB_INDEX_INVALID_8) {
 8004574:	4b8e      	ldr	r3, [pc, #568]	@ (80047b0 <tuh_task_ext+0x2bc>)
 8004576:	785b      	ldrb	r3, [r3, #1]
 8004578:	2bff      	cmp	r3, #255	@ 0xff
 800457a:	d108      	bne.n	800458e <tuh_task_ext+0x9a>
          // New device attached and we are ready
          TU_LOG_USBH("[%u:] USBH Device Attach\r\n", event.rhport);
          _usbh_data.enumerating_daddr = 0; // enumerate new device with address 0
 800457c:	4b8c      	ldr	r3, [pc, #560]	@ (80047b0 <tuh_task_ext+0x2bc>)
 800457e:	2200      	movs	r2, #0
 8004580:	705a      	strb	r2, [r3, #1]
          enum_new_device(&event);
 8004582:	f107 030c 	add.w	r3, r7, #12
 8004586:	4618      	mov	r0, r3
 8004588:	f001 f912 	bl	80057b0 <enum_new_device>
          queue_event(&event, in_isr);
          if (is_empty) {
            return; // Exit if this is the only event in the queue, otherwise we loop forever
          }
        }
        break;
 800458c:	e148      	b.n	8004820 <tuh_task_ext+0x32c>
          const bool is_empty = osal_queue_empty(_usbh_q);
 800458e:	4b87      	ldr	r3, [pc, #540]	@ (80047ac <tuh_task_ext+0x2b8>)
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	623b      	str	r3, [r7, #32]
  return tu_fifo_empty(&qhdl->ff);
 8004594:	6a3b      	ldr	r3, [r7, #32]
 8004596:	3304      	adds	r3, #4
 8004598:	4618      	mov	r0, r3
 800459a:	f7ff fd27 	bl	8003fec <tu_fifo_empty>
 800459e:	4603      	mov	r3, r0
 80045a0:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
 80045a4:	f107 030c 	add.w	r3, r7, #12
 80045a8:	63bb      	str	r3, [r7, #56]	@ 0x38
 80045aa:	78fb      	ldrb	r3, [r7, #3]
 80045ac:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
  TU_ASSERT(osal_queue_send(_usbh_q, event, in_isr));
 80045b0:	4b7e      	ldr	r3, [pc, #504]	@ (80047ac <tuh_task_ext+0x2b8>)
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	633b      	str	r3, [r7, #48]	@ 0x30
 80045b6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80045b8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80045ba:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80045be:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
  if (!in_isr) {
 80045c2:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80045c6:	f083 0301 	eor.w	r3, r3, #1
 80045ca:	b2db      	uxtb	r3, r3
 80045cc:	2b00      	cmp	r3, #0
 80045ce:	d003      	beq.n	80045d8 <tuh_task_ext+0xe4>
    qhdl->interrupt_set(false);
 80045d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	2000      	movs	r0, #0
 80045d6:	4798      	blx	r3
  const bool success = tu_fifo_write(&qhdl->ff, data);
 80045d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80045da:	3304      	adds	r3, #4
 80045dc:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80045de:	4618      	mov	r0, r3
 80045e0:	f7ff fd6b 	bl	80040ba <tu_fifo_write>
 80045e4:	4603      	mov	r3, r0
 80045e6:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  if (!in_isr) {
 80045ea:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80045ee:	f083 0301 	eor.w	r3, r3, #1
 80045f2:	b2db      	uxtb	r3, r3
 80045f4:	2b00      	cmp	r3, #0
 80045f6:	d003      	beq.n	8004600 <tuh_task_ext+0x10c>
    qhdl->interrupt_set(true);
 80045f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	2001      	movs	r0, #1
 80045fe:	4798      	blx	r3
  return success;
 8004600:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8004604:	f083 0301 	eor.w	r3, r3, #1
 8004608:	b2db      	uxtb	r3, r3
 800460a:	2b00      	cmp	r3, #0
 800460c:	d009      	beq.n	8004622 <tuh_task_ext+0x12e>
 800460e:	4b69      	ldr	r3, [pc, #420]	@ (80047b4 <tuh_task_ext+0x2c0>)
 8004610:	627b      	str	r3, [r7, #36]	@ 0x24
 8004612:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	f003 0301 	and.w	r3, r3, #1
 800461a:	2b00      	cmp	r3, #0
 800461c:	d00c      	beq.n	8004638 <tuh_task_ext+0x144>
 800461e:	be00      	bkpt	0x0000
 8004620:	e00a      	b.n	8004638 <tuh_task_ext+0x144>
  tuh_event_hook_cb(event->rhport, event->event_id, in_isr);
 8004622:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004624:	7818      	ldrb	r0, [r3, #0]
 8004626:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004628:	785b      	ldrb	r3, [r3, #1]
 800462a:	4619      	mov	r1, r3
 800462c:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8004630:	461a      	mov	r2, r3
 8004632:	f7ff fdb1 	bl	8004198 <tuh_event_hook_cb>
  return true;
 8004636:	e000      	b.n	800463a <tuh_task_ext+0x146>
  TU_ASSERT(osal_queue_send(_usbh_q, event, in_isr));
 8004638:	bf00      	nop
          if (is_empty) {
 800463a:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 800463e:	2b00      	cmp	r3, #0
 8004640:	f000 80ee 	beq.w	8004820 <tuh_task_ext+0x32c>
            return; // Exit if this is the only event in the queue, otherwise we loop forever
 8004644:	e0f7      	b.n	8004836 <tuh_task_ext+0x342>

      case HCD_EVENT_DEVICE_REMOVE:
        TU_LOG_USBH("[%u:%u:%u] USBH DEVICE REMOVED\r\n", event.rhport, event.connection.hub_addr, event.connection.hub_port);
        if (_usbh_data.enumerating_daddr == 0 &&
 8004646:	4b5a      	ldr	r3, [pc, #360]	@ (80047b0 <tuh_task_ext+0x2bc>)
 8004648:	785b      	ldrb	r3, [r3, #1]
 800464a:	2b00      	cmp	r3, #0
 800464c:	d135      	bne.n	80046ba <tuh_task_ext+0x1c6>
            event.rhport == _usbh_data.dev0_bus.rhport &&
 800464e:	7b3a      	ldrb	r2, [r7, #12]
 8004650:	4b57      	ldr	r3, [pc, #348]	@ (80047b0 <tuh_task_ext+0x2bc>)
 8004652:	78db      	ldrb	r3, [r3, #3]
        if (_usbh_data.enumerating_daddr == 0 &&
 8004654:	429a      	cmp	r2, r3
 8004656:	d130      	bne.n	80046ba <tuh_task_ext+0x1c6>
            event.connection.hub_addr == _usbh_data.dev0_bus.hub_addr &&
 8004658:	7c3a      	ldrb	r2, [r7, #16]
 800465a:	4b55      	ldr	r3, [pc, #340]	@ (80047b0 <tuh_task_ext+0x2bc>)
 800465c:	791b      	ldrb	r3, [r3, #4]
            event.rhport == _usbh_data.dev0_bus.rhport &&
 800465e:	429a      	cmp	r2, r3
 8004660:	d12b      	bne.n	80046ba <tuh_task_ext+0x1c6>
            event.connection.hub_port == _usbh_data.dev0_bus.hub_port) {
 8004662:	7c7a      	ldrb	r2, [r7, #17]
 8004664:	4b52      	ldr	r3, [pc, #328]	@ (80047b0 <tuh_task_ext+0x2bc>)
 8004666:	795b      	ldrb	r3, [r3, #5]
            event.connection.hub_addr == _usbh_data.dev0_bus.hub_addr &&
 8004668:	429a      	cmp	r2, r3
 800466a:	d126      	bne.n	80046ba <tuh_task_ext+0x1c6>
          // dev0 is unplugged while enumerating (not yet assigned an address)
          usbh_device_close(_usbh_data.dev0_bus.rhport, 0);
 800466c:	4b50      	ldr	r3, [pc, #320]	@ (80047b0 <tuh_task_ext+0x2bc>)
 800466e:	78db      	ldrb	r3, [r3, #3]
 8004670:	77fb      	strb	r3, [r7, #31]
 8004672:	2300      	movs	r3, #0
 8004674:	77bb      	strb	r3, [r7, #30]
  hcd_device_close(rhport, daddr);
 8004676:	7fba      	ldrb	r2, [r7, #30]
 8004678:	7ffb      	ldrb	r3, [r7, #31]
 800467a:	4611      	mov	r1, r2
 800467c:	4618      	mov	r0, r3
 800467e:	f002 fbeb 	bl	8006e58 <hcd_device_close>
  if (daddr == _usbh_data.ctrl_xfer_info.daddr) {
 8004682:	4b4b      	ldr	r3, [pc, #300]	@ (80047b0 <tuh_task_ext+0x2bc>)
 8004684:	7d5b      	ldrb	r3, [r3, #21]
 8004686:	7fba      	ldrb	r2, [r7, #30]
 8004688:	429a      	cmp	r2, r3
 800468a:	d10b      	bne.n	80046a4 <tuh_task_ext+0x1b0>
 800468c:	2300      	movs	r3, #0
 800468e:	777b      	strb	r3, [r7, #29]
  if (_usbh_data.ctrl_xfer_info.stage != stage) {
 8004690:	4b47      	ldr	r3, [pc, #284]	@ (80047b0 <tuh_task_ext+0x2bc>)
 8004692:	7d1b      	ldrb	r3, [r3, #20]
 8004694:	b2db      	uxtb	r3, r3
 8004696:	7f7a      	ldrb	r2, [r7, #29]
 8004698:	429a      	cmp	r2, r3
 800469a:	d002      	beq.n	80046a2 <tuh_task_ext+0x1ae>
    _usbh_data.ctrl_xfer_info.stage = stage;
 800469c:	4a44      	ldr	r2, [pc, #272]	@ (80047b0 <tuh_task_ext+0x2bc>)
 800469e:	7f7b      	ldrb	r3, [r7, #29]
 80046a0:	7513      	strb	r3, [r2, #20]
}
 80046a2:	bf00      	nop
  if (daddr == _usbh_data.enumerating_daddr) {
 80046a4:	4b42      	ldr	r3, [pc, #264]	@ (80047b0 <tuh_task_ext+0x2bc>)
 80046a6:	785b      	ldrb	r3, [r3, #1]
 80046a8:	7fba      	ldrb	r2, [r7, #30]
 80046aa:	429a      	cmp	r2, r3
 80046ac:	d102      	bne.n	80046b4 <tuh_task_ext+0x1c0>
    _usbh_data.enumerating_daddr = TUSB_INDEX_INVALID_8;
 80046ae:	4b40      	ldr	r3, [pc, #256]	@ (80047b0 <tuh_task_ext+0x2bc>)
 80046b0:	22ff      	movs	r2, #255	@ 0xff
 80046b2:	705a      	strb	r2, [r3, #1]
}
 80046b4:	bf00      	nop
          usbh_device_close(_usbh_data.dev0_bus.rhport, 0);
 80046b6:	bf00      	nop
        } else {
          process_removed_device(event.rhport, event.connection.hub_addr, event.connection.hub_port);
        }
        break;
 80046b8:	e0b5      	b.n	8004826 <tuh_task_ext+0x332>
          process_removed_device(event.rhport, event.connection.hub_addr, event.connection.hub_port);
 80046ba:	7b3b      	ldrb	r3, [r7, #12]
 80046bc:	7c39      	ldrb	r1, [r7, #16]
 80046be:	7c7a      	ldrb	r2, [r7, #17]
 80046c0:	4618      	mov	r0, r3
 80046c2:	f000 ffe9 	bl	8005698 <process_removed_device>
        break;
 80046c6:	e0ae      	b.n	8004826 <tuh_task_ext+0x332>

      case HCD_EVENT_XFER_COMPLETE: {
        uint8_t const ep_addr = event.xfer_complete.ep_addr;
 80046c8:	7c3b      	ldrb	r3, [r7, #16]
 80046ca:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 80046ce:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 80046d2:	76fb      	strb	r3, [r7, #27]
  return (uint8_t)(addr & (~TUSB_DIR_IN_MASK));
 80046d4:	7efb      	ldrb	r3, [r7, #27]
 80046d6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80046da:	b2db      	uxtb	r3, r3
        uint8_t const epnum = tu_edpt_number(ep_addr);
 80046dc:	f887 3066 	strb.w	r3, [r7, #102]	@ 0x66
 80046e0:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 80046e4:	773b      	strb	r3, [r7, #28]
  return (addr & TUSB_DIR_IN_MASK) ? TUSB_DIR_IN : TUSB_DIR_OUT;
 80046e6:	7f3b      	ldrb	r3, [r7, #28]
 80046e8:	09db      	lsrs	r3, r3, #7
 80046ea:	b2db      	uxtb	r3, r3
        uint8_t const ep_dir = (uint8_t) tu_edpt_dir(ep_addr);
 80046ec:	f887 3065 	strb.w	r3, [r7, #101]	@ 0x65

        TU_LOG_USBH("[:%u] on EP %02X with %u bytes: %s\r\n",
                    event.dev_addr, ep_addr, (unsigned int) event.xfer_complete.len, tu_str_xfer_result[event.xfer_complete.result]);

        if (event.dev_addr == 0) {
 80046f0:	7bbb      	ldrb	r3, [r7, #14]
 80046f2:	2b00      	cmp	r3, #0
 80046f4:	d116      	bne.n	8004724 <tuh_task_ext+0x230>
          // device 0 only has control endpoint
          TU_ASSERT(epnum == 0,);
 80046f6:	f897 3066 	ldrb.w	r3, [r7, #102]	@ 0x66
 80046fa:	2b00      	cmp	r3, #0
 80046fc:	d00a      	beq.n	8004714 <tuh_task_ext+0x220>
 80046fe:	4b2d      	ldr	r3, [pc, #180]	@ (80047b4 <tuh_task_ext+0x2c0>)
 8004700:	653b      	str	r3, [r7, #80]	@ 0x50
 8004702:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	f003 0301 	and.w	r3, r3, #1
 800470a:	2b00      	cmp	r3, #0
 800470c:	f000 8090 	beq.w	8004830 <tuh_task_ext+0x33c>
 8004710:	be00      	bkpt	0x0000
 8004712:	e08d      	b.n	8004830 <tuh_task_ext+0x33c>
          usbh_control_xfer_cb(event.dev_addr, ep_addr, (xfer_result_t) event.xfer_complete.result, event.xfer_complete.len);
 8004714:	7bb8      	ldrb	r0, [r7, #14]
 8004716:	7c7a      	ldrb	r2, [r7, #17]
 8004718:	697b      	ldr	r3, [r7, #20]
 800471a:	f897 1067 	ldrb.w	r1, [r7, #103]	@ 0x67
 800471e:	f000 f9f7 	bl	8004b10 <usbh_control_xfer_cb>
                TU_ASSERT(false,);
              }
            }
          }
        }
        break;
 8004722:	e080      	b.n	8004826 <tuh_task_ext+0x332>
          usbh_device_t* dev = get_device(event.dev_addr);
 8004724:	7bbb      	ldrb	r3, [r7, #14]
 8004726:	76bb      	strb	r3, [r7, #26]
  TU_VERIFY(dev_addr > 0 && dev_addr <= TOTAL_DEVICES, NULL);
 8004728:	7ebb      	ldrb	r3, [r7, #26]
 800472a:	2b00      	cmp	r3, #0
 800472c:	d002      	beq.n	8004734 <tuh_task_ext+0x240>
 800472e:	7ebb      	ldrb	r3, [r7, #26]
 8004730:	2b01      	cmp	r3, #1
 8004732:	d901      	bls.n	8004738 <tuh_task_ext+0x244>
 8004734:	2300      	movs	r3, #0
 8004736:	e006      	b.n	8004746 <tuh_task_ext+0x252>
  return &_usbh_devices[dev_addr-1];
 8004738:	7ebb      	ldrb	r3, [r7, #26]
 800473a:	3b01      	subs	r3, #1
 800473c:	225e      	movs	r2, #94	@ 0x5e
 800473e:	fb02 f303 	mul.w	r3, r2, r3
 8004742:	4a1d      	ldr	r2, [pc, #116]	@ (80047b8 <tuh_task_ext+0x2c4>)
 8004744:	4413      	add	r3, r2
          usbh_device_t* dev = get_device(event.dev_addr);
 8004746:	663b      	str	r3, [r7, #96]	@ 0x60
          TU_VERIFY(dev && dev->connected,);
 8004748:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800474a:	2b00      	cmp	r3, #0
 800474c:	d073      	beq.n	8004836 <tuh_task_ext+0x342>
 800474e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004750:	7d1b      	ldrb	r3, [r3, #20]
 8004752:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8004756:	b2db      	uxtb	r3, r3
 8004758:	2b00      	cmp	r3, #0
 800475a:	d06c      	beq.n	8004836 <tuh_task_ext+0x342>
          dev->ep_status[epnum][ep_dir].busy = 0;
 800475c:	f897 2066 	ldrb.w	r2, [r7, #102]	@ 0x66
 8004760:	f897 3065 	ldrb.w	r3, [r7, #101]	@ 0x65
 8004764:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 8004766:	0052      	lsls	r2, r2, #1
 8004768:	440a      	add	r2, r1
 800476a:	4413      	add	r3, r2
 800476c:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 8004770:	7953      	ldrb	r3, [r2, #5]
 8004772:	f023 0301 	bic.w	r3, r3, #1
 8004776:	7153      	strb	r3, [r2, #5]
          dev->ep_status[epnum][ep_dir].claimed = 0;
 8004778:	f897 2066 	ldrb.w	r2, [r7, #102]	@ 0x66
 800477c:	f897 3065 	ldrb.w	r3, [r7, #101]	@ 0x65
 8004780:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 8004782:	0052      	lsls	r2, r2, #1
 8004784:	440a      	add	r2, r1
 8004786:	4413      	add	r3, r2
 8004788:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 800478c:	7953      	ldrb	r3, [r2, #5]
 800478e:	f023 0304 	bic.w	r3, r3, #4
 8004792:	7153      	strb	r3, [r2, #5]
          if (0 == epnum) {
 8004794:	f897 3066 	ldrb.w	r3, [r7, #102]	@ 0x66
 8004798:	2b00      	cmp	r3, #0
 800479a:	d10f      	bne.n	80047bc <tuh_task_ext+0x2c8>
            usbh_control_xfer_cb(event.dev_addr, ep_addr, (xfer_result_t) event.xfer_complete.result, event.xfer_complete.len);
 800479c:	7bb8      	ldrb	r0, [r7, #14]
 800479e:	7c7a      	ldrb	r2, [r7, #17]
 80047a0:	697b      	ldr	r3, [r7, #20]
 80047a2:	f897 1067 	ldrb.w	r1, [r7, #103]	@ 0x67
 80047a6:	f000 f9b3 	bl	8004b10 <usbh_control_xfer_cb>
        break;
 80047aa:	e03c      	b.n	8004826 <tuh_task_ext+0x332>
 80047ac:	20000aac 	.word	0x20000aac
 80047b0:	20000020 	.word	0x20000020
 80047b4:	e000edf0 	.word	0xe000edf0
 80047b8:	2000098c 	.word	0x2000098c
              uint8_t drv_id = dev->ep2drv[epnum][ep_dir];
 80047bc:	f897 2066 	ldrb.w	r2, [r7, #102]	@ 0x66
 80047c0:	f897 3065 	ldrb.w	r3, [r7, #101]	@ 0x65
 80047c4:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 80047c6:	0052      	lsls	r2, r2, #1
 80047c8:	440a      	add	r2, r1
 80047ca:	4413      	add	r3, r2
 80047cc:	331d      	adds	r3, #29
 80047ce:	781b      	ldrb	r3, [r3, #0]
 80047d0:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
              usbh_class_driver_t const* driver = get_driver(drv_id);
 80047d4:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 80047d8:	4618      	mov	r0, r3
 80047da:	f7ff fcf7 	bl	80041cc <get_driver>
 80047de:	65b8      	str	r0, [r7, #88]	@ 0x58
              if (driver) {
 80047e0:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80047e2:	2b00      	cmp	r3, #0
 80047e4:	d008      	beq.n	80047f8 <tuh_task_ext+0x304>
                driver->xfer_cb(event.dev_addr, ep_addr, (xfer_result_t) event.xfer_complete.result,
 80047e6:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80047e8:	695c      	ldr	r4, [r3, #20]
 80047ea:	7bb8      	ldrb	r0, [r7, #14]
 80047ec:	7c7a      	ldrb	r2, [r7, #17]
 80047ee:	697b      	ldr	r3, [r7, #20]
 80047f0:	f897 1067 	ldrb.w	r1, [r7, #103]	@ 0x67
 80047f4:	47a0      	blx	r4
        break;
 80047f6:	e016      	b.n	8004826 <tuh_task_ext+0x332>
                TU_ASSERT(false,);
 80047f8:	4b10      	ldr	r3, [pc, #64]	@ (800483c <tuh_task_ext+0x348>)
 80047fa:	657b      	str	r3, [r7, #84]	@ 0x54
 80047fc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	f003 0301 	and.w	r3, r3, #1
 8004804:	2b00      	cmp	r3, #0
 8004806:	d015      	beq.n	8004834 <tuh_task_ext+0x340>
 8004808:	be00      	bkpt	0x0000
 800480a:	e013      	b.n	8004834 <tuh_task_ext+0x340>
      }

      case USBH_EVENT_FUNC_CALL:
        if (event.func_call.func) event.func_call.func(event.func_call.param);
 800480c:	693b      	ldr	r3, [r7, #16]
 800480e:	2b00      	cmp	r3, #0
 8004810:	d008      	beq.n	8004824 <tuh_task_ext+0x330>
 8004812:	693b      	ldr	r3, [r7, #16]
 8004814:	697a      	ldr	r2, [r7, #20]
 8004816:	4610      	mov	r0, r2
 8004818:	4798      	blx	r3
        break;
 800481a:	e003      	b.n	8004824 <tuh_task_ext+0x330>

      default:
        break;
 800481c:	bf00      	nop
 800481e:	e678      	b.n	8004512 <tuh_task_ext+0x1e>
        break;
 8004820:	bf00      	nop
 8004822:	e676      	b.n	8004512 <tuh_task_ext+0x1e>
        break;
 8004824:	bf00      	nop
  while (1) {
 8004826:	e674      	b.n	8004512 <tuh_task_ext+0x1e>
    return;
 8004828:	bf00      	nop
 800482a:	e004      	b.n	8004836 <tuh_task_ext+0x342>
    if (!osal_queue_receive(_usbh_q, &event, timeout_ms)) { return; }
 800482c:	bf00      	nop
 800482e:	e002      	b.n	8004836 <tuh_task_ext+0x342>
          TU_ASSERT(epnum == 0,);
 8004830:	bf00      	nop
 8004832:	e000      	b.n	8004836 <tuh_task_ext+0x342>
                TU_ASSERT(false,);
 8004834:	bf00      	nop
#if CFG_TUSB_OS != OPT_OS_NONE && CFG_TUSB_OS != OPT_OS_PICO
    // return if there is no more events, for application to run other background
    if (osal_queue_empty(_usbh_q)) return;
#endif
  }
}
 8004836:	376c      	adds	r7, #108	@ 0x6c
 8004838:	46bd      	mov	sp, r7
 800483a:	bd90      	pop	{r4, r7, pc}
 800483c:	e000edf0 	.word	0xe000edf0

08004840 <_control_blocking_complete_cb>:

//--------------------------------------------------------------------+
// Control transfer
//--------------------------------------------------------------------+

static void _control_blocking_complete_cb(tuh_xfer_t* xfer) {
 8004840:	b480      	push	{r7}
 8004842:	b083      	sub	sp, #12
 8004844:	af00      	add	r7, sp, #0
 8004846:	6078      	str	r0, [r7, #4]
  // update result
  *((xfer_result_t*) xfer->user_data) = xfer->result;
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	695b      	ldr	r3, [r3, #20]
 800484c:	461a      	mov	r2, r3
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	78db      	ldrb	r3, [r3, #3]
 8004852:	7013      	strb	r3, [r2, #0]
}
 8004854:	bf00      	nop
 8004856:	370c      	adds	r7, #12
 8004858:	46bd      	mov	sp, r7
 800485a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800485e:	4770      	bx	lr

08004860 <tuh_control_xfer>:

// TODO timeout_ms is not supported yet
bool tuh_control_xfer (tuh_xfer_t* xfer) {
 8004860:	b580      	push	{r7, lr}
 8004862:	b08c      	sub	sp, #48	@ 0x30
 8004864:	af00      	add	r7, sp, #0
 8004866:	6078      	str	r0, [r7, #4]
  TU_VERIFY(xfer->ep_addr == 0 && xfer->setup); // EP0 with setup packet
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	785b      	ldrb	r3, [r3, #1]
 800486c:	2b00      	cmp	r3, #0
 800486e:	d103      	bne.n	8004878 <tuh_control_xfer+0x18>
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	689b      	ldr	r3, [r3, #8]
 8004874:	2b00      	cmp	r3, #0
 8004876:	d101      	bne.n	800487c <tuh_control_xfer+0x1c>
 8004878:	2300      	movs	r3, #0
 800487a:	e0ea      	b.n	8004a52 <tuh_control_xfer+0x1f2>
  const uint8_t daddr = xfer->daddr;
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	781b      	ldrb	r3, [r3, #0]
 8004880:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  TU_VERIFY(tuh_connected(daddr));
 8004884:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8004888:	4618      	mov	r0, r3
 800488a:	f7ff fcd3 	bl	8004234 <tuh_connected>
 800488e:	4603      	mov	r3, r0
 8004890:	f083 0301 	eor.w	r3, r3, #1
 8004894:	b2db      	uxtb	r3, r3
 8004896:	2b00      	cmp	r3, #0
 8004898:	d001      	beq.n	800489e <tuh_control_xfer+0x3e>
 800489a:	2300      	movs	r3, #0
 800489c:	e0d9      	b.n	8004a52 <tuh_control_xfer+0x1f2>

  usbh_ctrl_xfer_info_t* ctrl_info = &_usbh_data.ctrl_xfer_info;
 800489e:	4b6f      	ldr	r3, [pc, #444]	@ (8004a5c <tuh_control_xfer+0x1fc>)
 80048a0:	62bb      	str	r3, [r7, #40]	@ 0x28

  TU_VERIFY(ctrl_info->stage == CONTROL_STAGE_IDLE); // pre-check to help reducing mutex lock
 80048a2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80048a4:	7b1b      	ldrb	r3, [r3, #12]
 80048a6:	b2db      	uxtb	r3, r3
 80048a8:	2b00      	cmp	r3, #0
 80048aa:	d001      	beq.n	80048b0 <tuh_control_xfer+0x50>
 80048ac:	2300      	movs	r3, #0
 80048ae:	e0d0      	b.n	8004a52 <tuh_control_xfer+0x1f2>
  (void) osal_mutex_lock(_usbh_mutex, OSAL_TIMEOUT_WAIT_FOREVER);
  bool const is_idle = (ctrl_info->stage == CONTROL_STAGE_IDLE);
 80048b0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80048b2:	7b1b      	ldrb	r3, [r3, #12]
 80048b4:	b2db      	uxtb	r3, r3
 80048b6:	2b00      	cmp	r3, #0
 80048b8:	bf0c      	ite	eq
 80048ba:	2301      	moveq	r3, #1
 80048bc:	2300      	movne	r3, #0
 80048be:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  if (is_idle) {
 80048c2:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80048c6:	2b00      	cmp	r3, #0
 80048c8:	d01e      	beq.n	8004908 <tuh_control_xfer+0xa8>
    ctrl_info->stage        = CONTROL_STAGE_SETUP;
 80048ca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80048cc:	2201      	movs	r2, #1
 80048ce:	731a      	strb	r2, [r3, #12]
    ctrl_info->daddr        = daddr;
 80048d0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80048d2:	f897 202f 	ldrb.w	r2, [r7, #47]	@ 0x2f
 80048d6:	735a      	strb	r2, [r3, #13]
    ctrl_info->actual_len   = 0;
 80048d8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80048da:	2200      	movs	r2, #0
 80048dc:	81da      	strh	r2, [r3, #14]
    ctrl_info->failed_count = 0;
 80048de:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80048e0:	2200      	movs	r2, #0
 80048e2:	741a      	strb	r2, [r3, #16]

    ctrl_info->buffer       = xfer->buffer;
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	68da      	ldr	r2, [r3, #12]
 80048e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80048ea:	601a      	str	r2, [r3, #0]
    ctrl_info->complete_cb  = xfer->complete_cb;
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	691a      	ldr	r2, [r3, #16]
 80048f0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80048f2:	605a      	str	r2, [r3, #4]
    ctrl_info->user_data    = xfer->user_data;
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	695a      	ldr	r2, [r3, #20]
 80048f8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80048fa:	609a      	str	r2, [r3, #8]
    _usbh_epbuf.request     = (*xfer->setup);
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	689a      	ldr	r2, [r3, #8]
 8004900:	4b57      	ldr	r3, [pc, #348]	@ (8004a60 <tuh_control_xfer+0x200>)
 8004902:	6810      	ldr	r0, [r2, #0]
 8004904:	6851      	ldr	r1, [r2, #4]
 8004906:	c303      	stmia	r3!, {r0, r1}
  }
  (void) osal_mutex_unlock(_usbh_mutex);

  TU_VERIFY(is_idle);
 8004908:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800490c:	f083 0301 	eor.w	r3, r3, #1
 8004910:	b2db      	uxtb	r3, r3
 8004912:	2b00      	cmp	r3, #0
 8004914:	d001      	beq.n	800491a <tuh_control_xfer+0xba>
 8004916:	2300      	movs	r3, #0
 8004918:	e09b      	b.n	8004a52 <tuh_control_xfer+0x1f2>
  TU_LOG_USBH("[%u:%u] %s: ", usbh_get_rhport(daddr), daddr,
              (xfer->setup->bmRequestType_bit.type == TUSB_REQ_TYPE_STANDARD && xfer->setup->bRequest <= TUSB_REQ_SYNCH_FRAME) ?
                  tu_str_std_request[xfer->setup->bRequest] : "Class Request");
  TU_LOG_BUF_USBH(xfer->setup, 8);

  if (xfer->complete_cb) {
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	691b      	ldr	r3, [r3, #16]
 800491e:	2b00      	cmp	r3, #0
 8004920:	d035      	beq.n	800498e <tuh_control_xfer+0x12e>
 8004922:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8004926:	76fb      	strb	r3, [r7, #27]
 8004928:	4b4d      	ldr	r3, [pc, #308]	@ (8004a60 <tuh_control_xfer+0x200>)
 800492a:	617b      	str	r3, [r7, #20]
  const uint8_t rhport = usbh_get_rhport(daddr);
 800492c:	7efb      	ldrb	r3, [r7, #27]
 800492e:	4618      	mov	r0, r3
 8004930:	f000 faec 	bl	8004f0c <usbh_get_rhport>
 8004934:	4603      	mov	r3, r0
 8004936:	74fb      	strb	r3, [r7, #19]
  const bool ret = hcd_setup_send(rhport, daddr, setup_packet);
 8004938:	7ef9      	ldrb	r1, [r7, #27]
 800493a:	7cfb      	ldrb	r3, [r7, #19]
 800493c:	697a      	ldr	r2, [r7, #20]
 800493e:	4618      	mov	r0, r3
 8004940:	f003 f916 	bl	8007b70 <hcd_setup_send>
 8004944:	4603      	mov	r3, r0
 8004946:	74bb      	strb	r3, [r7, #18]
  if (!ret) {
 8004948:	7cbb      	ldrb	r3, [r7, #18]
 800494a:	f083 0301 	eor.w	r3, r3, #1
 800494e:	b2db      	uxtb	r3, r3
 8004950:	2b00      	cmp	r3, #0
 8004952:	d00b      	beq.n	800496c <tuh_control_xfer+0x10c>
 8004954:	2300      	movs	r3, #0
 8004956:	747b      	strb	r3, [r7, #17]
  if (_usbh_data.ctrl_xfer_info.stage != stage) {
 8004958:	4b42      	ldr	r3, [pc, #264]	@ (8004a64 <tuh_control_xfer+0x204>)
 800495a:	7d1b      	ldrb	r3, [r3, #20]
 800495c:	b2db      	uxtb	r3, r3
 800495e:	7c7a      	ldrb	r2, [r7, #17]
 8004960:	429a      	cmp	r2, r3
 8004962:	d002      	beq.n	800496a <tuh_control_xfer+0x10a>
    _usbh_data.ctrl_xfer_info.stage = stage;
 8004964:	4a3f      	ldr	r2, [pc, #252]	@ (8004a64 <tuh_control_xfer+0x204>)
 8004966:	7c7b      	ldrb	r3, [r7, #17]
 8004968:	7513      	strb	r3, [r2, #20]
}
 800496a:	bf00      	nop
  return ret;
 800496c:	7cbb      	ldrb	r3, [r7, #18]
    TU_ASSERT(usbh_setup_send(daddr, (uint8_t const *) &_usbh_epbuf.request));
 800496e:	f083 0301 	eor.w	r3, r3, #1
 8004972:	b2db      	uxtb	r3, r3
 8004974:	2b00      	cmp	r3, #0
 8004976:	d06b      	beq.n	8004a50 <tuh_control_xfer+0x1f0>
 8004978:	4b3b      	ldr	r3, [pc, #236]	@ (8004a68 <tuh_control_xfer+0x208>)
 800497a:	61fb      	str	r3, [r7, #28]
 800497c:	69fb      	ldr	r3, [r7, #28]
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	f003 0301 	and.w	r3, r3, #1
 8004984:	2b00      	cmp	r3, #0
 8004986:	d000      	beq.n	800498a <tuh_control_xfer+0x12a>
 8004988:	be00      	bkpt	0x0000
 800498a:	2300      	movs	r3, #0
 800498c:	e061      	b.n	8004a52 <tuh_control_xfer+0x1f2>
  }else {
    // blocking if complete callback is not provided
    // change callback to internal blocking, and result as user argument
    volatile xfer_result_t result = XFER_RESULT_INVALID;
 800498e:	2304      	movs	r3, #4
 8004990:	723b      	strb	r3, [r7, #8]

    // use user_data to point to xfer_result_t
    ctrl_info->user_data   = (uintptr_t) &result;
 8004992:	f107 0208 	add.w	r2, r7, #8
 8004996:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004998:	609a      	str	r2, [r3, #8]
    ctrl_info->complete_cb = _control_blocking_complete_cb;
 800499a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800499c:	4a33      	ldr	r2, [pc, #204]	@ (8004a6c <tuh_control_xfer+0x20c>)
 800499e:	605a      	str	r2, [r3, #4]
 80049a0:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80049a4:	743b      	strb	r3, [r7, #16]
 80049a6:	4b2e      	ldr	r3, [pc, #184]	@ (8004a60 <tuh_control_xfer+0x200>)
 80049a8:	60fb      	str	r3, [r7, #12]
  const uint8_t rhport = usbh_get_rhport(daddr);
 80049aa:	7c3b      	ldrb	r3, [r7, #16]
 80049ac:	4618      	mov	r0, r3
 80049ae:	f000 faad 	bl	8004f0c <usbh_get_rhport>
 80049b2:	4603      	mov	r3, r0
 80049b4:	72fb      	strb	r3, [r7, #11]
  const bool ret = hcd_setup_send(rhport, daddr, setup_packet);
 80049b6:	7c39      	ldrb	r1, [r7, #16]
 80049b8:	7afb      	ldrb	r3, [r7, #11]
 80049ba:	68fa      	ldr	r2, [r7, #12]
 80049bc:	4618      	mov	r0, r3
 80049be:	f003 f8d7 	bl	8007b70 <hcd_setup_send>
 80049c2:	4603      	mov	r3, r0
 80049c4:	72bb      	strb	r3, [r7, #10]
  if (!ret) {
 80049c6:	7abb      	ldrb	r3, [r7, #10]
 80049c8:	f083 0301 	eor.w	r3, r3, #1
 80049cc:	b2db      	uxtb	r3, r3
 80049ce:	2b00      	cmp	r3, #0
 80049d0:	d00b      	beq.n	80049ea <tuh_control_xfer+0x18a>
 80049d2:	2300      	movs	r3, #0
 80049d4:	727b      	strb	r3, [r7, #9]
  if (_usbh_data.ctrl_xfer_info.stage != stage) {
 80049d6:	4b23      	ldr	r3, [pc, #140]	@ (8004a64 <tuh_control_xfer+0x204>)
 80049d8:	7d1b      	ldrb	r3, [r3, #20]
 80049da:	b2db      	uxtb	r3, r3
 80049dc:	7a7a      	ldrb	r2, [r7, #9]
 80049de:	429a      	cmp	r2, r3
 80049e0:	d002      	beq.n	80049e8 <tuh_control_xfer+0x188>
    _usbh_data.ctrl_xfer_info.stage = stage;
 80049e2:	4a20      	ldr	r2, [pc, #128]	@ (8004a64 <tuh_control_xfer+0x204>)
 80049e4:	7a7b      	ldrb	r3, [r7, #9]
 80049e6:	7513      	strb	r3, [r2, #20]
}
 80049e8:	bf00      	nop
  return ret;
 80049ea:	7abb      	ldrb	r3, [r7, #10]

    TU_ASSERT(usbh_setup_send(daddr, (uint8_t const *) &_usbh_epbuf.request));
 80049ec:	f083 0301 	eor.w	r3, r3, #1
 80049f0:	b2db      	uxtb	r3, r3
 80049f2:	2b00      	cmp	r3, #0
 80049f4:	d015      	beq.n	8004a22 <tuh_control_xfer+0x1c2>
 80049f6:	4b1c      	ldr	r3, [pc, #112]	@ (8004a68 <tuh_control_xfer+0x208>)
 80049f8:	623b      	str	r3, [r7, #32]
 80049fa:	6a3b      	ldr	r3, [r7, #32]
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	f003 0301 	and.w	r3, r3, #1
 8004a02:	2b00      	cmp	r3, #0
 8004a04:	d000      	beq.n	8004a08 <tuh_control_xfer+0x1a8>
 8004a06:	be00      	bkpt	0x0000
 8004a08:	2300      	movs	r3, #0
 8004a0a:	e022      	b.n	8004a52 <tuh_control_xfer+0x1f2>

    while (result == XFER_RESULT_INVALID) {
      // Note: this can be called within an callback ie. part of tuh_task()
      // therefore event with RTOS tuh_task() still need to be invoked
      if (tuh_task_event_ready()) {
 8004a0c:	f7ff fd4a 	bl	80044a4 <tuh_task_event_ready>
 8004a10:	4603      	mov	r3, r0
 8004a12:	2b00      	cmp	r3, #0
 8004a14:	d005      	beq.n	8004a22 <tuh_control_xfer+0x1c2>
// - in_isr: if function is called in ISR
void tuh_task_ext(uint32_t timeout_ms, bool in_isr);

// Task function should be called in main/rtos loop
TU_ATTR_ALWAYS_INLINE static inline void tuh_task(void) {
  tuh_task_ext(UINT32_MAX, false);
 8004a16:	2100      	movs	r1, #0
 8004a18:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8004a1c:	f7ff fd6a 	bl	80044f4 <tuh_task_ext>
}
 8004a20:	bf00      	nop
    while (result == XFER_RESULT_INVALID) {
 8004a22:	7a3b      	ldrb	r3, [r7, #8]
 8004a24:	b2db      	uxtb	r3, r3
 8004a26:	2b04      	cmp	r3, #4
 8004a28:	d0f0      	beq.n	8004a0c <tuh_control_xfer+0x1ac>
      }
      // TODO probably some timeout to prevent hanged
    }

    // update transfer result, user_data is expected to point to xfer_result_t
    if (xfer->user_data != 0) {
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	695b      	ldr	r3, [r3, #20]
 8004a2e:	2b00      	cmp	r3, #0
 8004a30:	d004      	beq.n	8004a3c <tuh_control_xfer+0x1dc>
      *((xfer_result_t*) xfer->user_data) = result;
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	695b      	ldr	r3, [r3, #20]
 8004a36:	7a3a      	ldrb	r2, [r7, #8]
 8004a38:	b2d2      	uxtb	r2, r2
 8004a3a:	701a      	strb	r2, [r3, #0]
    }
    xfer->result     = result;
 8004a3c:	7a3b      	ldrb	r3, [r7, #8]
 8004a3e:	b2da      	uxtb	r2, r3
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	70da      	strb	r2, [r3, #3]
    xfer->actual_len = ctrl_info->actual_len;
 8004a44:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004a46:	89db      	ldrh	r3, [r3, #14]
 8004a48:	b29b      	uxth	r3, r3
 8004a4a:	461a      	mov	r2, r3
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	605a      	str	r2, [r3, #4]
  }

  return true;
 8004a50:	2301      	movs	r3, #1
}
 8004a52:	4618      	mov	r0, r3
 8004a54:	3730      	adds	r7, #48	@ 0x30
 8004a56:	46bd      	mov	sp, r7
 8004a58:	bd80      	pop	{r7, pc}
 8004a5a:	bf00      	nop
 8004a5c:	20000028 	.word	0x20000028
 8004a60:	20000ab0 	.word	0x20000ab0
 8004a64:	20000020 	.word	0x20000020
 8004a68:	e000edf0 	.word	0xe000edf0
 8004a6c:	08004841 	.word	0x08004841

08004a70 <_control_xfer_complete>:

static void _control_xfer_complete(uint8_t daddr, xfer_result_t result) {
 8004a70:	b580      	push	{r7, lr}
 8004a72:	b08c      	sub	sp, #48	@ 0x30
 8004a74:	af00      	add	r7, sp, #0
 8004a76:	4603      	mov	r3, r0
 8004a78:	460a      	mov	r2, r1
 8004a7a:	71fb      	strb	r3, [r7, #7]
 8004a7c:	4613      	mov	r3, r2
 8004a7e:	71bb      	strb	r3, [r7, #6]
  TU_LOG_USBH("\r\n");
  usbh_ctrl_xfer_info_t* ctrl_info = &_usbh_data.ctrl_xfer_info;
 8004a80:	4b20      	ldr	r3, [pc, #128]	@ (8004b04 <_control_xfer_complete+0x94>)
 8004a82:	62fb      	str	r3, [r7, #44]	@ 0x2c

  // duplicate xfer since user can execute control transfer within callback
  tusb_control_request_t const request = _usbh_epbuf.request;
 8004a84:	4a20      	ldr	r2, [pc, #128]	@ (8004b08 <_control_xfer_complete+0x98>)
 8004a86:	f107 0320 	add.w	r3, r7, #32
 8004a8a:	e892 0003 	ldmia.w	r2, {r0, r1}
 8004a8e:	e883 0003 	stmia.w	r3, {r0, r1}
  tuh_xfer_t xfer_temp = {
 8004a92:	f107 0308 	add.w	r3, r7, #8
 8004a96:	2200      	movs	r2, #0
 8004a98:	601a      	str	r2, [r3, #0]
 8004a9a:	605a      	str	r2, [r3, #4]
 8004a9c:	609a      	str	r2, [r3, #8]
 8004a9e:	60da      	str	r2, [r3, #12]
 8004aa0:	611a      	str	r2, [r3, #16]
 8004aa2:	615a      	str	r2, [r3, #20]
 8004aa4:	79fb      	ldrb	r3, [r7, #7]
 8004aa6:	723b      	strb	r3, [r7, #8]
 8004aa8:	79bb      	ldrb	r3, [r7, #6]
 8004aaa:	72fb      	strb	r3, [r7, #11]
    .daddr       = daddr,
    .ep_addr     = 0,
    .result      = result,
    .setup       = &request,
    .actual_len  = (uint32_t) ctrl_info->actual_len,
 8004aac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004aae:	89db      	ldrh	r3, [r3, #14]
 8004ab0:	b29b      	uxth	r3, r3
  tuh_xfer_t xfer_temp = {
 8004ab2:	60fb      	str	r3, [r7, #12]
 8004ab4:	f107 0320 	add.w	r3, r7, #32
 8004ab8:	613b      	str	r3, [r7, #16]
    .buffer      = ctrl_info->buffer,
 8004aba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004abc:	681b      	ldr	r3, [r3, #0]
  tuh_xfer_t xfer_temp = {
 8004abe:	617b      	str	r3, [r7, #20]
    .complete_cb = ctrl_info->complete_cb,
 8004ac0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004ac2:	685b      	ldr	r3, [r3, #4]
  tuh_xfer_t xfer_temp = {
 8004ac4:	61bb      	str	r3, [r7, #24]
    .user_data   = ctrl_info->user_data
 8004ac6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004ac8:	689b      	ldr	r3, [r3, #8]
  tuh_xfer_t xfer_temp = {
 8004aca:	61fb      	str	r3, [r7, #28]
 8004acc:	2300      	movs	r3, #0
 8004ace:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
  if (_usbh_data.ctrl_xfer_info.stage != stage) {
 8004ad2:	4b0e      	ldr	r3, [pc, #56]	@ (8004b0c <_control_xfer_complete+0x9c>)
 8004ad4:	7d1b      	ldrb	r3, [r3, #20]
 8004ad6:	b2db      	uxtb	r3, r3
 8004ad8:	f897 202b 	ldrb.w	r2, [r7, #43]	@ 0x2b
 8004adc:	429a      	cmp	r2, r3
 8004ade:	d003      	beq.n	8004ae8 <_control_xfer_complete+0x78>
    _usbh_data.ctrl_xfer_info.stage = stage;
 8004ae0:	4a0a      	ldr	r2, [pc, #40]	@ (8004b0c <_control_xfer_complete+0x9c>)
 8004ae2:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8004ae6:	7513      	strb	r3, [r2, #20]
}
 8004ae8:	bf00      	nop
  };

  _control_set_xfer_stage(CONTROL_STAGE_IDLE);

  if (xfer_temp.complete_cb) {
 8004aea:	69bb      	ldr	r3, [r7, #24]
 8004aec:	2b00      	cmp	r3, #0
 8004aee:	d004      	beq.n	8004afa <_control_xfer_complete+0x8a>
    xfer_temp.complete_cb(&xfer_temp);
 8004af0:	69bb      	ldr	r3, [r7, #24]
 8004af2:	f107 0208 	add.w	r2, r7, #8
 8004af6:	4610      	mov	r0, r2
 8004af8:	4798      	blx	r3
  }
}
 8004afa:	bf00      	nop
 8004afc:	3730      	adds	r7, #48	@ 0x30
 8004afe:	46bd      	mov	sp, r7
 8004b00:	bd80      	pop	{r7, pc}
 8004b02:	bf00      	nop
 8004b04:	20000028 	.word	0x20000028
 8004b08:	20000ab0 	.word	0x20000ab0
 8004b0c:	20000020 	.word	0x20000020

08004b10 <usbh_control_xfer_cb>:

static bool usbh_control_xfer_cb (uint8_t daddr, uint8_t ep_addr, xfer_result_t result, uint32_t xferred_bytes) {
 8004b10:	b590      	push	{r4, r7, lr}
 8004b12:	b093      	sub	sp, #76	@ 0x4c
 8004b14:	af02      	add	r7, sp, #8
 8004b16:	603b      	str	r3, [r7, #0]
 8004b18:	4603      	mov	r3, r0
 8004b1a:	71fb      	strb	r3, [r7, #7]
 8004b1c:	460b      	mov	r3, r1
 8004b1e:	71bb      	strb	r3, [r7, #6]
 8004b20:	4613      	mov	r3, r2
 8004b22:	717b      	strb	r3, [r7, #5]
  (void) ep_addr;

  const uint8_t rhport = usbh_get_rhport(daddr);
 8004b24:	79fb      	ldrb	r3, [r7, #7]
 8004b26:	4618      	mov	r0, r3
 8004b28:	f000 f9f0 	bl	8004f0c <usbh_get_rhport>
 8004b2c:	4603      	mov	r3, r0
 8004b2e:	f887 303d 	strb.w	r3, [r7, #61]	@ 0x3d
  tusb_control_request_t const * request = &_usbh_epbuf.request;
 8004b32:	4ba7      	ldr	r3, [pc, #668]	@ (8004dd0 <usbh_control_xfer_cb+0x2c0>)
 8004b34:	63bb      	str	r3, [r7, #56]	@ 0x38
  usbh_ctrl_xfer_info_t* ctrl_info = &_usbh_data.ctrl_xfer_info;
 8004b36:	4ba7      	ldr	r3, [pc, #668]	@ (8004dd4 <usbh_control_xfer_cb+0x2c4>)
 8004b38:	637b      	str	r3, [r7, #52]	@ 0x34

  switch (result) {
 8004b3a:	797b      	ldrb	r3, [r7, #5]
 8004b3c:	2b02      	cmp	r3, #2
 8004b3e:	d007      	beq.n	8004b50 <usbh_control_xfer_cb+0x40>
 8004b40:	2b02      	cmp	r3, #2
 8004b42:	f300 8142 	bgt.w	8004dca <usbh_control_xfer_cb+0x2ba>
 8004b46:	2b00      	cmp	r3, #0
 8004b48:	d05d      	beq.n	8004c06 <usbh_control_xfer_cb+0xf6>
 8004b4a:	2b01      	cmp	r3, #1
 8004b4c:	d007      	beq.n	8004b5e <usbh_control_xfer_cb+0x4e>
 8004b4e:	e13c      	b.n	8004dca <usbh_control_xfer_cb+0x2ba>
    case XFER_RESULT_STALLED:
      TU_LOG_USBH("[%u:%u] Control STALLED, xferred_bytes = %" PRIu32 "\r\n", rhport, daddr, xferred_bytes);
      TU_LOG_BUF_USBH(request, 8);
      _control_xfer_complete(daddr, result);
 8004b50:	797a      	ldrb	r2, [r7, #5]
 8004b52:	79fb      	ldrb	r3, [r7, #7]
 8004b54:	4611      	mov	r1, r2
 8004b56:	4618      	mov	r0, r3
 8004b58:	f7ff ff8a 	bl	8004a70 <_control_xfer_complete>
    break;
 8004b5c:	e140      	b.n	8004de0 <usbh_control_xfer_cb+0x2d0>

    case XFER_RESULT_FAILED:
      if (tuh_connected(daddr) && ctrl_info->failed_count < USBH_CONTROL_RETRY_MAX) {
 8004b5e:	79fb      	ldrb	r3, [r7, #7]
 8004b60:	4618      	mov	r0, r3
 8004b62:	f7ff fb67 	bl	8004234 <tuh_connected>
 8004b66:	4603      	mov	r3, r0
 8004b68:	2b00      	cmp	r3, #0
 8004b6a:	d044      	beq.n	8004bf6 <usbh_control_xfer_cb+0xe6>
 8004b6c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004b6e:	7c1b      	ldrb	r3, [r3, #16]
 8004b70:	2b02      	cmp	r3, #2
 8004b72:	d840      	bhi.n	8004bf6 <usbh_control_xfer_cb+0xe6>
        TU_LOG_USBH("[%u:%u] Control FAILED %u/%u, retrying\r\n", rhport, daddr, ctrl_info->failed_count+1, USBH_CONTROL_RETRY_MAX);
        (void) osal_mutex_lock(_usbh_mutex, OSAL_TIMEOUT_WAIT_FOREVER);
        ctrl_info->stage = CONTROL_STAGE_SETUP;
 8004b74:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004b76:	2201      	movs	r2, #1
 8004b78:	731a      	strb	r2, [r3, #12]
        ctrl_info->failed_count++;
 8004b7a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004b7c:	7c1b      	ldrb	r3, [r3, #16]
 8004b7e:	3301      	adds	r3, #1
 8004b80:	b2da      	uxtb	r2, r3
 8004b82:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004b84:	741a      	strb	r2, [r3, #16]
        ctrl_info->actual_len = 0; // reset actual_len
 8004b86:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004b88:	2200      	movs	r2, #0
 8004b8a:	81da      	strh	r2, [r3, #14]
 8004b8c:	79fb      	ldrb	r3, [r7, #7]
 8004b8e:	77fb      	strb	r3, [r7, #31]
 8004b90:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004b92:	61bb      	str	r3, [r7, #24]
  const uint8_t rhport = usbh_get_rhport(daddr);
 8004b94:	7ffb      	ldrb	r3, [r7, #31]
 8004b96:	4618      	mov	r0, r3
 8004b98:	f000 f9b8 	bl	8004f0c <usbh_get_rhport>
 8004b9c:	4603      	mov	r3, r0
 8004b9e:	75fb      	strb	r3, [r7, #23]
  const bool ret = hcd_setup_send(rhport, daddr, setup_packet);
 8004ba0:	7ff9      	ldrb	r1, [r7, #31]
 8004ba2:	7dfb      	ldrb	r3, [r7, #23]
 8004ba4:	69ba      	ldr	r2, [r7, #24]
 8004ba6:	4618      	mov	r0, r3
 8004ba8:	f002 ffe2 	bl	8007b70 <hcd_setup_send>
 8004bac:	4603      	mov	r3, r0
 8004bae:	75bb      	strb	r3, [r7, #22]
  if (!ret) {
 8004bb0:	7dbb      	ldrb	r3, [r7, #22]
 8004bb2:	f083 0301 	eor.w	r3, r3, #1
 8004bb6:	b2db      	uxtb	r3, r3
 8004bb8:	2b00      	cmp	r3, #0
 8004bba:	d00b      	beq.n	8004bd4 <usbh_control_xfer_cb+0xc4>
 8004bbc:	2300      	movs	r3, #0
 8004bbe:	757b      	strb	r3, [r7, #21]
  if (_usbh_data.ctrl_xfer_info.stage != stage) {
 8004bc0:	4b85      	ldr	r3, [pc, #532]	@ (8004dd8 <usbh_control_xfer_cb+0x2c8>)
 8004bc2:	7d1b      	ldrb	r3, [r3, #20]
 8004bc4:	b2db      	uxtb	r3, r3
 8004bc6:	7d7a      	ldrb	r2, [r7, #21]
 8004bc8:	429a      	cmp	r2, r3
 8004bca:	d002      	beq.n	8004bd2 <usbh_control_xfer_cb+0xc2>
    _usbh_data.ctrl_xfer_info.stage = stage;
 8004bcc:	4a82      	ldr	r2, [pc, #520]	@ (8004dd8 <usbh_control_xfer_cb+0x2c8>)
 8004bce:	7d7b      	ldrb	r3, [r7, #21]
 8004bd0:	7513      	strb	r3, [r2, #20]
}
 8004bd2:	bf00      	nop
  return ret;
 8004bd4:	7dbb      	ldrb	r3, [r7, #22]
        (void) osal_mutex_unlock(_usbh_mutex);

        TU_ASSERT(usbh_setup_send(daddr, (uint8_t const *) request));
 8004bd6:	f083 0301 	eor.w	r3, r3, #1
 8004bda:	b2db      	uxtb	r3, r3
 8004bdc:	2b00      	cmp	r3, #0
 8004bde:	d011      	beq.n	8004c04 <usbh_control_xfer_cb+0xf4>
 8004be0:	4b7e      	ldr	r3, [pc, #504]	@ (8004ddc <usbh_control_xfer_cb+0x2cc>)
 8004be2:	633b      	str	r3, [r7, #48]	@ 0x30
 8004be4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	f003 0301 	and.w	r3, r3, #1
 8004bec:	2b00      	cmp	r3, #0
 8004bee:	d000      	beq.n	8004bf2 <usbh_control_xfer_cb+0xe2>
 8004bf0:	be00      	bkpt	0x0000
 8004bf2:	2300      	movs	r3, #0
 8004bf4:	e0f5      	b.n	8004de2 <usbh_control_xfer_cb+0x2d2>
      } else {
        TU_LOG_USBH("[%u:%u] Control FAILED, xferred_bytes = %" PRIu32 "\r\n", rhport, daddr, xferred_bytes);
        TU_LOG_BUF_USBH(request, 8);
        _control_xfer_complete(daddr, result);
 8004bf6:	797a      	ldrb	r2, [r7, #5]
 8004bf8:	79fb      	ldrb	r3, [r7, #7]
 8004bfa:	4611      	mov	r1, r2
 8004bfc:	4618      	mov	r0, r3
 8004bfe:	f7ff ff37 	bl	8004a70 <_control_xfer_complete>
      }
    break;
 8004c02:	e0ed      	b.n	8004de0 <usbh_control_xfer_cb+0x2d0>
 8004c04:	e0ec      	b.n	8004de0 <usbh_control_xfer_cb+0x2d0>

    case XFER_RESULT_SUCCESS:
      switch(ctrl_info->stage) {
 8004c06:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004c08:	7b1b      	ldrb	r3, [r3, #12]
 8004c0a:	b2db      	uxtb	r3, r3
 8004c0c:	2b03      	cmp	r3, #3
 8004c0e:	f000 8098 	beq.w	8004d42 <usbh_control_xfer_cb+0x232>
 8004c12:	2b03      	cmp	r3, #3
 8004c14:	f300 80d5 	bgt.w	8004dc2 <usbh_control_xfer_cb+0x2b2>
 8004c18:	2b01      	cmp	r3, #1
 8004c1a:	d002      	beq.n	8004c22 <usbh_control_xfer_cb+0x112>
 8004c1c:	2b02      	cmp	r3, #2
 8004c1e:	d04a      	beq.n	8004cb6 <usbh_control_xfer_cb+0x1a6>
 8004c20:	e0cf      	b.n	8004dc2 <usbh_control_xfer_cb+0x2b2>
        case CONTROL_STAGE_SETUP:
          if (request->wLength) {
 8004c22:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004c24:	88db      	ldrh	r3, [r3, #6]
 8004c26:	b29b      	uxth	r3, r3
 8004c28:	2b00      	cmp	r3, #0
 8004c2a:	d044      	beq.n	8004cb6 <usbh_control_xfer_cb+0x1a6>
 8004c2c:	2302      	movs	r3, #2
 8004c2e:	74bb      	strb	r3, [r7, #18]
  if (_usbh_data.ctrl_xfer_info.stage != stage) {
 8004c30:	4b69      	ldr	r3, [pc, #420]	@ (8004dd8 <usbh_control_xfer_cb+0x2c8>)
 8004c32:	7d1b      	ldrb	r3, [r3, #20]
 8004c34:	b2db      	uxtb	r3, r3
 8004c36:	7cba      	ldrb	r2, [r7, #18]
 8004c38:	429a      	cmp	r2, r3
 8004c3a:	d002      	beq.n	8004c42 <usbh_control_xfer_cb+0x132>
    _usbh_data.ctrl_xfer_info.stage = stage;
 8004c3c:	4a66      	ldr	r2, [pc, #408]	@ (8004dd8 <usbh_control_xfer_cb+0x2c8>)
 8004c3e:	7cbb      	ldrb	r3, [r7, #18]
 8004c40:	7513      	strb	r3, [r2, #20]
}
 8004c42:	bf00      	nop
            // DATA stage: initial data toggle is always 1
            _control_set_xfer_stage(CONTROL_STAGE_DATA);
            const uint8_t ep_data = tu_edpt_addr(0, request->bmRequestType_bit.direction);
 8004c44:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004c46:	781b      	ldrb	r3, [r3, #0]
 8004c48:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8004c4c:	b2db      	uxtb	r3, r3
 8004c4e:	461a      	mov	r2, r3
 8004c50:	2300      	movs	r3, #0
 8004c52:	753b      	strb	r3, [r7, #20]
 8004c54:	4613      	mov	r3, r2
 8004c56:	74fb      	strb	r3, [r7, #19]
  return (uint8_t)(num | (dir ? TUSB_DIR_IN_MASK : 0));
 8004c58:	7cfb      	ldrb	r3, [r7, #19]
 8004c5a:	2b00      	cmp	r3, #0
 8004c5c:	d002      	beq.n	8004c64 <usbh_control_xfer_cb+0x154>
 8004c5e:	f06f 037f 	mvn.w	r3, #127	@ 0x7f
 8004c62:	e000      	b.n	8004c66 <usbh_control_xfer_cb+0x156>
 8004c64:	2300      	movs	r3, #0
 8004c66:	f997 2014 	ldrsb.w	r2, [r7, #20]
 8004c6a:	4313      	orrs	r3, r2
 8004c6c:	b25b      	sxtb	r3, r3
 8004c6e:	b2db      	uxtb	r3, r3
 8004c70:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
            TU_ASSERT(hcd_edpt_xfer(rhport, daddr, ep_data, ctrl_info->buffer, request->wLength));
 8004c74:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004c76:	681c      	ldr	r4, [r3, #0]
 8004c78:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004c7a:	88db      	ldrh	r3, [r3, #6]
 8004c7c:	b29b      	uxth	r3, r3
 8004c7e:	f897 202f 	ldrb.w	r2, [r7, #47]	@ 0x2f
 8004c82:	79f9      	ldrb	r1, [r7, #7]
 8004c84:	f897 003d 	ldrb.w	r0, [r7, #61]	@ 0x3d
 8004c88:	9300      	str	r3, [sp, #0]
 8004c8a:	4623      	mov	r3, r4
 8004c8c:	f002 fd76 	bl	800777c <hcd_edpt_xfer>
 8004c90:	4603      	mov	r3, r0
 8004c92:	f083 0301 	eor.w	r3, r3, #1
 8004c96:	b2db      	uxtb	r3, r3
 8004c98:	2b00      	cmp	r3, #0
 8004c9a:	d00a      	beq.n	8004cb2 <usbh_control_xfer_cb+0x1a2>
 8004c9c:	4b4f      	ldr	r3, [pc, #316]	@ (8004ddc <usbh_control_xfer_cb+0x2cc>)
 8004c9e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004ca0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	f003 0301 	and.w	r3, r3, #1
 8004ca8:	2b00      	cmp	r3, #0
 8004caa:	d000      	beq.n	8004cae <usbh_control_xfer_cb+0x19e>
 8004cac:	be00      	bkpt	0x0000
 8004cae:	2300      	movs	r3, #0
 8004cb0:	e097      	b.n	8004de2 <usbh_control_xfer_cb+0x2d2>
            return true;
 8004cb2:	2301      	movs	r3, #1
 8004cb4:	e095      	b.n	8004de2 <usbh_control_xfer_cb+0x2d2>
          }
          TU_ATTR_FALLTHROUGH;

        case CONTROL_STAGE_DATA:
          if (request->wLength) {
 8004cb6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004cb8:	88db      	ldrh	r3, [r3, #6]
            TU_LOG_USBH("[%u:%u] Control data:\r\n", rhport, daddr);
            TU_LOG_MEM_USBH(ctrl_info->buffer, xferred_bytes, 2);
          }
          ctrl_info->actual_len = (uint16_t) xferred_bytes;
 8004cba:	683b      	ldr	r3, [r7, #0]
 8004cbc:	b29a      	uxth	r2, r3
 8004cbe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004cc0:	81da      	strh	r2, [r3, #14]
 8004cc2:	2303      	movs	r3, #3
 8004cc4:	73fb      	strb	r3, [r7, #15]
  if (_usbh_data.ctrl_xfer_info.stage != stage) {
 8004cc6:	4b44      	ldr	r3, [pc, #272]	@ (8004dd8 <usbh_control_xfer_cb+0x2c8>)
 8004cc8:	7d1b      	ldrb	r3, [r3, #20]
 8004cca:	b2db      	uxtb	r3, r3
 8004ccc:	7bfa      	ldrb	r2, [r7, #15]
 8004cce:	429a      	cmp	r2, r3
 8004cd0:	d002      	beq.n	8004cd8 <usbh_control_xfer_cb+0x1c8>
    _usbh_data.ctrl_xfer_info.stage = stage;
 8004cd2:	4a41      	ldr	r2, [pc, #260]	@ (8004dd8 <usbh_control_xfer_cb+0x2c8>)
 8004cd4:	7bfb      	ldrb	r3, [r7, #15]
 8004cd6:	7513      	strb	r3, [r2, #20]
}
 8004cd8:	bf00      	nop

          // ACK stage: toggle is always 1
          _control_set_xfer_stage(CONTROL_STAGE_ACK);
          const uint8_t ep_status = tu_edpt_addr(0, 1 - request->bmRequestType_bit.direction);
 8004cda:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004cdc:	781b      	ldrb	r3, [r3, #0]
 8004cde:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8004ce2:	b2db      	uxtb	r3, r3
 8004ce4:	f1c3 0301 	rsb	r3, r3, #1
 8004ce8:	b2db      	uxtb	r3, r3
 8004cea:	2200      	movs	r2, #0
 8004cec:	747a      	strb	r2, [r7, #17]
 8004cee:	743b      	strb	r3, [r7, #16]
 8004cf0:	7c3b      	ldrb	r3, [r7, #16]
 8004cf2:	2b00      	cmp	r3, #0
 8004cf4:	d002      	beq.n	8004cfc <usbh_control_xfer_cb+0x1ec>
 8004cf6:	f06f 037f 	mvn.w	r3, #127	@ 0x7f
 8004cfa:	e000      	b.n	8004cfe <usbh_control_xfer_cb+0x1ee>
 8004cfc:	2300      	movs	r3, #0
 8004cfe:	f997 2011 	ldrsb.w	r2, [r7, #17]
 8004d02:	4313      	orrs	r3, r2
 8004d04:	b25b      	sxtb	r3, r3
 8004d06:	b2db      	uxtb	r3, r3
 8004d08:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
          TU_ASSERT(hcd_edpt_xfer(rhport, daddr, ep_status, NULL, 0));
 8004d0c:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 8004d10:	79f9      	ldrb	r1, [r7, #7]
 8004d12:	f897 003d 	ldrb.w	r0, [r7, #61]	@ 0x3d
 8004d16:	2300      	movs	r3, #0
 8004d18:	9300      	str	r3, [sp, #0]
 8004d1a:	2300      	movs	r3, #0
 8004d1c:	f002 fd2e 	bl	800777c <hcd_edpt_xfer>
 8004d20:	4603      	mov	r3, r0
 8004d22:	f083 0301 	eor.w	r3, r3, #1
 8004d26:	b2db      	uxtb	r3, r3
 8004d28:	2b00      	cmp	r3, #0
 8004d2a:	d04c      	beq.n	8004dc6 <usbh_control_xfer_cb+0x2b6>
 8004d2c:	4b2b      	ldr	r3, [pc, #172]	@ (8004ddc <usbh_control_xfer_cb+0x2cc>)
 8004d2e:	623b      	str	r3, [r7, #32]
 8004d30:	6a3b      	ldr	r3, [r7, #32]
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	f003 0301 	and.w	r3, r3, #1
 8004d38:	2b00      	cmp	r3, #0
 8004d3a:	d000      	beq.n	8004d3e <usbh_control_xfer_cb+0x22e>
 8004d3c:	be00      	bkpt	0x0000
 8004d3e:	2300      	movs	r3, #0
 8004d40:	e04f      	b.n	8004de2 <usbh_control_xfer_cb+0x2d2>
          break;

        case CONTROL_STAGE_ACK: {
          // Abort all pending transfers if SET_CONFIGURATION request
          // NOTE: should we force closing all non-control endpoints in the future?
          if (request->bRequest == TUSB_REQ_SET_CONFIGURATION && request->bmRequestType == 0x00) {
 8004d42:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004d44:	785b      	ldrb	r3, [r3, #1]
 8004d46:	2b09      	cmp	r3, #9
 8004d48:	d134      	bne.n	8004db4 <usbh_control_xfer_cb+0x2a4>
 8004d4a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004d4c:	781b      	ldrb	r3, [r3, #0]
 8004d4e:	2b00      	cmp	r3, #0
 8004d50:	d130      	bne.n	8004db4 <usbh_control_xfer_cb+0x2a4>
            for(uint8_t epnum=1; epnum<CFG_TUH_ENDPOINT_MAX; epnum++) {
 8004d52:	2301      	movs	r3, #1
 8004d54:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
 8004d58:	e028      	b.n	8004dac <usbh_control_xfer_cb+0x29c>
              for(uint8_t dir=0; dir<2; dir++) {
 8004d5a:	2300      	movs	r3, #0
 8004d5c:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
 8004d60:	e01b      	b.n	8004d9a <usbh_control_xfer_cb+0x28a>
 8004d62:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8004d66:	73bb      	strb	r3, [r7, #14]
 8004d68:	f897 303e 	ldrb.w	r3, [r7, #62]	@ 0x3e
 8004d6c:	737b      	strb	r3, [r7, #13]
 8004d6e:	7b7b      	ldrb	r3, [r7, #13]
 8004d70:	2b00      	cmp	r3, #0
 8004d72:	d002      	beq.n	8004d7a <usbh_control_xfer_cb+0x26a>
 8004d74:	f06f 037f 	mvn.w	r3, #127	@ 0x7f
 8004d78:	e000      	b.n	8004d7c <usbh_control_xfer_cb+0x26c>
 8004d7a:	2300      	movs	r3, #0
 8004d7c:	f997 200e 	ldrsb.w	r2, [r7, #14]
 8004d80:	4313      	orrs	r3, r2
 8004d82:	b25b      	sxtb	r3, r3
 8004d84:	b2da      	uxtb	r2, r3
                tuh_edpt_abort_xfer(daddr, tu_edpt_addr(epnum, dir));
 8004d86:	79fb      	ldrb	r3, [r7, #7]
 8004d88:	4611      	mov	r1, r2
 8004d8a:	4618      	mov	r0, r3
 8004d8c:	f000 f82e 	bl	8004dec <tuh_edpt_abort_xfer>
              for(uint8_t dir=0; dir<2; dir++) {
 8004d90:	f897 303e 	ldrb.w	r3, [r7, #62]	@ 0x3e
 8004d94:	3301      	adds	r3, #1
 8004d96:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
 8004d9a:	f897 303e 	ldrb.w	r3, [r7, #62]	@ 0x3e
 8004d9e:	2b01      	cmp	r3, #1
 8004da0:	d9df      	bls.n	8004d62 <usbh_control_xfer_cb+0x252>
            for(uint8_t epnum=1; epnum<CFG_TUH_ENDPOINT_MAX; epnum++) {
 8004da2:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8004da6:	3301      	adds	r3, #1
 8004da8:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
 8004dac:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8004db0:	2b0f      	cmp	r3, #15
 8004db2:	d9d2      	bls.n	8004d5a <usbh_control_xfer_cb+0x24a>
              }
            }
          }

          _control_xfer_complete(daddr, result);
 8004db4:	797a      	ldrb	r2, [r7, #5]
 8004db6:	79fb      	ldrb	r3, [r7, #7]
 8004db8:	4611      	mov	r1, r2
 8004dba:	4618      	mov	r0, r3
 8004dbc:	f7ff fe58 	bl	8004a70 <_control_xfer_complete>
          break;
 8004dc0:	e002      	b.n	8004dc8 <usbh_control_xfer_cb+0x2b8>
        }

        default: return false; // unsupported stage
 8004dc2:	2300      	movs	r3, #0
 8004dc4:	e00d      	b.n	8004de2 <usbh_control_xfer_cb+0x2d2>
          break;
 8004dc6:	bf00      	nop
      }
      break;
 8004dc8:	e00a      	b.n	8004de0 <usbh_control_xfer_cb+0x2d0>

    default: return false; // unsupported result
 8004dca:	2300      	movs	r3, #0
 8004dcc:	e009      	b.n	8004de2 <usbh_control_xfer_cb+0x2d2>
 8004dce:	bf00      	nop
 8004dd0:	20000ab0 	.word	0x20000ab0
 8004dd4:	20000028 	.word	0x20000028
 8004dd8:	20000020 	.word	0x20000020
 8004ddc:	e000edf0 	.word	0xe000edf0
  }

  return true;
 8004de0:	2301      	movs	r3, #1
}
 8004de2:	4618      	mov	r0, r3
 8004de4:	3744      	adds	r7, #68	@ 0x44
 8004de6:	46bd      	mov	sp, r7
 8004de8:	bd90      	pop	{r4, r7, pc}
 8004dea:	bf00      	nop

08004dec <tuh_edpt_abort_xfer>:
  }

  return true;
}

bool tuh_edpt_abort_xfer(uint8_t daddr, uint8_t ep_addr) {
 8004dec:	b580      	push	{r7, lr}
 8004dee:	b088      	sub	sp, #32
 8004df0:	af00      	add	r7, sp, #0
 8004df2:	4603      	mov	r3, r0
 8004df4:	460a      	mov	r2, r1
 8004df6:	71fb      	strb	r3, [r7, #7]
 8004df8:	4613      	mov	r3, r2
 8004dfa:	71bb      	strb	r3, [r7, #6]
 8004dfc:	79bb      	ldrb	r3, [r7, #6]
 8004dfe:	73bb      	strb	r3, [r7, #14]
  return (uint8_t)(addr & (~TUSB_DIR_IN_MASK));
 8004e00:	7bbb      	ldrb	r3, [r7, #14]
 8004e02:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004e06:	b2db      	uxtb	r3, r3
  TU_LOG_USBH("[%u] Aborted transfer on EP %02X\r\n", daddr, ep_addr);
  const uint8_t epnum = tu_edpt_number(ep_addr);
 8004e08:	77fb      	strb	r3, [r7, #31]
 8004e0a:	79bb      	ldrb	r3, [r7, #6]
 8004e0c:	73fb      	strb	r3, [r7, #15]
  return (addr & TUSB_DIR_IN_MASK) ? TUSB_DIR_IN : TUSB_DIR_OUT;
 8004e0e:	7bfb      	ldrb	r3, [r7, #15]
 8004e10:	09db      	lsrs	r3, r3, #7
 8004e12:	b2db      	uxtb	r3, r3
  const uint8_t dir   = tu_edpt_dir(ep_addr);
 8004e14:	77bb      	strb	r3, [r7, #30]

  if (epnum == 0) {
 8004e16:	7ffb      	ldrb	r3, [r7, #31]
 8004e18:	2b00      	cmp	r3, #0
 8004e1a:	d125      	bne.n	8004e68 <tuh_edpt_abort_xfer+0x7c>
    // Also include dev0 for aborting enumerating
    const uint8_t rhport = usbh_get_rhport(daddr);
 8004e1c:	79fb      	ldrb	r3, [r7, #7]
 8004e1e:	4618      	mov	r0, r3
 8004e20:	f000 f874 	bl	8004f0c <usbh_get_rhport>
 8004e24:	4603      	mov	r3, r0
 8004e26:	75fb      	strb	r3, [r7, #23]

    // control transfer: only 1 control at a time, check if we are aborting the current one
    const usbh_ctrl_xfer_info_t* ctrl_info = &_usbh_data.ctrl_xfer_info;
 8004e28:	4b35      	ldr	r3, [pc, #212]	@ (8004f00 <tuh_edpt_abort_xfer+0x114>)
 8004e2a:	613b      	str	r3, [r7, #16]
    TU_VERIFY(daddr == ctrl_info->daddr && ctrl_info->stage != CONTROL_STAGE_IDLE);
 8004e2c:	693b      	ldr	r3, [r7, #16]
 8004e2e:	7b5b      	ldrb	r3, [r3, #13]
 8004e30:	79fa      	ldrb	r2, [r7, #7]
 8004e32:	429a      	cmp	r2, r3
 8004e34:	d104      	bne.n	8004e40 <tuh_edpt_abort_xfer+0x54>
 8004e36:	693b      	ldr	r3, [r7, #16]
 8004e38:	7b1b      	ldrb	r3, [r3, #12]
 8004e3a:	b2db      	uxtb	r3, r3
 8004e3c:	2b00      	cmp	r3, #0
 8004e3e:	d101      	bne.n	8004e44 <tuh_edpt_abort_xfer+0x58>
 8004e40:	2300      	movs	r3, #0
 8004e42:	e059      	b.n	8004ef8 <tuh_edpt_abort_xfer+0x10c>
    hcd_edpt_abort_xfer(rhport, daddr, ep_addr);
 8004e44:	79ba      	ldrb	r2, [r7, #6]
 8004e46:	79f9      	ldrb	r1, [r7, #7]
 8004e48:	7dfb      	ldrb	r3, [r7, #23]
 8004e4a:	4618      	mov	r0, r3
 8004e4c:	f002 fd3e 	bl	80078cc <hcd_edpt_abort_xfer>
 8004e50:	2300      	movs	r3, #0
 8004e52:	737b      	strb	r3, [r7, #13]
  if (_usbh_data.ctrl_xfer_info.stage != stage) {
 8004e54:	4b2b      	ldr	r3, [pc, #172]	@ (8004f04 <tuh_edpt_abort_xfer+0x118>)
 8004e56:	7d1b      	ldrb	r3, [r3, #20]
 8004e58:	b2db      	uxtb	r3, r3
 8004e5a:	7b7a      	ldrb	r2, [r7, #13]
 8004e5c:	429a      	cmp	r2, r3
 8004e5e:	d049      	beq.n	8004ef4 <tuh_edpt_abort_xfer+0x108>
    _usbh_data.ctrl_xfer_info.stage = stage;
 8004e60:	4a28      	ldr	r2, [pc, #160]	@ (8004f04 <tuh_edpt_abort_xfer+0x118>)
 8004e62:	7b7b      	ldrb	r3, [r7, #13]
 8004e64:	7513      	strb	r3, [r2, #20]
}
 8004e66:	e045      	b.n	8004ef4 <tuh_edpt_abort_xfer+0x108>
 8004e68:	79fb      	ldrb	r3, [r7, #7]
 8004e6a:	733b      	strb	r3, [r7, #12]
  TU_VERIFY(dev_addr > 0 && dev_addr <= TOTAL_DEVICES, NULL);
 8004e6c:	7b3b      	ldrb	r3, [r7, #12]
 8004e6e:	2b00      	cmp	r3, #0
 8004e70:	d002      	beq.n	8004e78 <tuh_edpt_abort_xfer+0x8c>
 8004e72:	7b3b      	ldrb	r3, [r7, #12]
 8004e74:	2b01      	cmp	r3, #1
 8004e76:	d901      	bls.n	8004e7c <tuh_edpt_abort_xfer+0x90>
 8004e78:	2300      	movs	r3, #0
 8004e7a:	e006      	b.n	8004e8a <tuh_edpt_abort_xfer+0x9e>
  return &_usbh_devices[dev_addr-1];
 8004e7c:	7b3b      	ldrb	r3, [r7, #12]
 8004e7e:	3b01      	subs	r3, #1
 8004e80:	225e      	movs	r2, #94	@ 0x5e
 8004e82:	fb02 f303 	mul.w	r3, r2, r3
 8004e86:	4a20      	ldr	r2, [pc, #128]	@ (8004f08 <tuh_edpt_abort_xfer+0x11c>)
 8004e88:	4413      	add	r3, r2
    _control_set_xfer_stage(CONTROL_STAGE_IDLE); // reset control transfer state to idle
  } else {
    usbh_device_t* dev = get_device(daddr);
 8004e8a:	61bb      	str	r3, [r7, #24]
    TU_VERIFY(dev);
 8004e8c:	69bb      	ldr	r3, [r7, #24]
 8004e8e:	2b00      	cmp	r3, #0
 8004e90:	d101      	bne.n	8004e96 <tuh_edpt_abort_xfer+0xaa>
 8004e92:	2300      	movs	r3, #0
 8004e94:	e030      	b.n	8004ef8 <tuh_edpt_abort_xfer+0x10c>

    TU_VERIFY(dev->ep_status[epnum][dir].busy); // non-control skip if not busy
 8004e96:	7ffa      	ldrb	r2, [r7, #31]
 8004e98:	7fbb      	ldrb	r3, [r7, #30]
 8004e9a:	69b9      	ldr	r1, [r7, #24]
 8004e9c:	0052      	lsls	r2, r2, #1
 8004e9e:	440a      	add	r2, r1
 8004ea0:	4413      	add	r3, r2
 8004ea2:	3338      	adds	r3, #56	@ 0x38
 8004ea4:	795b      	ldrb	r3, [r3, #5]
 8004ea6:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8004eaa:	b2db      	uxtb	r3, r3
 8004eac:	2b00      	cmp	r3, #0
 8004eae:	d101      	bne.n	8004eb4 <tuh_edpt_abort_xfer+0xc8>
 8004eb0:	2300      	movs	r3, #0
 8004eb2:	e021      	b.n	8004ef8 <tuh_edpt_abort_xfer+0x10c>
    // abort then mark as ready and release endpoint
    hcd_edpt_abort_xfer(dev->bus_info.rhport, daddr, ep_addr);
 8004eb4:	69bb      	ldr	r3, [r7, #24]
 8004eb6:	781b      	ldrb	r3, [r3, #0]
 8004eb8:	79ba      	ldrb	r2, [r7, #6]
 8004eba:	79f9      	ldrb	r1, [r7, #7]
 8004ebc:	4618      	mov	r0, r3
 8004ebe:	f002 fd05 	bl	80078cc <hcd_edpt_abort_xfer>
    dev->ep_status[epnum][dir].busy = false;
 8004ec2:	7ffa      	ldrb	r2, [r7, #31]
 8004ec4:	7fbb      	ldrb	r3, [r7, #30]
 8004ec6:	69b9      	ldr	r1, [r7, #24]
 8004ec8:	0052      	lsls	r2, r2, #1
 8004eca:	440a      	add	r2, r1
 8004ecc:	4413      	add	r3, r2
 8004ece:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 8004ed2:	7953      	ldrb	r3, [r2, #5]
 8004ed4:	f023 0301 	bic.w	r3, r3, #1
 8004ed8:	7153      	strb	r3, [r2, #5]
    tu_edpt_release(&dev->ep_status[epnum][dir], _usbh_mutex);
 8004eda:	7ffa      	ldrb	r2, [r7, #31]
 8004edc:	7fbb      	ldrb	r3, [r7, #30]
 8004ede:	0052      	lsls	r2, r2, #1
 8004ee0:	4413      	add	r3, r2
 8004ee2:	3338      	adds	r3, #56	@ 0x38
 8004ee4:	69ba      	ldr	r2, [r7, #24]
 8004ee6:	4413      	add	r3, r2
 8004ee8:	3305      	adds	r3, #5
 8004eea:	2100      	movs	r1, #0
 8004eec:	4618      	mov	r0, r3
 8004eee:	f002 ff45 	bl	8007d7c <tu_edpt_release>
 8004ef2:	e000      	b.n	8004ef6 <tuh_edpt_abort_xfer+0x10a>
}
 8004ef4:	bf00      	nop
  }

  return true;
 8004ef6:	2301      	movs	r3, #1
}
 8004ef8:	4618      	mov	r0, r3
 8004efa:	3720      	adds	r7, #32
 8004efc:	46bd      	mov	sp, r7
 8004efe:	bd80      	pop	{r7, pc}
 8004f00:	20000028 	.word	0x20000028
 8004f04:	20000020 	.word	0x20000020
 8004f08:	2000098c 	.word	0x2000098c

08004f0c <usbh_get_rhport>:

//--------------------------------------------------------------------+
// USBH API For Class Driver
//--------------------------------------------------------------------+

uint8_t usbh_get_rhport(uint8_t daddr) {
 8004f0c:	b580      	push	{r7, lr}
 8004f0e:	b084      	sub	sp, #16
 8004f10:	af00      	add	r7, sp, #0
 8004f12:	4603      	mov	r3, r0
 8004f14:	71fb      	strb	r3, [r7, #7]
  tuh_bus_info_t bus_info;
  tuh_bus_info_get(daddr, &bus_info);
 8004f16:	f107 020c 	add.w	r2, r7, #12
 8004f1a:	79fb      	ldrb	r3, [r7, #7]
 8004f1c:	4611      	mov	r1, r2
 8004f1e:	4618      	mov	r0, r3
 8004f20:	f000 f99c 	bl	800525c <tuh_bus_info_get>
  return bus_info.rhport;
 8004f24:	7b3b      	ldrb	r3, [r7, #12]
}
 8004f26:	4618      	mov	r0, r3
 8004f28:	3710      	adds	r7, #16
 8004f2a:	46bd      	mov	sp, r7
 8004f2c:	bd80      	pop	{r7, pc}
	...

08004f30 <usbh_get_enum_buf>:

uint8_t *usbh_get_enum_buf(void) {
 8004f30:	b480      	push	{r7}
 8004f32:	af00      	add	r7, sp, #0
  return _usbh_epbuf.ctrl;
 8004f34:	4b02      	ldr	r3, [pc, #8]	@ (8004f40 <usbh_get_enum_buf+0x10>)
}
 8004f36:	4618      	mov	r0, r3
 8004f38:	46bd      	mov	sp, r7
 8004f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f3e:	4770      	bx	lr
 8004f40:	20000ab8 	.word	0x20000ab8

08004f44 <usbh_int_set>:

void usbh_int_set(bool enabled) {
 8004f44:	b580      	push	{r7, lr}
 8004f46:	b082      	sub	sp, #8
 8004f48:	af00      	add	r7, sp, #0
 8004f4a:	4603      	mov	r3, r0
 8004f4c:	71fb      	strb	r3, [r7, #7]
  // TODO all host controller if multiple are used since they shared the same event queue
  if (enabled) {
 8004f4e:	79fb      	ldrb	r3, [r7, #7]
 8004f50:	2b00      	cmp	r3, #0
 8004f52:	d005      	beq.n	8004f60 <usbh_int_set+0x1c>
    hcd_int_enable(_usbh_data.controller_id);
 8004f54:	4b07      	ldr	r3, [pc, #28]	@ (8004f74 <usbh_int_set+0x30>)
 8004f56:	781b      	ldrb	r3, [r3, #0]
 8004f58:	4618      	mov	r0, r3
 8004f5a:	f001 fe6f 	bl	8006c3c <hcd_int_enable>
  } else {
    hcd_int_disable(_usbh_data.controller_id);
  }
}
 8004f5e:	e004      	b.n	8004f6a <usbh_int_set+0x26>
    hcd_int_disable(_usbh_data.controller_id);
 8004f60:	4b04      	ldr	r3, [pc, #16]	@ (8004f74 <usbh_int_set+0x30>)
 8004f62:	781b      	ldrb	r3, [r3, #0]
 8004f64:	4618      	mov	r0, r3
 8004f66:	f001 fe91 	bl	8006c8c <hcd_int_disable>
}
 8004f6a:	bf00      	nop
 8004f6c:	3708      	adds	r7, #8
 8004f6e:	46bd      	mov	sp, r7
 8004f70:	bd80      	pop	{r7, pc}
 8004f72:	bf00      	nop
 8004f74:	20000020 	.word	0x20000020

08004f78 <usbh_edpt_claim>:
//--------------------------------------------------------------------+
// Endpoint API
//--------------------------------------------------------------------+

// Claim an endpoint for transfer
bool usbh_edpt_claim(uint8_t dev_addr, uint8_t ep_addr) {
 8004f78:	b580      	push	{r7, lr}
 8004f7a:	b086      	sub	sp, #24
 8004f7c:	af00      	add	r7, sp, #0
 8004f7e:	4603      	mov	r3, r0
 8004f80:	460a      	mov	r2, r1
 8004f82:	71fb      	strb	r3, [r7, #7]
 8004f84:	4613      	mov	r3, r2
 8004f86:	71bb      	strb	r3, [r7, #6]
 8004f88:	79fb      	ldrb	r3, [r7, #7]
 8004f8a:	72fb      	strb	r3, [r7, #11]
  TU_VERIFY(dev_addr > 0 && dev_addr <= TOTAL_DEVICES, NULL);
 8004f8c:	7afb      	ldrb	r3, [r7, #11]
 8004f8e:	2b00      	cmp	r3, #0
 8004f90:	d002      	beq.n	8004f98 <usbh_edpt_claim+0x20>
 8004f92:	7afb      	ldrb	r3, [r7, #11]
 8004f94:	2b01      	cmp	r3, #1
 8004f96:	d901      	bls.n	8004f9c <usbh_edpt_claim+0x24>
 8004f98:	2300      	movs	r3, #0
 8004f9a:	e006      	b.n	8004faa <usbh_edpt_claim+0x32>
  return &_usbh_devices[dev_addr-1];
 8004f9c:	7afb      	ldrb	r3, [r7, #11]
 8004f9e:	3b01      	subs	r3, #1
 8004fa0:	225e      	movs	r2, #94	@ 0x5e
 8004fa2:	fb02 f303 	mul.w	r3, r2, r3
 8004fa6:	4a1f      	ldr	r2, [pc, #124]	@ (8005024 <usbh_edpt_claim+0xac>)
 8004fa8:	4413      	add	r3, r2
  // Note: addr0 only use tuh_control_xfer
  usbh_device_t* dev = get_device(dev_addr);
 8004faa:	617b      	str	r3, [r7, #20]
  TU_ASSERT(dev && dev->connected);
 8004fac:	697b      	ldr	r3, [r7, #20]
 8004fae:	2b00      	cmp	r3, #0
 8004fb0:	d006      	beq.n	8004fc0 <usbh_edpt_claim+0x48>
 8004fb2:	697b      	ldr	r3, [r7, #20]
 8004fb4:	7d1b      	ldrb	r3, [r3, #20]
 8004fb6:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8004fba:	b2db      	uxtb	r3, r3
 8004fbc:	2b00      	cmp	r3, #0
 8004fbe:	d10a      	bne.n	8004fd6 <usbh_edpt_claim+0x5e>
 8004fc0:	4b19      	ldr	r3, [pc, #100]	@ (8005028 <usbh_edpt_claim+0xb0>)
 8004fc2:	60fb      	str	r3, [r7, #12]
 8004fc4:	68fb      	ldr	r3, [r7, #12]
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	f003 0301 	and.w	r3, r3, #1
 8004fcc:	2b00      	cmp	r3, #0
 8004fce:	d000      	beq.n	8004fd2 <usbh_edpt_claim+0x5a>
 8004fd0:	be00      	bkpt	0x0000
 8004fd2:	2300      	movs	r3, #0
 8004fd4:	e021      	b.n	800501a <usbh_edpt_claim+0xa2>
 8004fd6:	79bb      	ldrb	r3, [r7, #6]
 8004fd8:	727b      	strb	r3, [r7, #9]
  return (uint8_t)(addr & (~TUSB_DIR_IN_MASK));
 8004fda:	7a7b      	ldrb	r3, [r7, #9]
 8004fdc:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004fe0:	b2db      	uxtb	r3, r3

  uint8_t const epnum = tu_edpt_number(ep_addr);
 8004fe2:	74fb      	strb	r3, [r7, #19]
 8004fe4:	79bb      	ldrb	r3, [r7, #6]
 8004fe6:	72bb      	strb	r3, [r7, #10]
  return (addr & TUSB_DIR_IN_MASK) ? TUSB_DIR_IN : TUSB_DIR_OUT;
 8004fe8:	7abb      	ldrb	r3, [r7, #10]
 8004fea:	09db      	lsrs	r3, r3, #7
 8004fec:	b2db      	uxtb	r3, r3
  uint8_t const dir = tu_edpt_dir(ep_addr);
 8004fee:	74bb      	strb	r3, [r7, #18]

  TU_VERIFY(tu_edpt_claim(&dev->ep_status[epnum][dir], _usbh_mutex));
 8004ff0:	7cfa      	ldrb	r2, [r7, #19]
 8004ff2:	7cbb      	ldrb	r3, [r7, #18]
 8004ff4:	0052      	lsls	r2, r2, #1
 8004ff6:	4413      	add	r3, r2
 8004ff8:	3338      	adds	r3, #56	@ 0x38
 8004ffa:	697a      	ldr	r2, [r7, #20]
 8004ffc:	4413      	add	r3, r2
 8004ffe:	3305      	adds	r3, #5
 8005000:	2100      	movs	r1, #0
 8005002:	4618      	mov	r0, r3
 8005004:	f002 fe80 	bl	8007d08 <tu_edpt_claim>
 8005008:	4603      	mov	r3, r0
 800500a:	f083 0301 	eor.w	r3, r3, #1
 800500e:	b2db      	uxtb	r3, r3
 8005010:	2b00      	cmp	r3, #0
 8005012:	d001      	beq.n	8005018 <usbh_edpt_claim+0xa0>
 8005014:	2300      	movs	r3, #0
 8005016:	e000      	b.n	800501a <usbh_edpt_claim+0xa2>
  TU_LOG_USBH("[%u] Claimed EP 0x%02x\r\n", dev_addr, ep_addr);

  return true;
 8005018:	2301      	movs	r3, #1
}
 800501a:	4618      	mov	r0, r3
 800501c:	3718      	adds	r7, #24
 800501e:	46bd      	mov	sp, r7
 8005020:	bd80      	pop	{r7, pc}
 8005022:	bf00      	nop
 8005024:	2000098c 	.word	0x2000098c
 8005028:	e000edf0 	.word	0xe000edf0

0800502c <usbh_edpt_release>:

// Release an claimed endpoint due to failed transfer attempt
bool usbh_edpt_release(uint8_t dev_addr, uint8_t ep_addr) {
 800502c:	b580      	push	{r7, lr}
 800502e:	b086      	sub	sp, #24
 8005030:	af00      	add	r7, sp, #0
 8005032:	4603      	mov	r3, r0
 8005034:	460a      	mov	r2, r1
 8005036:	71fb      	strb	r3, [r7, #7]
 8005038:	4613      	mov	r3, r2
 800503a:	71bb      	strb	r3, [r7, #6]
 800503c:	79fb      	ldrb	r3, [r7, #7]
 800503e:	747b      	strb	r3, [r7, #17]
  TU_VERIFY(dev_addr > 0 && dev_addr <= TOTAL_DEVICES, NULL);
 8005040:	7c7b      	ldrb	r3, [r7, #17]
 8005042:	2b00      	cmp	r3, #0
 8005044:	d002      	beq.n	800504c <usbh_edpt_release+0x20>
 8005046:	7c7b      	ldrb	r3, [r7, #17]
 8005048:	2b01      	cmp	r3, #1
 800504a:	d901      	bls.n	8005050 <usbh_edpt_release+0x24>
 800504c:	2300      	movs	r3, #0
 800504e:	e006      	b.n	800505e <usbh_edpt_release+0x32>
  return &_usbh_devices[dev_addr-1];
 8005050:	7c7b      	ldrb	r3, [r7, #17]
 8005052:	3b01      	subs	r3, #1
 8005054:	225e      	movs	r2, #94	@ 0x5e
 8005056:	fb02 f303 	mul.w	r3, r2, r3
 800505a:	4a1a      	ldr	r2, [pc, #104]	@ (80050c4 <usbh_edpt_release+0x98>)
 800505c:	4413      	add	r3, r2
  // Note: addr0 only use tuh_control_xfer
  usbh_device_t* dev = get_device(dev_addr);
 800505e:	617b      	str	r3, [r7, #20]
  TU_VERIFY(dev && dev->connected);
 8005060:	697b      	ldr	r3, [r7, #20]
 8005062:	2b00      	cmp	r3, #0
 8005064:	d006      	beq.n	8005074 <usbh_edpt_release+0x48>
 8005066:	697b      	ldr	r3, [r7, #20]
 8005068:	7d1b      	ldrb	r3, [r3, #20]
 800506a:	f3c3 0300 	ubfx	r3, r3, #0, #1
 800506e:	b2db      	uxtb	r3, r3
 8005070:	2b00      	cmp	r3, #0
 8005072:	d101      	bne.n	8005078 <usbh_edpt_release+0x4c>
 8005074:	2300      	movs	r3, #0
 8005076:	e021      	b.n	80050bc <usbh_edpt_release+0x90>
 8005078:	79bb      	ldrb	r3, [r7, #6]
 800507a:	73fb      	strb	r3, [r7, #15]
  return (uint8_t)(addr & (~TUSB_DIR_IN_MASK));
 800507c:	7bfb      	ldrb	r3, [r7, #15]
 800507e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005082:	b2db      	uxtb	r3, r3

  uint8_t const epnum = tu_edpt_number(ep_addr);
 8005084:	74fb      	strb	r3, [r7, #19]
 8005086:	79bb      	ldrb	r3, [r7, #6]
 8005088:	743b      	strb	r3, [r7, #16]
  return (addr & TUSB_DIR_IN_MASK) ? TUSB_DIR_IN : TUSB_DIR_OUT;
 800508a:	7c3b      	ldrb	r3, [r7, #16]
 800508c:	09db      	lsrs	r3, r3, #7
 800508e:	b2db      	uxtb	r3, r3
  uint8_t const dir = tu_edpt_dir(ep_addr);
 8005090:	74bb      	strb	r3, [r7, #18]

  TU_VERIFY(tu_edpt_release(&dev->ep_status[epnum][dir], _usbh_mutex));
 8005092:	7cfa      	ldrb	r2, [r7, #19]
 8005094:	7cbb      	ldrb	r3, [r7, #18]
 8005096:	0052      	lsls	r2, r2, #1
 8005098:	4413      	add	r3, r2
 800509a:	3338      	adds	r3, #56	@ 0x38
 800509c:	697a      	ldr	r2, [r7, #20]
 800509e:	4413      	add	r3, r2
 80050a0:	3305      	adds	r3, #5
 80050a2:	2100      	movs	r1, #0
 80050a4:	4618      	mov	r0, r3
 80050a6:	f002 fe69 	bl	8007d7c <tu_edpt_release>
 80050aa:	4603      	mov	r3, r0
 80050ac:	f083 0301 	eor.w	r3, r3, #1
 80050b0:	b2db      	uxtb	r3, r3
 80050b2:	2b00      	cmp	r3, #0
 80050b4:	d001      	beq.n	80050ba <usbh_edpt_release+0x8e>
 80050b6:	2300      	movs	r3, #0
 80050b8:	e000      	b.n	80050bc <usbh_edpt_release+0x90>
  TU_LOG_USBH("[%u] Released EP 0x%02x\r\n", dev_addr, ep_addr);

  return true;
 80050ba:	2301      	movs	r3, #1
}
 80050bc:	4618      	mov	r0, r3
 80050be:	3718      	adds	r7, #24
 80050c0:	46bd      	mov	sp, r7
 80050c2:	bd80      	pop	{r7, pc}
 80050c4:	2000098c 	.word	0x2000098c

080050c8 <usbh_edpt_xfer_with_callback>:

// Submit an transfer
bool usbh_edpt_xfer_with_callback(uint8_t dev_addr, uint8_t ep_addr, uint8_t* buffer, uint16_t total_bytes,
                                  tuh_xfer_cb_t complete_cb, uintptr_t user_data) {
 80050c8:	b580      	push	{r7, lr}
 80050ca:	b08a      	sub	sp, #40	@ 0x28
 80050cc:	af02      	add	r7, sp, #8
 80050ce:	603a      	str	r2, [r7, #0]
 80050d0:	461a      	mov	r2, r3
 80050d2:	4603      	mov	r3, r0
 80050d4:	71fb      	strb	r3, [r7, #7]
 80050d6:	460b      	mov	r3, r1
 80050d8:	71bb      	strb	r3, [r7, #6]
 80050da:	4613      	mov	r3, r2
 80050dc:	80bb      	strh	r3, [r7, #4]
 80050de:	79fb      	ldrb	r3, [r7, #7]
 80050e0:	73fb      	strb	r3, [r7, #15]
  TU_VERIFY(dev_addr > 0 && dev_addr <= TOTAL_DEVICES, NULL);
 80050e2:	7bfb      	ldrb	r3, [r7, #15]
 80050e4:	2b00      	cmp	r3, #0
 80050e6:	d002      	beq.n	80050ee <usbh_edpt_xfer_with_callback+0x26>
 80050e8:	7bfb      	ldrb	r3, [r7, #15]
 80050ea:	2b01      	cmp	r3, #1
 80050ec:	d901      	bls.n	80050f2 <usbh_edpt_xfer_with_callback+0x2a>
 80050ee:	2300      	movs	r3, #0
 80050f0:	e006      	b.n	8005100 <usbh_edpt_xfer_with_callback+0x38>
  return &_usbh_devices[dev_addr-1];
 80050f2:	7bfb      	ldrb	r3, [r7, #15]
 80050f4:	3b01      	subs	r3, #1
 80050f6:	225e      	movs	r2, #94	@ 0x5e
 80050f8:	fb02 f303 	mul.w	r3, r2, r3
 80050fc:	4a28      	ldr	r2, [pc, #160]	@ (80051a0 <usbh_edpt_xfer_with_callback+0xd8>)
 80050fe:	4413      	add	r3, r2
  (void) complete_cb;
  (void) user_data;

  usbh_device_t* dev = get_device(dev_addr);
 8005100:	61fb      	str	r3, [r7, #28]
  TU_VERIFY(dev);
 8005102:	69fb      	ldr	r3, [r7, #28]
 8005104:	2b00      	cmp	r3, #0
 8005106:	d101      	bne.n	800510c <usbh_edpt_xfer_with_callback+0x44>
 8005108:	2300      	movs	r3, #0
 800510a:	e045      	b.n	8005198 <usbh_edpt_xfer_with_callback+0xd0>
 800510c:	79bb      	ldrb	r3, [r7, #6]
 800510e:	737b      	strb	r3, [r7, #13]
  return (uint8_t)(addr & (~TUSB_DIR_IN_MASK));
 8005110:	7b7b      	ldrb	r3, [r7, #13]
 8005112:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005116:	b2db      	uxtb	r3, r3

  uint8_t const epnum = tu_edpt_number(ep_addr);
 8005118:	76fb      	strb	r3, [r7, #27]
 800511a:	79bb      	ldrb	r3, [r7, #6]
 800511c:	73bb      	strb	r3, [r7, #14]
  return (addr & TUSB_DIR_IN_MASK) ? TUSB_DIR_IN : TUSB_DIR_OUT;
 800511e:	7bbb      	ldrb	r3, [r7, #14]
 8005120:	09db      	lsrs	r3, r3, #7
 8005122:	b2db      	uxtb	r3, r3
  uint8_t const dir = tu_edpt_dir(ep_addr);
 8005124:	76bb      	strb	r3, [r7, #26]
  tu_edpt_state_t* ep_state = &dev->ep_status[epnum][dir];
 8005126:	7efa      	ldrb	r2, [r7, #27]
 8005128:	7ebb      	ldrb	r3, [r7, #26]
 800512a:	0052      	lsls	r2, r2, #1
 800512c:	4413      	add	r3, r2
 800512e:	3338      	adds	r3, #56	@ 0x38
 8005130:	69fa      	ldr	r2, [r7, #28]
 8005132:	4413      	add	r3, r2
 8005134:	3305      	adds	r3, #5
 8005136:	617b      	str	r3, [r7, #20]

  TU_LOG_USBH("  Queue EP %02X with %u bytes ... \r\n", ep_addr, total_bytes);

  // Attempt to transfer on a busy endpoint, sound like an race condition !
  TU_ASSERT(ep_state->busy == 0);
 8005138:	697b      	ldr	r3, [r7, #20]
 800513a:	781b      	ldrb	r3, [r3, #0]
 800513c:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8005140:	b2db      	uxtb	r3, r3
 8005142:	2b00      	cmp	r3, #0
 8005144:	d00a      	beq.n	800515c <usbh_edpt_xfer_with_callback+0x94>
 8005146:	4b17      	ldr	r3, [pc, #92]	@ (80051a4 <usbh_edpt_xfer_with_callback+0xdc>)
 8005148:	613b      	str	r3, [r7, #16]
 800514a:	693b      	ldr	r3, [r7, #16]
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	f003 0301 	and.w	r3, r3, #1
 8005152:	2b00      	cmp	r3, #0
 8005154:	d000      	beq.n	8005158 <usbh_edpt_xfer_with_callback+0x90>
 8005156:	be00      	bkpt	0x0000
 8005158:	2300      	movs	r3, #0
 800515a:	e01d      	b.n	8005198 <usbh_edpt_xfer_with_callback+0xd0>

  // Set busy first since the actual transfer can be complete before hcd_edpt_xfer()
  // could return and USBH task can preempt and clear the busy
  ep_state->busy = 1;
 800515c:	697a      	ldr	r2, [r7, #20]
 800515e:	7813      	ldrb	r3, [r2, #0]
 8005160:	f043 0301 	orr.w	r3, r3, #1
 8005164:	7013      	strb	r3, [r2, #0]
#if CFG_TUH_API_EDPT_XFER
  dev->ep_callback[epnum][dir].complete_cb = complete_cb;
  dev->ep_callback[epnum][dir].user_data   = user_data;
#endif

  if (hcd_edpt_xfer(dev->bus_info.rhport, dev_addr, ep_addr, buffer, total_bytes)) {
 8005166:	69fb      	ldr	r3, [r7, #28]
 8005168:	7818      	ldrb	r0, [r3, #0]
 800516a:	79ba      	ldrb	r2, [r7, #6]
 800516c:	79f9      	ldrb	r1, [r7, #7]
 800516e:	88bb      	ldrh	r3, [r7, #4]
 8005170:	9300      	str	r3, [sp, #0]
 8005172:	683b      	ldr	r3, [r7, #0]
 8005174:	f002 fb02 	bl	800777c <hcd_edpt_xfer>
 8005178:	4603      	mov	r3, r0
 800517a:	2b00      	cmp	r3, #0
 800517c:	d001      	beq.n	8005182 <usbh_edpt_xfer_with_callback+0xba>
    TU_LOG_USBH("OK\r\n");
    return true;
 800517e:	2301      	movs	r3, #1
 8005180:	e00a      	b.n	8005198 <usbh_edpt_xfer_with_callback+0xd0>
  } else {
    // HCD error, mark endpoint as ready to allow next transfer
    ep_state->busy = 0;
 8005182:	697a      	ldr	r2, [r7, #20]
 8005184:	7813      	ldrb	r3, [r2, #0]
 8005186:	f023 0301 	bic.w	r3, r3, #1
 800518a:	7013      	strb	r3, [r2, #0]
    ep_state->claimed = 0;
 800518c:	697a      	ldr	r2, [r7, #20]
 800518e:	7813      	ldrb	r3, [r2, #0]
 8005190:	f023 0304 	bic.w	r3, r3, #4
 8005194:	7013      	strb	r3, [r2, #0]
    TU_LOG1("Failed\r\n");
//    TU_BREAKPOINT();
    return false;
 8005196:	2300      	movs	r3, #0
  }
}
 8005198:	4618      	mov	r0, r3
 800519a:	3720      	adds	r7, #32
 800519c:	46bd      	mov	sp, r7
 800519e:	bd80      	pop	{r7, pc}
 80051a0:	2000098c 	.word	0x2000098c
 80051a4:	e000edf0 	.word	0xe000edf0

080051a8 <usbh_edpt_control_open>:

static bool usbh_edpt_control_open(uint8_t dev_addr, uint8_t max_packet_size) {
 80051a8:	b580      	push	{r7, lr}
 80051aa:	b084      	sub	sp, #16
 80051ac:	af00      	add	r7, sp, #0
 80051ae:	4603      	mov	r3, r0
 80051b0:	460a      	mov	r2, r1
 80051b2:	71fb      	strb	r3, [r7, #7]
 80051b4:	4613      	mov	r3, r2
 80051b6:	71bb      	strb	r3, [r7, #6]
  TU_LOG_USBH("[%u:%u] Open EP0 with Size = %u\r\n", usbh_get_rhport(dev_addr), dev_addr, max_packet_size);
  tusb_desc_endpoint_t ep0_desc = {
 80051b8:	f107 0308 	add.w	r3, r7, #8
 80051bc:	2200      	movs	r2, #0
 80051be:	601a      	str	r2, [r3, #0]
 80051c0:	f8c3 2003 	str.w	r2, [r3, #3]
 80051c4:	2307      	movs	r3, #7
 80051c6:	723b      	strb	r3, [r7, #8]
 80051c8:	2305      	movs	r3, #5
 80051ca:	727b      	strb	r3, [r7, #9]
 80051cc:	79bb      	ldrb	r3, [r7, #6]
 80051ce:	b29b      	uxth	r3, r3
 80051d0:	81bb      	strh	r3, [r7, #12]
    .bmAttributes     = { .xfer = TUSB_XFER_CONTROL },
    .wMaxPacketSize   = max_packet_size,
    .bInterval        = 0
  };

  return hcd_edpt_open(usbh_get_rhport(dev_addr), dev_addr, &ep0_desc);
 80051d2:	79fb      	ldrb	r3, [r7, #7]
 80051d4:	4618      	mov	r0, r3
 80051d6:	f7ff fe99 	bl	8004f0c <usbh_get_rhport>
 80051da:	4603      	mov	r3, r0
 80051dc:	4618      	mov	r0, r3
 80051de:	f107 0208 	add.w	r2, r7, #8
 80051e2:	79fb      	ldrb	r3, [r7, #7]
 80051e4:	4619      	mov	r1, r3
 80051e6:	f001 fe6d 	bl	8006ec4 <hcd_edpt_open>
 80051ea:	4603      	mov	r3, r0
}
 80051ec:	4618      	mov	r0, r3
 80051ee:	3710      	adds	r7, #16
 80051f0:	46bd      	mov	sp, r7
 80051f2:	bd80      	pop	{r7, pc}

080051f4 <tuh_edpt_open>:

bool tuh_edpt_open(uint8_t dev_addr, tusb_desc_endpoint_t const* desc_ep) {
 80051f4:	b580      	push	{r7, lr}
 80051f6:	b084      	sub	sp, #16
 80051f8:	af00      	add	r7, sp, #0
 80051fa:	4603      	mov	r3, r0
 80051fc:	6039      	str	r1, [r7, #0]
 80051fe:	71fb      	strb	r3, [r7, #7]
  TU_ASSERT(tu_edpt_validate(desc_ep, tuh_speed_get(dev_addr), true));
 8005200:	79fb      	ldrb	r3, [r7, #7]
 8005202:	4618      	mov	r0, r3
 8005204:	f7ff f852 	bl	80042ac <tuh_speed_get>
 8005208:	4603      	mov	r3, r0
 800520a:	2201      	movs	r2, #1
 800520c:	4619      	mov	r1, r3
 800520e:	6838      	ldr	r0, [r7, #0]
 8005210:	f002 fdde 	bl	8007dd0 <tu_edpt_validate>
 8005214:	4603      	mov	r3, r0
 8005216:	f083 0301 	eor.w	r3, r3, #1
 800521a:	b2db      	uxtb	r3, r3
 800521c:	2b00      	cmp	r3, #0
 800521e:	d00a      	beq.n	8005236 <tuh_edpt_open+0x42>
 8005220:	4b0d      	ldr	r3, [pc, #52]	@ (8005258 <tuh_edpt_open+0x64>)
 8005222:	60fb      	str	r3, [r7, #12]
 8005224:	68fb      	ldr	r3, [r7, #12]
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	f003 0301 	and.w	r3, r3, #1
 800522c:	2b00      	cmp	r3, #0
 800522e:	d000      	beq.n	8005232 <tuh_edpt_open+0x3e>
 8005230:	be00      	bkpt	0x0000
 8005232:	2300      	movs	r3, #0
 8005234:	e00b      	b.n	800524e <tuh_edpt_open+0x5a>
  return hcd_edpt_open(usbh_get_rhport(dev_addr), dev_addr, desc_ep);
 8005236:	79fb      	ldrb	r3, [r7, #7]
 8005238:	4618      	mov	r0, r3
 800523a:	f7ff fe67 	bl	8004f0c <usbh_get_rhport>
 800523e:	4603      	mov	r3, r0
 8005240:	4618      	mov	r0, r3
 8005242:	79fb      	ldrb	r3, [r7, #7]
 8005244:	683a      	ldr	r2, [r7, #0]
 8005246:	4619      	mov	r1, r3
 8005248:	f001 fe3c 	bl	8006ec4 <hcd_edpt_open>
 800524c:	4603      	mov	r3, r0
}
 800524e:	4618      	mov	r0, r3
 8005250:	3710      	adds	r7, #16
 8005252:	46bd      	mov	sp, r7
 8005254:	bd80      	pop	{r7, pc}
 8005256:	bf00      	nop
 8005258:	e000edf0 	.word	0xe000edf0

0800525c <tuh_bus_info_get>:

//--------------------------------------------------------------------+
// HCD Event Handler
//--------------------------------------------------------------------+

bool tuh_bus_info_get(uint8_t daddr, tuh_bus_info_t* bus_info) {
 800525c:	b480      	push	{r7}
 800525e:	b085      	sub	sp, #20
 8005260:	af00      	add	r7, sp, #0
 8005262:	4603      	mov	r3, r0
 8005264:	6039      	str	r1, [r7, #0]
 8005266:	71fb      	strb	r3, [r7, #7]
 8005268:	79fb      	ldrb	r3, [r7, #7]
 800526a:	72fb      	strb	r3, [r7, #11]
  TU_VERIFY(dev_addr > 0 && dev_addr <= TOTAL_DEVICES, NULL);
 800526c:	7afb      	ldrb	r3, [r7, #11]
 800526e:	2b00      	cmp	r3, #0
 8005270:	d002      	beq.n	8005278 <tuh_bus_info_get+0x1c>
 8005272:	7afb      	ldrb	r3, [r7, #11]
 8005274:	2b01      	cmp	r3, #1
 8005276:	d901      	bls.n	800527c <tuh_bus_info_get+0x20>
 8005278:	2300      	movs	r3, #0
 800527a:	e006      	b.n	800528a <tuh_bus_info_get+0x2e>
  return &_usbh_devices[dev_addr-1];
 800527c:	7afb      	ldrb	r3, [r7, #11]
 800527e:	3b01      	subs	r3, #1
 8005280:	225e      	movs	r2, #94	@ 0x5e
 8005282:	fb02 f303 	mul.w	r3, r2, r3
 8005286:	4a0b      	ldr	r2, [pc, #44]	@ (80052b4 <tuh_bus_info_get+0x58>)
 8005288:	4413      	add	r3, r2
  usbh_device_t const* dev = get_device(daddr);
 800528a:	60fb      	str	r3, [r7, #12]
  if (dev) {
 800528c:	68fb      	ldr	r3, [r7, #12]
 800528e:	2b00      	cmp	r3, #0
 8005290:	d004      	beq.n	800529c <tuh_bus_info_get+0x40>
    *bus_info = dev->bus_info;
 8005292:	683a      	ldr	r2, [r7, #0]
 8005294:	68fb      	ldr	r3, [r7, #12]
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	6013      	str	r3, [r2, #0]
 800529a:	e004      	b.n	80052a6 <tuh_bus_info_get+0x4a>
  } else {
    *bus_info = _usbh_data.dev0_bus;
 800529c:	683a      	ldr	r2, [r7, #0]
 800529e:	4b06      	ldr	r3, [pc, #24]	@ (80052b8 <tuh_bus_info_get+0x5c>)
 80052a0:	3303      	adds	r3, #3
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	6013      	str	r3, [r2, #0]
  }
  return true;
 80052a6:	2301      	movs	r3, #1
}
 80052a8:	4618      	mov	r0, r3
 80052aa:	3714      	adds	r7, #20
 80052ac:	46bd      	mov	sp, r7
 80052ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052b2:	4770      	bx	lr
 80052b4:	2000098c 	.word	0x2000098c
 80052b8:	20000020 	.word	0x20000020

080052bc <tuh_descriptor_get>:

  return tuh_control_xfer(&xfer);
}

bool tuh_descriptor_get(uint8_t daddr, uint8_t type, uint8_t index, void* buffer, uint16_t len,
                        tuh_xfer_cb_t complete_cb, uintptr_t user_data) {
 80052bc:	b580      	push	{r7, lr}
 80052be:	b090      	sub	sp, #64	@ 0x40
 80052c0:	af00      	add	r7, sp, #0
 80052c2:	603b      	str	r3, [r7, #0]
 80052c4:	4603      	mov	r3, r0
 80052c6:	71fb      	strb	r3, [r7, #7]
 80052c8:	460b      	mov	r3, r1
 80052ca:	71bb      	strb	r3, [r7, #6]
 80052cc:	4613      	mov	r3, r2
 80052ce:	717b      	strb	r3, [r7, #5]
 80052d0:	79fb      	ldrb	r3, [r7, #7]
 80052d2:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
 80052d6:	79bb      	ldrb	r3, [r7, #6]
 80052d8:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
 80052dc:	797b      	ldrb	r3, [r7, #5]
 80052de:	f887 303d 	strb.w	r3, [r7, #61]	@ 0x3d
 80052e2:	2300      	movs	r3, #0
 80052e4:	877b      	strh	r3, [r7, #58]	@ 0x3a
 80052e6:	683b      	ldr	r3, [r7, #0]
 80052e8:	637b      	str	r3, [r7, #52]	@ 0x34
 80052ea:	f8b7 3048 	ldrh.w	r3, [r7, #72]	@ 0x48
 80052ee:	867b      	strh	r3, [r7, #50]	@ 0x32
 80052f0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80052f2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80052f4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80052f6:	62bb      	str	r3, [r7, #40]	@ 0x28
  tusb_control_request_t const request = {
 80052f8:	f897 3020 	ldrb.w	r3, [r7, #32]
 80052fc:	f023 031f 	bic.w	r3, r3, #31
 8005300:	f887 3020 	strb.w	r3, [r7, #32]
 8005304:	f897 3020 	ldrb.w	r3, [r7, #32]
 8005308:	f023 0360 	bic.w	r3, r3, #96	@ 0x60
 800530c:	f887 3020 	strb.w	r3, [r7, #32]
 8005310:	f897 3020 	ldrb.w	r3, [r7, #32]
 8005314:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005318:	f887 3020 	strb.w	r3, [r7, #32]
 800531c:	2306      	movs	r3, #6
 800531e:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
    .wValue   = tu_htole16( TU_U16(type, index) ),
 8005322:	f897 303e 	ldrb.w	r3, [r7, #62]	@ 0x3e
 8005326:	b21b      	sxth	r3, r3
 8005328:	021b      	lsls	r3, r3, #8
 800532a:	b21a      	sxth	r2, r3
 800532c:	f897 303d 	ldrb.w	r3, [r7, #61]	@ 0x3d
 8005330:	b21b      	sxth	r3, r3
 8005332:	4313      	orrs	r3, r2
 8005334:	b21b      	sxth	r3, r3
 8005336:	b29b      	uxth	r3, r3
  tusb_control_request_t const request = {
 8005338:	847b      	strh	r3, [r7, #34]	@ 0x22
 800533a:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 800533c:	84bb      	strh	r3, [r7, #36]	@ 0x24
 800533e:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 8005340:	84fb      	strh	r3, [r7, #38]	@ 0x26
  tuh_xfer_t xfer = {
 8005342:	f107 0308 	add.w	r3, r7, #8
 8005346:	2200      	movs	r2, #0
 8005348:	601a      	str	r2, [r3, #0]
 800534a:	605a      	str	r2, [r3, #4]
 800534c:	609a      	str	r2, [r3, #8]
 800534e:	60da      	str	r2, [r3, #12]
 8005350:	611a      	str	r2, [r3, #16]
 8005352:	615a      	str	r2, [r3, #20]
 8005354:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8005358:	723b      	strb	r3, [r7, #8]
 800535a:	f107 0320 	add.w	r3, r7, #32
 800535e:	613b      	str	r3, [r7, #16]
 8005360:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005362:	617b      	str	r3, [r7, #20]
 8005364:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005366:	61bb      	str	r3, [r7, #24]
 8005368:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800536a:	61fb      	str	r3, [r7, #28]
  return tuh_control_xfer(&xfer);
 800536c:	f107 0308 	add.w	r3, r7, #8
 8005370:	4618      	mov	r0, r3
 8005372:	f7ff fa75 	bl	8004860 <tuh_control_xfer>
 8005376:	4603      	mov	r3, r0
  return _get_descriptor(daddr, type, index, 0x0000, buffer, len, complete_cb, user_data);
}
 8005378:	4618      	mov	r0, r3
 800537a:	3740      	adds	r7, #64	@ 0x40
 800537c:	46bd      	mov	sp, r7
 800537e:	bd80      	pop	{r7, pc}

08005380 <tuh_descriptor_get_device>:

bool tuh_descriptor_get_device(uint8_t daddr, void* buffer, uint16_t len,
                               tuh_xfer_cb_t complete_cb, uintptr_t user_data) {
 8005380:	b580      	push	{r7, lr}
 8005382:	b08a      	sub	sp, #40	@ 0x28
 8005384:	af04      	add	r7, sp, #16
 8005386:	60b9      	str	r1, [r7, #8]
 8005388:	607b      	str	r3, [r7, #4]
 800538a:	4603      	mov	r3, r0
 800538c:	73fb      	strb	r3, [r7, #15]
 800538e:	4613      	mov	r3, r2
 8005390:	81bb      	strh	r3, [r7, #12]
 8005392:	89bb      	ldrh	r3, [r7, #12]
 8005394:	82fb      	strh	r3, [r7, #22]
 8005396:	2312      	movs	r3, #18
 8005398:	82bb      	strh	r3, [r7, #20]
TU_ATTR_ALWAYS_INLINE static inline uint16_t tu_min16 (uint16_t x, uint16_t y) { return (x < y) ? x : y; }
 800539a:	8afa      	ldrh	r2, [r7, #22]
 800539c:	8abb      	ldrh	r3, [r7, #20]
 800539e:	4293      	cmp	r3, r2
 80053a0:	bf28      	it	cs
 80053a2:	4613      	movcs	r3, r2
 80053a4:	b29b      	uxth	r3, r3
  len = tu_min16(len, sizeof(tusb_desc_device_t));
 80053a6:	81bb      	strh	r3, [r7, #12]
  return tuh_descriptor_get(daddr, TUSB_DESC_DEVICE, 0, buffer, len, complete_cb, user_data);
 80053a8:	7bf8      	ldrb	r0, [r7, #15]
 80053aa:	6a3b      	ldr	r3, [r7, #32]
 80053ac:	9302      	str	r3, [sp, #8]
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	9301      	str	r3, [sp, #4]
 80053b2:	89bb      	ldrh	r3, [r7, #12]
 80053b4:	9300      	str	r3, [sp, #0]
 80053b6:	68bb      	ldr	r3, [r7, #8]
 80053b8:	2200      	movs	r2, #0
 80053ba:	2101      	movs	r1, #1
 80053bc:	f7ff ff7e 	bl	80052bc <tuh_descriptor_get>
 80053c0:	4603      	mov	r3, r0
}
 80053c2:	4618      	mov	r0, r3
 80053c4:	3718      	adds	r7, #24
 80053c6:	46bd      	mov	sp, r7
 80053c8:	bd80      	pop	{r7, pc}

080053ca <tuh_descriptor_get_configuration>:

bool tuh_descriptor_get_configuration(uint8_t daddr, uint8_t index, void* buffer, uint16_t len,
                                      tuh_xfer_cb_t complete_cb, uintptr_t user_data) {
 80053ca:	b580      	push	{r7, lr}
 80053cc:	b086      	sub	sp, #24
 80053ce:	af04      	add	r7, sp, #16
 80053d0:	603a      	str	r2, [r7, #0]
 80053d2:	461a      	mov	r2, r3
 80053d4:	4603      	mov	r3, r0
 80053d6:	71fb      	strb	r3, [r7, #7]
 80053d8:	460b      	mov	r3, r1
 80053da:	71bb      	strb	r3, [r7, #6]
 80053dc:	4613      	mov	r3, r2
 80053de:	80bb      	strh	r3, [r7, #4]
  return tuh_descriptor_get(daddr, TUSB_DESC_CONFIGURATION, index, buffer, len, complete_cb, user_data);
 80053e0:	79ba      	ldrb	r2, [r7, #6]
 80053e2:	79f8      	ldrb	r0, [r7, #7]
 80053e4:	697b      	ldr	r3, [r7, #20]
 80053e6:	9302      	str	r3, [sp, #8]
 80053e8:	693b      	ldr	r3, [r7, #16]
 80053ea:	9301      	str	r3, [sp, #4]
 80053ec:	88bb      	ldrh	r3, [r7, #4]
 80053ee:	9300      	str	r3, [sp, #0]
 80053f0:	683b      	ldr	r3, [r7, #0]
 80053f2:	2102      	movs	r1, #2
 80053f4:	f7ff ff62 	bl	80052bc <tuh_descriptor_get>
 80053f8:	4603      	mov	r3, r0
}
 80053fa:	4618      	mov	r0, r3
 80053fc:	3708      	adds	r7, #8
 80053fe:	46bd      	mov	sp, r7
 8005400:	bd80      	pop	{r7, pc}

08005402 <tuh_descriptor_get_string>:

//------------- String Descriptor -------------//
bool tuh_descriptor_get_string(uint8_t daddr, uint8_t index, uint16_t language_id, void* buffer, uint16_t len,
                               tuh_xfer_cb_t complete_cb, uintptr_t user_data) {
 8005402:	b580      	push	{r7, lr}
 8005404:	b090      	sub	sp, #64	@ 0x40
 8005406:	af00      	add	r7, sp, #0
 8005408:	603b      	str	r3, [r7, #0]
 800540a:	4603      	mov	r3, r0
 800540c:	71fb      	strb	r3, [r7, #7]
 800540e:	460b      	mov	r3, r1
 8005410:	71bb      	strb	r3, [r7, #6]
 8005412:	4613      	mov	r3, r2
 8005414:	80bb      	strh	r3, [r7, #4]
 8005416:	79fb      	ldrb	r3, [r7, #7]
 8005418:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
 800541c:	2303      	movs	r3, #3
 800541e:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
 8005422:	79bb      	ldrb	r3, [r7, #6]
 8005424:	f887 303d 	strb.w	r3, [r7, #61]	@ 0x3d
 8005428:	88bb      	ldrh	r3, [r7, #4]
 800542a:	877b      	strh	r3, [r7, #58]	@ 0x3a
 800542c:	683b      	ldr	r3, [r7, #0]
 800542e:	637b      	str	r3, [r7, #52]	@ 0x34
 8005430:	f8b7 3048 	ldrh.w	r3, [r7, #72]	@ 0x48
 8005434:	867b      	strh	r3, [r7, #50]	@ 0x32
 8005436:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005438:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800543a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800543c:	62bb      	str	r3, [r7, #40]	@ 0x28
  tusb_control_request_t const request = {
 800543e:	f897 3020 	ldrb.w	r3, [r7, #32]
 8005442:	f023 031f 	bic.w	r3, r3, #31
 8005446:	f887 3020 	strb.w	r3, [r7, #32]
 800544a:	f897 3020 	ldrb.w	r3, [r7, #32]
 800544e:	f023 0360 	bic.w	r3, r3, #96	@ 0x60
 8005452:	f887 3020 	strb.w	r3, [r7, #32]
 8005456:	f897 3020 	ldrb.w	r3, [r7, #32]
 800545a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800545e:	f887 3020 	strb.w	r3, [r7, #32]
 8005462:	2306      	movs	r3, #6
 8005464:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
    .wValue   = tu_htole16( TU_U16(type, index) ),
 8005468:	f897 303e 	ldrb.w	r3, [r7, #62]	@ 0x3e
 800546c:	b21b      	sxth	r3, r3
 800546e:	021b      	lsls	r3, r3, #8
 8005470:	b21a      	sxth	r2, r3
 8005472:	f897 303d 	ldrb.w	r3, [r7, #61]	@ 0x3d
 8005476:	b21b      	sxth	r3, r3
 8005478:	4313      	orrs	r3, r2
 800547a:	b21b      	sxth	r3, r3
 800547c:	b29b      	uxth	r3, r3
  tusb_control_request_t const request = {
 800547e:	847b      	strh	r3, [r7, #34]	@ 0x22
 8005480:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8005482:	84bb      	strh	r3, [r7, #36]	@ 0x24
 8005484:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 8005486:	84fb      	strh	r3, [r7, #38]	@ 0x26
  tuh_xfer_t xfer = {
 8005488:	f107 0308 	add.w	r3, r7, #8
 800548c:	2200      	movs	r2, #0
 800548e:	601a      	str	r2, [r3, #0]
 8005490:	605a      	str	r2, [r3, #4]
 8005492:	609a      	str	r2, [r3, #8]
 8005494:	60da      	str	r2, [r3, #12]
 8005496:	611a      	str	r2, [r3, #16]
 8005498:	615a      	str	r2, [r3, #20]
 800549a:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800549e:	723b      	strb	r3, [r7, #8]
 80054a0:	f107 0320 	add.w	r3, r7, #32
 80054a4:	613b      	str	r3, [r7, #16]
 80054a6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80054a8:	617b      	str	r3, [r7, #20]
 80054aa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80054ac:	61bb      	str	r3, [r7, #24]
 80054ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80054b0:	61fb      	str	r3, [r7, #28]
  return tuh_control_xfer(&xfer);
 80054b2:	f107 0308 	add.w	r3, r7, #8
 80054b6:	4618      	mov	r0, r3
 80054b8:	f7ff f9d2 	bl	8004860 <tuh_control_xfer>
 80054bc:	4603      	mov	r3, r0
  return _get_descriptor(daddr, TUSB_DESC_STRING, index, language_id, buffer, len, complete_cb, user_data);
}
 80054be:	4618      	mov	r0, r3
 80054c0:	3740      	adds	r7, #64	@ 0x40
 80054c2:	46bd      	mov	sp, r7
 80054c4:	bd80      	pop	{r7, pc}

080054c6 <tuh_descriptor_get_hid_report>:
}

// Get HID report descriptor
// if blocking, user_data is pointed to xfer_result
bool tuh_descriptor_get_hid_report(uint8_t daddr, uint8_t itf_num, uint8_t desc_type, uint8_t index, void* buffer, uint16_t len,
                                   tuh_xfer_cb_t complete_cb, uintptr_t user_data) {
 80054c6:	b590      	push	{r4, r7, lr}
 80054c8:	b08b      	sub	sp, #44	@ 0x2c
 80054ca:	af00      	add	r7, sp, #0
 80054cc:	4604      	mov	r4, r0
 80054ce:	4608      	mov	r0, r1
 80054d0:	4611      	mov	r1, r2
 80054d2:	461a      	mov	r2, r3
 80054d4:	4623      	mov	r3, r4
 80054d6:	71fb      	strb	r3, [r7, #7]
 80054d8:	4603      	mov	r3, r0
 80054da:	71bb      	strb	r3, [r7, #6]
 80054dc:	460b      	mov	r3, r1
 80054de:	717b      	strb	r3, [r7, #5]
 80054e0:	4613      	mov	r3, r2
 80054e2:	713b      	strb	r3, [r7, #4]
  TU_LOG_USBH("HID Get Report Descriptor\r\n");
  tusb_control_request_t const request = {
 80054e4:	f897 3020 	ldrb.w	r3, [r7, #32]
 80054e8:	2201      	movs	r2, #1
 80054ea:	f362 0304 	bfi	r3, r2, #0, #5
 80054ee:	f887 3020 	strb.w	r3, [r7, #32]
 80054f2:	f897 3020 	ldrb.w	r3, [r7, #32]
 80054f6:	f023 0360 	bic.w	r3, r3, #96	@ 0x60
 80054fa:	f887 3020 	strb.w	r3, [r7, #32]
 80054fe:	f897 3020 	ldrb.w	r3, [r7, #32]
 8005502:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005506:	f887 3020 	strb.w	r3, [r7, #32]
 800550a:	2306      	movs	r3, #6
 800550c:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
          .recipient = TUSB_REQ_RCPT_INTERFACE,
          .type      = TUSB_REQ_TYPE_STANDARD,
          .direction = TUSB_DIR_IN
      },
      .bRequest = TUSB_REQ_GET_DESCRIPTOR,
      .wValue   = tu_htole16(TU_U16(desc_type, index)),
 8005510:	797b      	ldrb	r3, [r7, #5]
 8005512:	b21b      	sxth	r3, r3
 8005514:	021b      	lsls	r3, r3, #8
 8005516:	b21a      	sxth	r2, r3
 8005518:	793b      	ldrb	r3, [r7, #4]
 800551a:	b21b      	sxth	r3, r3
 800551c:	4313      	orrs	r3, r2
 800551e:	b21b      	sxth	r3, r3
 8005520:	b29b      	uxth	r3, r3
  tusb_control_request_t const request = {
 8005522:	847b      	strh	r3, [r7, #34]	@ 0x22
      .wIndex   = tu_htole16((uint16_t) itf_num),
 8005524:	79bb      	ldrb	r3, [r7, #6]
 8005526:	b29b      	uxth	r3, r3
  tusb_control_request_t const request = {
 8005528:	84bb      	strh	r3, [r7, #36]	@ 0x24
 800552a:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 800552c:	84fb      	strh	r3, [r7, #38]	@ 0x26
      .wLength  = len
  };
  tuh_xfer_t xfer = {
 800552e:	f107 0308 	add.w	r3, r7, #8
 8005532:	2200      	movs	r2, #0
 8005534:	601a      	str	r2, [r3, #0]
 8005536:	605a      	str	r2, [r3, #4]
 8005538:	609a      	str	r2, [r3, #8]
 800553a:	60da      	str	r2, [r3, #12]
 800553c:	611a      	str	r2, [r3, #16]
 800553e:	615a      	str	r2, [r3, #20]
 8005540:	79fb      	ldrb	r3, [r7, #7]
 8005542:	723b      	strb	r3, [r7, #8]
 8005544:	f107 0320 	add.w	r3, r7, #32
 8005548:	613b      	str	r3, [r7, #16]
 800554a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800554c:	617b      	str	r3, [r7, #20]
 800554e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005550:	61bb      	str	r3, [r7, #24]
 8005552:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005554:	61fb      	str	r3, [r7, #28]
      .buffer      = buffer,
      .complete_cb = complete_cb,
      .user_data   = user_data
  };

  return tuh_control_xfer(&xfer);
 8005556:	f107 0308 	add.w	r3, r7, #8
 800555a:	4618      	mov	r0, r3
 800555c:	f7ff f980 	bl	8004860 <tuh_control_xfer>
 8005560:	4603      	mov	r3, r0
}
 8005562:	4618      	mov	r0, r3
 8005564:	372c      	adds	r7, #44	@ 0x2c
 8005566:	46bd      	mov	sp, r7
 8005568:	bd90      	pop	{r4, r7, pc}
	...

0800556c <tuh_address_set>:

bool tuh_address_set(uint8_t daddr, uint8_t new_addr,
                     tuh_xfer_cb_t complete_cb, uintptr_t user_data) {
 800556c:	b580      	push	{r7, lr}
 800556e:	b08e      	sub	sp, #56	@ 0x38
 8005570:	af00      	add	r7, sp, #0
 8005572:	60ba      	str	r2, [r7, #8]
 8005574:	607b      	str	r3, [r7, #4]
 8005576:	4603      	mov	r3, r0
 8005578:	73fb      	strb	r3, [r7, #15]
 800557a:	460b      	mov	r3, r1
 800557c:	73bb      	strb	r3, [r7, #14]
  TU_LOG_USBH("Set Address = %d\r\n", new_addr);
  const tusb_control_request_t request = {
 800557e:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8005582:	f023 031f 	bic.w	r3, r3, #31
 8005586:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
 800558a:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800558e:	f023 0360 	bic.w	r3, r3, #96	@ 0x60
 8005592:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
 8005596:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800559a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800559e:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
 80055a2:	2305      	movs	r3, #5
 80055a4:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
 80055a8:	7bbb      	ldrb	r3, [r7, #14]
 80055aa:	b29b      	uxth	r3, r3
 80055ac:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 80055ae:	2300      	movs	r3, #0
 80055b0:	863b      	strh	r3, [r7, #48]	@ 0x30
 80055b2:	2300      	movs	r3, #0
 80055b4:	867b      	strh	r3, [r7, #50]	@ 0x32
    .bRequest = TUSB_REQ_SET_ADDRESS,
    .wValue   = tu_htole16(new_addr),
    .wIndex   = 0,
    .wLength  = 0
  };
  tuh_xfer_t xfer = {
 80055b6:	f107 0314 	add.w	r3, r7, #20
 80055ba:	2200      	movs	r2, #0
 80055bc:	601a      	str	r2, [r3, #0]
 80055be:	605a      	str	r2, [r3, #4]
 80055c0:	609a      	str	r2, [r3, #8]
 80055c2:	60da      	str	r2, [r3, #12]
 80055c4:	611a      	str	r2, [r3, #16]
 80055c6:	615a      	str	r2, [r3, #20]
 80055c8:	7bfb      	ldrb	r3, [r7, #15]
 80055ca:	753b      	strb	r3, [r7, #20]
 80055cc:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80055d0:	61fb      	str	r3, [r7, #28]
 80055d2:	68bb      	ldr	r3, [r7, #8]
 80055d4:	627b      	str	r3, [r7, #36]	@ 0x24
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	62bb      	str	r3, [r7, #40]	@ 0x28
    .buffer      = NULL,
    .complete_cb = complete_cb,
    .user_data   = user_data
  };

  TU_ASSERT(tuh_control_xfer(&xfer));
 80055da:	f107 0314 	add.w	r3, r7, #20
 80055de:	4618      	mov	r0, r3
 80055e0:	f7ff f93e 	bl	8004860 <tuh_control_xfer>
 80055e4:	4603      	mov	r3, r0
 80055e6:	f083 0301 	eor.w	r3, r3, #1
 80055ea:	b2db      	uxtb	r3, r3
 80055ec:	2b00      	cmp	r3, #0
 80055ee:	d00a      	beq.n	8005606 <tuh_address_set+0x9a>
 80055f0:	4b07      	ldr	r3, [pc, #28]	@ (8005610 <tuh_address_set+0xa4>)
 80055f2:	637b      	str	r3, [r7, #52]	@ 0x34
 80055f4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	f003 0301 	and.w	r3, r3, #1
 80055fc:	2b00      	cmp	r3, #0
 80055fe:	d000      	beq.n	8005602 <tuh_address_set+0x96>
 8005600:	be00      	bkpt	0x0000
 8005602:	2300      	movs	r3, #0
 8005604:	e000      	b.n	8005608 <tuh_address_set+0x9c>
  return true;
 8005606:	2301      	movs	r3, #1
}
 8005608:	4618      	mov	r0, r3
 800560a:	3738      	adds	r7, #56	@ 0x38
 800560c:	46bd      	mov	sp, r7
 800560e:	bd80      	pop	{r7, pc}
 8005610:	e000edf0 	.word	0xe000edf0

08005614 <tuh_configuration_set>:

bool tuh_configuration_set(uint8_t daddr, uint8_t config_num,
                           tuh_xfer_cb_t complete_cb, uintptr_t user_data) {
 8005614:	b580      	push	{r7, lr}
 8005616:	b08c      	sub	sp, #48	@ 0x30
 8005618:	af00      	add	r7, sp, #0
 800561a:	60ba      	str	r2, [r7, #8]
 800561c:	607b      	str	r3, [r7, #4]
 800561e:	4603      	mov	r3, r0
 8005620:	73fb      	strb	r3, [r7, #15]
 8005622:	460b      	mov	r3, r1
 8005624:	73bb      	strb	r3, [r7, #14]
  TU_LOG_USBH("Set Configuration = %d\r\n", config_num);
  tusb_control_request_t const request = {
 8005626:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800562a:	f023 031f 	bic.w	r3, r3, #31
 800562e:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
 8005632:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8005636:	f023 0360 	bic.w	r3, r3, #96	@ 0x60
 800563a:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
 800563e:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8005642:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005646:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
 800564a:	2309      	movs	r3, #9
 800564c:	f887 3029 	strb.w	r3, [r7, #41]	@ 0x29
 8005650:	7bbb      	ldrb	r3, [r7, #14]
 8005652:	b29b      	uxth	r3, r3
 8005654:	857b      	strh	r3, [r7, #42]	@ 0x2a
 8005656:	2300      	movs	r3, #0
 8005658:	85bb      	strh	r3, [r7, #44]	@ 0x2c
 800565a:	2300      	movs	r3, #0
 800565c:	85fb      	strh	r3, [r7, #46]	@ 0x2e
      .bRequest = TUSB_REQ_SET_CONFIGURATION,
      .wValue   = tu_htole16(config_num),
      .wIndex   = 0,
      .wLength  = 0
  };
  tuh_xfer_t xfer = {
 800565e:	f107 0310 	add.w	r3, r7, #16
 8005662:	2200      	movs	r2, #0
 8005664:	601a      	str	r2, [r3, #0]
 8005666:	605a      	str	r2, [r3, #4]
 8005668:	609a      	str	r2, [r3, #8]
 800566a:	60da      	str	r2, [r3, #12]
 800566c:	611a      	str	r2, [r3, #16]
 800566e:	615a      	str	r2, [r3, #20]
 8005670:	7bfb      	ldrb	r3, [r7, #15]
 8005672:	743b      	strb	r3, [r7, #16]
 8005674:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8005678:	61bb      	str	r3, [r7, #24]
 800567a:	68bb      	ldr	r3, [r7, #8]
 800567c:	623b      	str	r3, [r7, #32]
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	627b      	str	r3, [r7, #36]	@ 0x24
      .buffer      = NULL,
      .complete_cb = complete_cb,
      .user_data   = user_data
  };

  return tuh_control_xfer(&xfer);
 8005682:	f107 0310 	add.w	r3, r7, #16
 8005686:	4618      	mov	r0, r3
 8005688:	f7ff f8ea 	bl	8004860 <tuh_control_xfer>
 800568c:	4603      	mov	r3, r0
}
 800568e:	4618      	mov	r0, r3
 8005690:	3730      	adds	r7, #48	@ 0x30
 8005692:	46bd      	mov	sp, r7
 8005694:	bd80      	pop	{r7, pc}
	...

08005698 <process_removed_device>:

//--------------------------------------------------------------------+
// Detaching
//--------------------------------------------------------------------+
// a device unplugged from rhport:hub_addr:hub_port
static void process_removed_device(uint8_t rhport, uint8_t hub_addr, uint8_t hub_port) {
 8005698:	b580      	push	{r7, lr}
 800569a:	b088      	sub	sp, #32
 800569c:	af00      	add	r7, sp, #0
 800569e:	4603      	mov	r3, r0
 80056a0:	71fb      	strb	r3, [r7, #7]
 80056a2:	460b      	mov	r3, r1
 80056a4:	71bb      	strb	r3, [r7, #6]
 80056a6:	4613      	mov	r3, r2
 80056a8:	717b      	strb	r3, [r7, #5]
  #if CFG_TUH_HUB
  uint8_t removing_hubs[CFG_TUH_HUB] = { 0 };
  #endif

  do {
    for (uint8_t dev_id = 0; dev_id < TOTAL_DEVICES; dev_id++) {
 80056aa:	2300      	movs	r3, #0
 80056ac:	77fb      	strb	r3, [r7, #31]
 80056ae:	e06e      	b.n	800578e <process_removed_device+0xf6>
      usbh_device_t* dev = &_usbh_devices[dev_id];
 80056b0:	7ffb      	ldrb	r3, [r7, #31]
 80056b2:	225e      	movs	r2, #94	@ 0x5e
 80056b4:	fb02 f303 	mul.w	r3, r2, r3
 80056b8:	4a39      	ldr	r2, [pc, #228]	@ (80057a0 <process_removed_device+0x108>)
 80056ba:	4413      	add	r3, r2
 80056bc:	61bb      	str	r3, [r7, #24]
      uint8_t const daddr = dev_id + 1;
 80056be:	7ffb      	ldrb	r3, [r7, #31]
 80056c0:	3301      	adds	r3, #1
 80056c2:	75fb      	strb	r3, [r7, #23]

      // hub_addr = 0 means roothub, hub_port = 0 means all devices of downstream hub
      if (dev->bus_info.rhport == rhport && dev->connected &&
 80056c4:	69bb      	ldr	r3, [r7, #24]
 80056c6:	781b      	ldrb	r3, [r3, #0]
 80056c8:	79fa      	ldrb	r2, [r7, #7]
 80056ca:	429a      	cmp	r2, r3
 80056cc:	d15c      	bne.n	8005788 <process_removed_device+0xf0>
 80056ce:	69bb      	ldr	r3, [r7, #24]
 80056d0:	7d1b      	ldrb	r3, [r3, #20]
 80056d2:	f3c3 0300 	ubfx	r3, r3, #0, #1
 80056d6:	b2db      	uxtb	r3, r3
 80056d8:	2b00      	cmp	r3, #0
 80056da:	d055      	beq.n	8005788 <process_removed_device+0xf0>
 80056dc:	79bb      	ldrb	r3, [r7, #6]
 80056de:	2b00      	cmp	r3, #0
 80056e0:	d004      	beq.n	80056ec <process_removed_device+0x54>
          (hub_addr == 0 || dev->bus_info.hub_addr == hub_addr) &&
 80056e2:	69bb      	ldr	r3, [r7, #24]
 80056e4:	785b      	ldrb	r3, [r3, #1]
 80056e6:	79ba      	ldrb	r2, [r7, #6]
 80056e8:	429a      	cmp	r2, r3
 80056ea:	d14d      	bne.n	8005788 <process_removed_device+0xf0>
 80056ec:	797b      	ldrb	r3, [r7, #5]
 80056ee:	2b00      	cmp	r3, #0
 80056f0:	d004      	beq.n	80056fc <process_removed_device+0x64>
          (hub_port == 0 || dev->bus_info.hub_port == hub_port)) {
 80056f2:	69bb      	ldr	r3, [r7, #24]
 80056f4:	789b      	ldrb	r3, [r3, #2]
 80056f6:	797a      	ldrb	r2, [r7, #5]
 80056f8:	429a      	cmp	r2, r3
 80056fa:	d145      	bne.n	8005788 <process_removed_device+0xf0>
          removing_hubs[dev_id - CFG_TUH_DEVICE_MAX] = 1;
        } else
        #endif
        {
          // Invoke callback before closing driver (maybe call it later ?)
          if (tuh_umount_cb) {
 80056fc:	4b29      	ldr	r3, [pc, #164]	@ (80057a4 <process_removed_device+0x10c>)
 80056fe:	2b00      	cmp	r3, #0
 8005700:	d003      	beq.n	800570a <process_removed_device+0x72>
            tuh_umount_cb(daddr);
 8005702:	7dfb      	ldrb	r3, [r7, #23]
 8005704:	4618      	mov	r0, r3
 8005706:	f3af 8000 	nop.w
          }
        }

        // Close class driver
        for (uint8_t drv_id = 0; drv_id < TOTAL_DRIVER_COUNT; drv_id++) {
 800570a:	2300      	movs	r3, #0
 800570c:	77bb      	strb	r3, [r7, #30]
 800570e:	e00f      	b.n	8005730 <process_removed_device+0x98>
          usbh_class_driver_t const* driver = get_driver(drv_id);
 8005710:	7fbb      	ldrb	r3, [r7, #30]
 8005712:	4618      	mov	r0, r3
 8005714:	f7fe fd5a 	bl	80041cc <get_driver>
 8005718:	6138      	str	r0, [r7, #16]
          if (driver) {
 800571a:	693b      	ldr	r3, [r7, #16]
 800571c:	2b00      	cmp	r3, #0
 800571e:	d004      	beq.n	800572a <process_removed_device+0x92>
            driver->close(daddr);
 8005720:	693b      	ldr	r3, [r7, #16]
 8005722:	699b      	ldr	r3, [r3, #24]
 8005724:	7dfa      	ldrb	r2, [r7, #23]
 8005726:	4610      	mov	r0, r2
 8005728:	4798      	blx	r3
        for (uint8_t drv_id = 0; drv_id < TOTAL_DRIVER_COUNT; drv_id++) {
 800572a:	7fbb      	ldrb	r3, [r7, #30]
 800572c:	3301      	adds	r3, #1
 800572e:	77bb      	strb	r3, [r7, #30]
 8005730:	4b1d      	ldr	r3, [pc, #116]	@ (80057a8 <process_removed_device+0x110>)
 8005732:	781b      	ldrb	r3, [r3, #0]
 8005734:	7fba      	ldrb	r2, [r7, #30]
 8005736:	429a      	cmp	r2, r3
 8005738:	d9ea      	bls.n	8005710 <process_removed_device+0x78>
 800573a:	79fb      	ldrb	r3, [r7, #7]
 800573c:	73fb      	strb	r3, [r7, #15]
 800573e:	7dfb      	ldrb	r3, [r7, #23]
 8005740:	73bb      	strb	r3, [r7, #14]
  hcd_device_close(rhport, daddr);
 8005742:	7bba      	ldrb	r2, [r7, #14]
 8005744:	7bfb      	ldrb	r3, [r7, #15]
 8005746:	4611      	mov	r1, r2
 8005748:	4618      	mov	r0, r3
 800574a:	f001 fb85 	bl	8006e58 <hcd_device_close>
  if (daddr == _usbh_data.ctrl_xfer_info.daddr) {
 800574e:	4b17      	ldr	r3, [pc, #92]	@ (80057ac <process_removed_device+0x114>)
 8005750:	7d5b      	ldrb	r3, [r3, #21]
 8005752:	7bba      	ldrb	r2, [r7, #14]
 8005754:	429a      	cmp	r2, r3
 8005756:	d10b      	bne.n	8005770 <process_removed_device+0xd8>
 8005758:	2300      	movs	r3, #0
 800575a:	737b      	strb	r3, [r7, #13]
  if (_usbh_data.ctrl_xfer_info.stage != stage) {
 800575c:	4b13      	ldr	r3, [pc, #76]	@ (80057ac <process_removed_device+0x114>)
 800575e:	7d1b      	ldrb	r3, [r3, #20]
 8005760:	b2db      	uxtb	r3, r3
 8005762:	7b7a      	ldrb	r2, [r7, #13]
 8005764:	429a      	cmp	r2, r3
 8005766:	d002      	beq.n	800576e <process_removed_device+0xd6>
    _usbh_data.ctrl_xfer_info.stage = stage;
 8005768:	4a10      	ldr	r2, [pc, #64]	@ (80057ac <process_removed_device+0x114>)
 800576a:	7b7b      	ldrb	r3, [r7, #13]
 800576c:	7513      	strb	r3, [r2, #20]
}
 800576e:	bf00      	nop
  if (daddr == _usbh_data.enumerating_daddr) {
 8005770:	4b0e      	ldr	r3, [pc, #56]	@ (80057ac <process_removed_device+0x114>)
 8005772:	785b      	ldrb	r3, [r3, #1]
 8005774:	7bba      	ldrb	r2, [r7, #14]
 8005776:	429a      	cmp	r2, r3
 8005778:	d102      	bne.n	8005780 <process_removed_device+0xe8>
    _usbh_data.enumerating_daddr = TUSB_INDEX_INVALID_8;
 800577a:	4b0c      	ldr	r3, [pc, #48]	@ (80057ac <process_removed_device+0x114>)
 800577c:	22ff      	movs	r2, #255	@ 0xff
 800577e:	705a      	strb	r2, [r3, #1]
}
 8005780:	bf00      	nop
          }
        }

        usbh_device_close(rhport, daddr);
        clear_device(dev);
 8005782:	69b8      	ldr	r0, [r7, #24]
 8005784:	f7fe fdba 	bl	80042fc <clear_device>
    for (uint8_t dev_id = 0; dev_id < TOTAL_DEVICES; dev_id++) {
 8005788:	7ffb      	ldrb	r3, [r7, #31]
 800578a:	3301      	adds	r3, #1
 800578c:	77fb      	strb	r3, [r7, #31]
 800578e:	7ffb      	ldrb	r3, [r7, #31]
 8005790:	2b00      	cmp	r3, #0
 8005792:	d08d      	beq.n	80056b0 <process_removed_device+0x18>
        hub_port = 0;
        break;
      }
    }
#else
    break;
 8005794:	bf00      	nop
#endif

  } while(1);
}
 8005796:	bf00      	nop
 8005798:	3720      	adds	r7, #32
 800579a:	46bd      	mov	sp, r7
 800579c:	bd80      	pop	{r7, pc}
 800579e:	bf00      	nop
 80057a0:	2000098c 	.word	0x2000098c
 80057a4:	00000000 	.word	0x00000000
 80057a8:	20000bbc 	.word	0x20000bbc
 80057ac:	20000020 	.word	0x20000020

080057b0 <enum_new_device>:
static bool enum_parse_configuration_desc (uint8_t dev_addr, tusb_desc_configuration_t const* desc_cfg);
static void enum_full_complete(void);
static void process_enumeration(tuh_xfer_t* xfer);

// start a new enumeration process
static bool enum_new_device(hcd_event_t* event) {
 80057b0:	b580      	push	{r7, lr}
 80057b2:	b08a      	sub	sp, #40	@ 0x28
 80057b4:	af00      	add	r7, sp, #0
 80057b6:	6078      	str	r0, [r7, #4]
  tuh_bus_info_t* dev0_bus = &_usbh_data.dev0_bus;
 80057b8:	4b35      	ldr	r3, [pc, #212]	@ (8005890 <enum_new_device+0xe0>)
 80057ba:	627b      	str	r3, [r7, #36]	@ 0x24
  dev0_bus->rhport = event->rhport;
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	781a      	ldrb	r2, [r3, #0]
 80057c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80057c2:	701a      	strb	r2, [r3, #0]
  dev0_bus->hub_addr = event->connection.hub_addr;
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	791a      	ldrb	r2, [r3, #4]
 80057c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80057ca:	705a      	strb	r2, [r3, #1]
  dev0_bus->hub_port = event->connection.hub_port;
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	795a      	ldrb	r2, [r3, #5]
 80057d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80057d2:	709a      	strb	r2, [r3, #2]

  // wait until device connection is stable TODO non blocking
  tusb_time_delay_ms_api(ENUM_DEBOUNCING_DELAY_MS);
 80057d4:	2096      	movs	r0, #150	@ 0x96
 80057d6:	f002 fa41 	bl	8007c5c <tusb_time_delay_ms_api>

  // clear roothub debouncing delay
  if (dev0_bus->hub_addr == 0) {
 80057da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80057dc:	785b      	ldrb	r3, [r3, #1]
 80057de:	2b00      	cmp	r3, #0
 80057e0:	d10d      	bne.n	80057fe <enum_new_device+0x4e>
    _usbh_data.attach_debouncing_bm &= (uint8_t) ~TU_BIT(dev0_bus->rhport);
 80057e2:	4b2c      	ldr	r3, [pc, #176]	@ (8005894 <enum_new_device+0xe4>)
 80057e4:	789a      	ldrb	r2, [r3, #2]
 80057e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80057e8:	781b      	ldrb	r3, [r3, #0]
 80057ea:	4619      	mov	r1, r3
 80057ec:	2301      	movs	r3, #1
 80057ee:	408b      	lsls	r3, r1
 80057f0:	b2db      	uxtb	r3, r3
 80057f2:	43db      	mvns	r3, r3
 80057f4:	b2db      	uxtb	r3, r3
 80057f6:	4013      	ands	r3, r2
 80057f8:	b2da      	uxtb	r2, r3
 80057fa:	4b26      	ldr	r3, [pc, #152]	@ (8005894 <enum_new_device+0xe4>)
 80057fc:	709a      	strb	r2, [r3, #2]
  }

  if (dev0_bus->hub_addr == 0) {
 80057fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005800:	785b      	ldrb	r3, [r3, #1]
 8005802:	2b00      	cmp	r3, #0
 8005804:	d13e      	bne.n	8005884 <enum_new_device+0xd4>
    // connected directly to roothub
    // USB bus not active and frame number is not available yet.
    // need to depend on tusb_time_millis_api() TODO non blocking

    if (!hcd_port_connect_status(dev0_bus->rhport)) {
 8005806:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005808:	781b      	ldrb	r3, [r3, #0]
 800580a:	4618      	mov	r0, r3
 800580c:	f001 fa66 	bl	8006cdc <hcd_port_connect_status>
 8005810:	4603      	mov	r3, r0
 8005812:	f083 0301 	eor.w	r3, r3, #1
 8005816:	b2db      	uxtb	r3, r3
 8005818:	2b00      	cmp	r3, #0
 800581a:	d003      	beq.n	8005824 <enum_new_device+0x74>
      TU_LOG_USBH("Device unplugged while debouncing\r\n");
      enum_full_complete();
 800581c:	f000 fe32 	bl	8006484 <enum_full_complete>
      return true;
 8005820:	2301      	movs	r3, #1
 8005822:	e030      	b.n	8005886 <enum_new_device+0xd6>
    }

    // reset device
    hcd_port_reset(dev0_bus->rhport);
 8005824:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005826:	781b      	ldrb	r3, [r3, #0]
 8005828:	4618      	mov	r0, r3
 800582a:	f001 fa7b 	bl	8006d24 <hcd_port_reset>
    tusb_time_delay_ms_api(ENUM_RESET_ROOT_DELAY_MS);
 800582e:	2032      	movs	r0, #50	@ 0x32
 8005830:	f002 fa14 	bl	8007c5c <tusb_time_delay_ms_api>
    hcd_port_reset_end(dev0_bus->rhport);
 8005834:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005836:	781b      	ldrb	r3, [r3, #0]
 8005838:	4618      	mov	r0, r3
 800583a:	f001 fa9b 	bl	8006d74 <hcd_port_reset_end>

    if (!hcd_port_connect_status(dev0_bus->rhport)) {
 800583e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005840:	781b      	ldrb	r3, [r3, #0]
 8005842:	4618      	mov	r0, r3
 8005844:	f001 fa4a 	bl	8006cdc <hcd_port_connect_status>
 8005848:	4603      	mov	r3, r0
 800584a:	f083 0301 	eor.w	r3, r3, #1
 800584e:	b2db      	uxtb	r3, r3
 8005850:	2b00      	cmp	r3, #0
 8005852:	d003      	beq.n	800585c <enum_new_device+0xac>
      // device unplugged while delaying
      enum_full_complete();
 8005854:	f000 fe16 	bl	8006484 <enum_full_complete>
      return true;
 8005858:	2301      	movs	r3, #1
 800585a:	e014      	b.n	8005886 <enum_new_device+0xd6>
    }

    dev0_bus->speed = hcd_port_speed_get(dev0_bus->rhport);
 800585c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800585e:	781b      	ldrb	r3, [r3, #0]
 8005860:	4618      	mov	r0, r3
 8005862:	f001 faaf 	bl	8006dc4 <hcd_port_speed_get>
 8005866:	4603      	mov	r3, r0
 8005868:	461a      	mov	r2, r3
 800586a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800586c:	70da      	strb	r2, [r3, #3]
    TU_LOG_USBH("%s Speed\r\n", tu_str_speed[dev0_bus->speed]);

    // fake transfer to kick-off the enumeration process
    tuh_xfer_t xfer;
    xfer.daddr = 0;
 800586e:	2300      	movs	r3, #0
 8005870:	733b      	strb	r3, [r7, #12]
    xfer.result = XFER_RESULT_SUCCESS;
 8005872:	2300      	movs	r3, #0
 8005874:	73fb      	strb	r3, [r7, #15]
    xfer.user_data = ENUM_ADDR0_DEVICE_DESC;
 8005876:	2305      	movs	r3, #5
 8005878:	623b      	str	r3, [r7, #32]
    process_enumeration(&xfer);
 800587a:	f107 030c 	add.w	r3, r7, #12
 800587e:	4618      	mov	r0, r3
 8005880:	f000 f80a 	bl	8005898 <process_enumeration>
    TU_ASSERT(hub_port_get_status(dev0_bus->hub_addr, dev0_bus->hub_port, NULL,
                                  process_enumeration, ENUM_HUB_RERSET));
  }
  #endif // hub

  return true;
 8005884:	2301      	movs	r3, #1
}
 8005886:	4618      	mov	r0, r3
 8005888:	3728      	adds	r7, #40	@ 0x28
 800588a:	46bd      	mov	sp, r7
 800588c:	bd80      	pop	{r7, pc}
 800588e:	bf00      	nop
 8005890:	20000023 	.word	0x20000023
 8005894:	20000020 	.word	0x20000020

08005898 <process_enumeration>:

// process device enumeration
static void process_enumeration(tuh_xfer_t* xfer) {
 8005898:	b590      	push	{r4, r7, lr}
 800589a:	b0b5      	sub	sp, #212	@ 0xd4
 800589c:	af04      	add	r7, sp, #16
 800589e:	6078      	str	r0, [r7, #4]
  // Retry a few times while enumerating since device can be unstable when starting up
  static uint8_t failed_count = 0;
  if (XFER_RESULT_FAILED == xfer->result) {
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	78db      	ldrb	r3, [r3, #3]
 80058a4:	2b01      	cmp	r3, #1
 80058a6:	d131      	bne.n	800590c <process_enumeration+0x74>
      ATTEMPT_COUNT_MAX = 3,
      ATTEMPT_DELAY_MS = 100
    };

    // retry if not reaching max attempt
    failed_count++;
 80058a8:	4bb2      	ldr	r3, [pc, #712]	@ (8005b74 <process_enumeration+0x2dc>)
 80058aa:	781b      	ldrb	r3, [r3, #0]
 80058ac:	3301      	adds	r3, #1
 80058ae:	b2da      	uxtb	r2, r3
 80058b0:	4bb0      	ldr	r3, [pc, #704]	@ (8005b74 <process_enumeration+0x2dc>)
 80058b2:	701a      	strb	r2, [r3, #0]
    bool retry = (_usbh_data.enumerating_daddr != TUSB_INDEX_INVALID_8) && (failed_count < ATTEMPT_COUNT_MAX);
 80058b4:	4bb0      	ldr	r3, [pc, #704]	@ (8005b78 <process_enumeration+0x2e0>)
 80058b6:	785b      	ldrb	r3, [r3, #1]
 80058b8:	2bff      	cmp	r3, #255	@ 0xff
 80058ba:	d005      	beq.n	80058c8 <process_enumeration+0x30>
 80058bc:	4bad      	ldr	r3, [pc, #692]	@ (8005b74 <process_enumeration+0x2dc>)
 80058be:	781b      	ldrb	r3, [r3, #0]
 80058c0:	2b02      	cmp	r3, #2
 80058c2:	d801      	bhi.n	80058c8 <process_enumeration+0x30>
 80058c4:	2301      	movs	r3, #1
 80058c6:	e000      	b.n	80058ca <process_enumeration+0x32>
 80058c8:	2300      	movs	r3, #0
 80058ca:	f887 30bf 	strb.w	r3, [r7, #191]	@ 0xbf
 80058ce:	f897 30bf 	ldrb.w	r3, [r7, #191]	@ 0xbf
 80058d2:	f003 0301 	and.w	r3, r3, #1
 80058d6:	f887 30bf 	strb.w	r3, [r7, #191]	@ 0xbf
    if (retry) {
 80058da:	f897 30bf 	ldrb.w	r3, [r7, #191]	@ 0xbf
 80058de:	2b00      	cmp	r3, #0
 80058e0:	d008      	beq.n	80058f4 <process_enumeration+0x5c>
      tusb_time_delay_ms_api(ATTEMPT_DELAY_MS); // delay a bit
 80058e2:	2064      	movs	r0, #100	@ 0x64
 80058e4:	f002 f9ba 	bl	8007c5c <tusb_time_delay_ms_api>
      TU_LOG_USBH("Enumeration attempt %u/%u\r\n", failed_count+1, ATTEMPT_COUNT_MAX);
      retry = tuh_control_xfer(xfer);
 80058e8:	6878      	ldr	r0, [r7, #4]
 80058ea:	f7fe ffb9 	bl	8004860 <tuh_control_xfer>
 80058ee:	4603      	mov	r3, r0
 80058f0:	f887 30bf 	strb.w	r3, [r7, #191]	@ 0xbf
    }

    if (!retry) {
 80058f4:	f897 30bf 	ldrb.w	r3, [r7, #191]	@ 0xbf
 80058f8:	f083 0301 	eor.w	r3, r3, #1
 80058fc:	b2db      	uxtb	r3, r3
 80058fe:	2b00      	cmp	r3, #0
 8005900:	f000 840a 	beq.w	8006118 <process_enumeration+0x880>
      enum_full_complete(); // complete as failed
 8005904:	f000 fdbe 	bl	8006484 <enum_full_complete>
    }
    return;
 8005908:	f000 bc06 	b.w	8006118 <process_enumeration+0x880>
  }
  failed_count = 0;
 800590c:	4b99      	ldr	r3, [pc, #612]	@ (8005b74 <process_enumeration+0x2dc>)
 800590e:	2200      	movs	r2, #0
 8005910:	701a      	strb	r2, [r3, #0]

  uint8_t const daddr = xfer->daddr;
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	781b      	ldrb	r3, [r3, #0]
 8005916:	f887 30bb 	strb.w	r3, [r7, #187]	@ 0xbb
  uintptr_t const state = xfer->user_data;
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	695b      	ldr	r3, [r3, #20]
 800591e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005922:	f897 30bb 	ldrb.w	r3, [r7, #187]	@ 0xbb
 8005926:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
  TU_VERIFY(dev_addr > 0 && dev_addr <= TOTAL_DEVICES, NULL);
 800592a:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
 800592e:	2b00      	cmp	r3, #0
 8005930:	d003      	beq.n	800593a <process_enumeration+0xa2>
 8005932:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
 8005936:	2b01      	cmp	r3, #1
 8005938:	d901      	bls.n	800593e <process_enumeration+0xa6>
 800593a:	2300      	movs	r3, #0
 800593c:	e007      	b.n	800594e <process_enumeration+0xb6>
  return &_usbh_devices[dev_addr-1];
 800593e:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
 8005942:	3b01      	subs	r3, #1
 8005944:	225e      	movs	r2, #94	@ 0x5e
 8005946:	fb02 f303 	mul.w	r3, r2, r3
 800594a:	4a8c      	ldr	r2, [pc, #560]	@ (8005b7c <process_enumeration+0x2e4>)
 800594c:	4413      	add	r3, r2
  usbh_device_t* dev = get_device(daddr);
 800594e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
  tuh_bus_info_t* dev0_bus = &_usbh_data.dev0_bus;
 8005952:	4b8b      	ldr	r3, [pc, #556]	@ (8005b80 <process_enumeration+0x2e8>)
 8005954:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  if (daddr > 0) {
 8005958:	f897 30bb 	ldrb.w	r3, [r7, #187]	@ 0xbb
 800595c:	2b00      	cmp	r3, #0
 800595e:	d010      	beq.n	8005982 <process_enumeration+0xea>
    TU_ASSERT(dev,);
 8005960:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8005964:	2b00      	cmp	r3, #0
 8005966:	d10c      	bne.n	8005982 <process_enumeration+0xea>
 8005968:	4b86      	ldr	r3, [pc, #536]	@ (8005b84 <process_enumeration+0x2ec>)
 800596a:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800596e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	f003 0301 	and.w	r3, r3, #1
 8005978:	2b00      	cmp	r3, #0
 800597a:	f000 83cf 	beq.w	800611c <process_enumeration+0x884>
 800597e:	be00      	bkpt	0x0000
 8005980:	e3cc      	b.n	800611c <process_enumeration+0x884>
  }
  uint16_t langid = 0x0409; // default is English
 8005982:	f240 4309 	movw	r3, #1033	@ 0x409
 8005986:	f8a7 30bc 	strh.w	r3, [r7, #188]	@ 0xbc

  switch (state) {
 800598a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800598e:	3b05      	subs	r3, #5
 8005990:	2b0e      	cmp	r3, #14
 8005992:	f200 83be 	bhi.w	8006112 <process_enumeration+0x87a>
 8005996:	a201      	add	r2, pc, #4	@ (adr r2, 800599c <process_enumeration+0x104>)
 8005998:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800599c:	080059d9 	.word	0x080059d9
 80059a0:	08005a49 	.word	0x08005a49
 80059a4:	08005b19 	.word	0x08005b19
 80059a8:	08005c69 	.word	0x08005c69
 80059ac:	08005d2d 	.word	0x08005d2d
 80059b0:	08005d71 	.word	0x08005d71
 80059b4:	08005dbd 	.word	0x08005dbd
 80059b8:	08005e07 	.word	0x08005e07
 80059bc:	08005e5d 	.word	0x08005e5d
 80059c0:	08005ea7 	.word	0x08005ea7
 80059c4:	08005eeb 	.word	0x08005eeb
 80059c8:	08005f35 	.word	0x08005f35
 80059cc:	08005f77 	.word	0x08005f77
 80059d0:	08005fff 	.word	0x08005fff
 80059d4:	080060c9 	.word	0x080060c9
      TU_ATTR_FALLTHROUGH;
    }
    #endif

    case ENUM_ADDR0_DEVICE_DESC: {
      tusb_time_delay_ms_api(ENUM_RESET_RECOVERY_DELAY_MS); // reset recovery
 80059d8:	200a      	movs	r0, #10
 80059da:	f002 f93f 	bl	8007c5c <tusb_time_delay_ms_api>

      // TODO probably doesn't need to open/close each enumeration
      uint8_t const addr0 = 0;
 80059de:	2300      	movs	r3, #0
 80059e0:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
      TU_ASSERT(usbh_edpt_control_open(addr0, 8),);
 80059e4:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 80059e8:	2108      	movs	r1, #8
 80059ea:	4618      	mov	r0, r3
 80059ec:	f7ff fbdc 	bl	80051a8 <usbh_edpt_control_open>
 80059f0:	4603      	mov	r3, r0
 80059f2:	f083 0301 	eor.w	r3, r3, #1
 80059f6:	b2db      	uxtb	r3, r3
 80059f8:	2b00      	cmp	r3, #0
 80059fa:	d00a      	beq.n	8005a12 <process_enumeration+0x17a>
 80059fc:	4b61      	ldr	r3, [pc, #388]	@ (8005b84 <process_enumeration+0x2ec>)
 80059fe:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005a00:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	f003 0301 	and.w	r3, r3, #1
 8005a08:	2b00      	cmp	r3, #0
 8005a0a:	f000 8389 	beq.w	8006120 <process_enumeration+0x888>
 8005a0e:	be00      	bkpt	0x0000
 8005a10:	e386      	b.n	8006120 <process_enumeration+0x888>

      // Get first 8 bytes of device descriptor for control endpoint size
      TU_LOG_USBH("Get 8 byte of Device Descriptor\r\n");
      TU_ASSERT(tuh_descriptor_get_device(addr0, _usbh_epbuf.ctrl, 8,
 8005a12:	f897 0047 	ldrb.w	r0, [r7, #71]	@ 0x47
 8005a16:	2306      	movs	r3, #6
 8005a18:	9300      	str	r3, [sp, #0]
 8005a1a:	4b5b      	ldr	r3, [pc, #364]	@ (8005b88 <process_enumeration+0x2f0>)
 8005a1c:	2208      	movs	r2, #8
 8005a1e:	495b      	ldr	r1, [pc, #364]	@ (8005b8c <process_enumeration+0x2f4>)
 8005a20:	f7ff fcae 	bl	8005380 <tuh_descriptor_get_device>
 8005a24:	4603      	mov	r3, r0
 8005a26:	f083 0301 	eor.w	r3, r3, #1
 8005a2a:	b2db      	uxtb	r3, r3
 8005a2c:	2b00      	cmp	r3, #0
 8005a2e:	f000 8379 	beq.w	8006124 <process_enumeration+0x88c>
 8005a32:	4b54      	ldr	r3, [pc, #336]	@ (8005b84 <process_enumeration+0x2ec>)
 8005a34:	643b      	str	r3, [r7, #64]	@ 0x40
 8005a36:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005a38:	681b      	ldr	r3, [r3, #0]
 8005a3a:	f003 0301 	and.w	r3, r3, #1
 8005a3e:	2b00      	cmp	r3, #0
 8005a40:	f000 8372 	beq.w	8006128 <process_enumeration+0x890>
 8005a44:	be00      	bkpt	0x0000
 8005a46:	e36f      	b.n	8006128 <process_enumeration+0x890>
    }

    case ENUM_SET_ADDR: {
      // Due to physical debouncing, some devices can cause multiple attaches (actually reset) without detach event
      // Force remove currently mounted with the same bus info (rhport, hub addr, hub port) if exists
      process_removed_device(dev0_bus->rhport, dev0_bus->hub_addr, dev0_bus->hub_port);
 8005a48:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8005a4c:	7818      	ldrb	r0, [r3, #0]
 8005a4e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8005a52:	7859      	ldrb	r1, [r3, #1]
 8005a54:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8005a58:	789b      	ldrb	r3, [r3, #2]
 8005a5a:	461a      	mov	r2, r3
 8005a5c:	f7ff fe1c 	bl	8005698 <process_removed_device>

      const tusb_desc_device_t *desc_device = (const tusb_desc_device_t *) _usbh_epbuf.ctrl;
 8005a60:	4b4a      	ldr	r3, [pc, #296]	@ (8005b8c <process_enumeration+0x2f4>)
 8005a62:	65bb      	str	r3, [r7, #88]	@ 0x58
      const uint8_t new_addr = enum_get_new_address(desc_device->bDeviceClass == TUSB_CLASS_HUB);
 8005a64:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8005a66:	791b      	ldrb	r3, [r3, #4]
 8005a68:	2b09      	cmp	r3, #9
 8005a6a:	bf0c      	ite	eq
 8005a6c:	2301      	moveq	r3, #1
 8005a6e:	2300      	movne	r3, #0
 8005a70:	b2db      	uxtb	r3, r3
 8005a72:	4618      	mov	r0, r3
 8005a74:	f000 fb84 	bl	8006180 <enum_get_new_address>
 8005a78:	4603      	mov	r3, r0
 8005a7a:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
      TU_ASSERT(new_addr != 0,);
 8005a7e:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8005a82:	2b00      	cmp	r3, #0
 8005a84:	d10a      	bne.n	8005a9c <process_enumeration+0x204>
 8005a86:	4b3f      	ldr	r3, [pc, #252]	@ (8005b84 <process_enumeration+0x2ec>)
 8005a88:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005a8a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005a8c:	681b      	ldr	r3, [r3, #0]
 8005a8e:	f003 0301 	and.w	r3, r3, #1
 8005a92:	2b00      	cmp	r3, #0
 8005a94:	f000 834a 	beq.w	800612c <process_enumeration+0x894>
 8005a98:	be00      	bkpt	0x0000
 8005a9a:	e347      	b.n	800612c <process_enumeration+0x894>
 8005a9c:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8005aa0:	f887 303a 	strb.w	r3, [r7, #58]	@ 0x3a
  TU_VERIFY(dev_addr > 0 && dev_addr <= TOTAL_DEVICES, NULL);
 8005aa4:	f897 303a 	ldrb.w	r3, [r7, #58]	@ 0x3a
 8005aa8:	2b00      	cmp	r3, #0
 8005aaa:	d003      	beq.n	8005ab4 <process_enumeration+0x21c>
 8005aac:	f897 303a 	ldrb.w	r3, [r7, #58]	@ 0x3a
 8005ab0:	2b01      	cmp	r3, #1
 8005ab2:	d901      	bls.n	8005ab8 <process_enumeration+0x220>
 8005ab4:	2300      	movs	r3, #0
 8005ab6:	e007      	b.n	8005ac8 <process_enumeration+0x230>
  return &_usbh_devices[dev_addr-1];
 8005ab8:	f897 303a 	ldrb.w	r3, [r7, #58]	@ 0x3a
 8005abc:	3b01      	subs	r3, #1
 8005abe:	225e      	movs	r2, #94	@ 0x5e
 8005ac0:	fb02 f303 	mul.w	r3, r2, r3
 8005ac4:	4a2d      	ldr	r2, [pc, #180]	@ (8005b7c <process_enumeration+0x2e4>)
 8005ac6:	4413      	add	r3, r2

      usbh_device_t* new_dev = get_device(new_addr);
 8005ac8:	653b      	str	r3, [r7, #80]	@ 0x50
      new_dev->bus_info = *dev0_bus;
 8005aca:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8005acc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8005ad0:	681b      	ldr	r3, [r3, #0]
 8005ad2:	6013      	str	r3, [r2, #0]
      new_dev->connected = 1;
 8005ad4:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8005ad6:	7d13      	ldrb	r3, [r2, #20]
 8005ad8:	f043 0301 	orr.w	r3, r3, #1
 8005adc:	7513      	strb	r3, [r2, #20]
      new_dev->bMaxPacketSize0 = desc_device->bMaxPacketSize0;
 8005ade:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8005ae0:	79da      	ldrb	r2, [r3, #7]
 8005ae2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005ae4:	725a      	strb	r2, [r3, #9]

      TU_ASSERT(tuh_address_set(0, new_addr, process_enumeration, ENUM_GET_DEVICE_DESC),);
 8005ae6:	f897 1057 	ldrb.w	r1, [r7, #87]	@ 0x57
 8005aea:	2307      	movs	r3, #7
 8005aec:	4a26      	ldr	r2, [pc, #152]	@ (8005b88 <process_enumeration+0x2f0>)
 8005aee:	2000      	movs	r0, #0
 8005af0:	f7ff fd3c 	bl	800556c <tuh_address_set>
 8005af4:	4603      	mov	r3, r0
 8005af6:	f083 0301 	eor.w	r3, r3, #1
 8005afa:	b2db      	uxtb	r3, r3
 8005afc:	2b00      	cmp	r3, #0
 8005afe:	f000 8317 	beq.w	8006130 <process_enumeration+0x898>
 8005b02:	4b20      	ldr	r3, [pc, #128]	@ (8005b84 <process_enumeration+0x2ec>)
 8005b04:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005b06:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005b08:	681b      	ldr	r3, [r3, #0]
 8005b0a:	f003 0301 	and.w	r3, r3, #1
 8005b0e:	2b00      	cmp	r3, #0
 8005b10:	f000 8310 	beq.w	8006134 <process_enumeration+0x89c>
 8005b14:	be00      	bkpt	0x0000
 8005b16:	e30d      	b.n	8006134 <process_enumeration+0x89c>
      break;
    }

    case ENUM_GET_DEVICE_DESC: {
      tusb_time_delay_ms_api(ENUM_SET_ADDRESS_RECOVERY_DELAY_MS); // set address recovery
 8005b18:	2002      	movs	r0, #2
 8005b1a:	f002 f89f 	bl	8007c5c <tusb_time_delay_ms_api>

      const uint8_t new_addr = (uint8_t) tu_le16toh(xfer->setup->wValue);
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	689b      	ldr	r3, [r3, #8]
 8005b22:	885b      	ldrh	r3, [r3, #2]
 8005b24:	b29b      	uxth	r3, r3
 8005b26:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
 8005b2a:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 8005b2e:	f887 3039 	strb.w	r3, [r7, #57]	@ 0x39
  TU_VERIFY(dev_addr > 0 && dev_addr <= TOTAL_DEVICES, NULL);
 8005b32:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 8005b36:	2b00      	cmp	r3, #0
 8005b38:	d003      	beq.n	8005b42 <process_enumeration+0x2aa>
 8005b3a:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 8005b3e:	2b01      	cmp	r3, #1
 8005b40:	d901      	bls.n	8005b46 <process_enumeration+0x2ae>
 8005b42:	2300      	movs	r3, #0
 8005b44:	e007      	b.n	8005b56 <process_enumeration+0x2be>
  return &_usbh_devices[dev_addr-1];
 8005b46:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 8005b4a:	3b01      	subs	r3, #1
 8005b4c:	225e      	movs	r2, #94	@ 0x5e
 8005b4e:	fb02 f303 	mul.w	r3, r2, r3
 8005b52:	4a0a      	ldr	r2, [pc, #40]	@ (8005b7c <process_enumeration+0x2e4>)
 8005b54:	4413      	add	r3, r2
      usbh_device_t* new_dev = get_device(new_addr);
 8005b56:	66bb      	str	r3, [r7, #104]	@ 0x68
      TU_ASSERT(new_dev,);
 8005b58:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8005b5a:	2b00      	cmp	r3, #0
 8005b5c:	d118      	bne.n	8005b90 <process_enumeration+0x2f8>
 8005b5e:	4b09      	ldr	r3, [pc, #36]	@ (8005b84 <process_enumeration+0x2ec>)
 8005b60:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005b62:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005b64:	681b      	ldr	r3, [r3, #0]
 8005b66:	f003 0301 	and.w	r3, r3, #1
 8005b6a:	2b00      	cmp	r3, #0
 8005b6c:	f000 82e4 	beq.w	8006138 <process_enumeration+0x8a0>
 8005b70:	be00      	bkpt	0x0000
 8005b72:	e2e1      	b.n	8006138 <process_enumeration+0x8a0>
 8005b74:	20000bbd 	.word	0x20000bbd
 8005b78:	20000020 	.word	0x20000020
 8005b7c:	2000098c 	.word	0x2000098c
 8005b80:	20000023 	.word	0x20000023
 8005b84:	e000edf0 	.word	0xe000edf0
 8005b88:	08005899 	.word	0x08005899
 8005b8c:	20000ab8 	.word	0x20000ab8
      new_dev->addressed = 1;
 8005b90:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8005b92:	7d13      	ldrb	r3, [r2, #20]
 8005b94:	f043 0302 	orr.w	r3, r3, #2
 8005b98:	7513      	strb	r3, [r2, #20]
      _usbh_data.enumerating_daddr = new_addr;
 8005b9a:	4aac      	ldr	r2, [pc, #688]	@ (8005e4c <process_enumeration+0x5b4>)
 8005b9c:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 8005ba0:	7053      	strb	r3, [r2, #1]

      usbh_device_close(dev0_bus->rhport, 0); // close dev0
 8005ba2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8005ba6:	781b      	ldrb	r3, [r3, #0]
 8005ba8:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38
 8005bac:	2300      	movs	r3, #0
 8005bae:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
  hcd_device_close(rhport, daddr);
 8005bb2:	f897 2037 	ldrb.w	r2, [r7, #55]	@ 0x37
 8005bb6:	f897 3038 	ldrb.w	r3, [r7, #56]	@ 0x38
 8005bba:	4611      	mov	r1, r2
 8005bbc:	4618      	mov	r0, r3
 8005bbe:	f001 f94b 	bl	8006e58 <hcd_device_close>
  if (daddr == _usbh_data.ctrl_xfer_info.daddr) {
 8005bc2:	4ba2      	ldr	r3, [pc, #648]	@ (8005e4c <process_enumeration+0x5b4>)
 8005bc4:	7d5b      	ldrb	r3, [r3, #21]
 8005bc6:	f897 2037 	ldrb.w	r2, [r7, #55]	@ 0x37
 8005bca:	429a      	cmp	r2, r3
 8005bcc:	d10e      	bne.n	8005bec <process_enumeration+0x354>
 8005bce:	2300      	movs	r3, #0
 8005bd0:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
  if (_usbh_data.ctrl_xfer_info.stage != stage) {
 8005bd4:	4b9d      	ldr	r3, [pc, #628]	@ (8005e4c <process_enumeration+0x5b4>)
 8005bd6:	7d1b      	ldrb	r3, [r3, #20]
 8005bd8:	b2db      	uxtb	r3, r3
 8005bda:	f897 2036 	ldrb.w	r2, [r7, #54]	@ 0x36
 8005bde:	429a      	cmp	r2, r3
 8005be0:	d003      	beq.n	8005bea <process_enumeration+0x352>
    _usbh_data.ctrl_xfer_info.stage = stage;
 8005be2:	4a9a      	ldr	r2, [pc, #616]	@ (8005e4c <process_enumeration+0x5b4>)
 8005be4:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 8005be8:	7513      	strb	r3, [r2, #20]
}
 8005bea:	bf00      	nop
  if (daddr == _usbh_data.enumerating_daddr) {
 8005bec:	4b97      	ldr	r3, [pc, #604]	@ (8005e4c <process_enumeration+0x5b4>)
 8005bee:	785b      	ldrb	r3, [r3, #1]
 8005bf0:	f897 2037 	ldrb.w	r2, [r7, #55]	@ 0x37
 8005bf4:	429a      	cmp	r2, r3
 8005bf6:	d102      	bne.n	8005bfe <process_enumeration+0x366>
    _usbh_data.enumerating_daddr = TUSB_INDEX_INVALID_8;
 8005bf8:	4b94      	ldr	r3, [pc, #592]	@ (8005e4c <process_enumeration+0x5b4>)
 8005bfa:	22ff      	movs	r2, #255	@ 0xff
 8005bfc:	705a      	strb	r2, [r3, #1]
}
 8005bfe:	bf00      	nop

      TU_ASSERT(usbh_edpt_control_open(new_addr, new_dev->bMaxPacketSize0),); // open new control endpoint
 8005c00:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8005c02:	7a5a      	ldrb	r2, [r3, #9]
 8005c04:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 8005c08:	4611      	mov	r1, r2
 8005c0a:	4618      	mov	r0, r3
 8005c0c:	f7ff facc 	bl	80051a8 <usbh_edpt_control_open>
 8005c10:	4603      	mov	r3, r0
 8005c12:	f083 0301 	eor.w	r3, r3, #1
 8005c16:	b2db      	uxtb	r3, r3
 8005c18:	2b00      	cmp	r3, #0
 8005c1a:	d00a      	beq.n	8005c32 <process_enumeration+0x39a>
 8005c1c:	4b8c      	ldr	r3, [pc, #560]	@ (8005e50 <process_enumeration+0x5b8>)
 8005c1e:	663b      	str	r3, [r7, #96]	@ 0x60
 8005c20:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8005c22:	681b      	ldr	r3, [r3, #0]
 8005c24:	f003 0301 	and.w	r3, r3, #1
 8005c28:	2b00      	cmp	r3, #0
 8005c2a:	f000 8287 	beq.w	800613c <process_enumeration+0x8a4>
 8005c2e:	be00      	bkpt	0x0000
 8005c30:	e284      	b.n	800613c <process_enumeration+0x8a4>

      TU_LOG_USBH("Get Device Descriptor\r\n");
      TU_ASSERT(tuh_descriptor_get_device(new_addr, _usbh_epbuf.ctrl, sizeof(tusb_desc_device_t),
 8005c32:	f897 006f 	ldrb.w	r0, [r7, #111]	@ 0x6f
 8005c36:	2308      	movs	r3, #8
 8005c38:	9300      	str	r3, [sp, #0]
 8005c3a:	4b86      	ldr	r3, [pc, #536]	@ (8005e54 <process_enumeration+0x5bc>)
 8005c3c:	2212      	movs	r2, #18
 8005c3e:	4986      	ldr	r1, [pc, #536]	@ (8005e58 <process_enumeration+0x5c0>)
 8005c40:	f7ff fb9e 	bl	8005380 <tuh_descriptor_get_device>
 8005c44:	4603      	mov	r3, r0
 8005c46:	f083 0301 	eor.w	r3, r3, #1
 8005c4a:	b2db      	uxtb	r3, r3
 8005c4c:	2b00      	cmp	r3, #0
 8005c4e:	f000 8277 	beq.w	8006140 <process_enumeration+0x8a8>
 8005c52:	4b7f      	ldr	r3, [pc, #508]	@ (8005e50 <process_enumeration+0x5b8>)
 8005c54:	667b      	str	r3, [r7, #100]	@ 0x64
 8005c56:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	f003 0301 	and.w	r3, r3, #1
 8005c5e:	2b00      	cmp	r3, #0
 8005c60:	f000 8270 	beq.w	8006144 <process_enumeration+0x8ac>
 8005c64:	be00      	bkpt	0x0000
 8005c66:	e26d      	b.n	8006144 <process_enumeration+0x8ac>

    // For string descriptor (langid, manufacturer, product, serila): always get the first 2 bytes
    // to determine the length first. otherwise, some device may have buffer overflow.
    case ENUM_GET_STRING_LANGUAGE_ID_LEN: {
      // save the received device descriptor
      tusb_desc_device_t const *desc_device = (tusb_desc_device_t const *) _usbh_epbuf.ctrl;
 8005c68:	4b7b      	ldr	r3, [pc, #492]	@ (8005e58 <process_enumeration+0x5c0>)
 8005c6a:	673b      	str	r3, [r7, #112]	@ 0x70
      dev->bcdUSB = desc_device->bcdUSB;
 8005c6c:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8005c6e:	885b      	ldrh	r3, [r3, #2]
 8005c70:	b29a      	uxth	r2, r3
 8005c72:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8005c76:	809a      	strh	r2, [r3, #4]
      dev->bDeviceClass = desc_device->bDeviceClass;
 8005c78:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8005c7a:	791a      	ldrb	r2, [r3, #4]
 8005c7c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8005c80:	719a      	strb	r2, [r3, #6]
      dev->bDeviceSubClass = desc_device->bDeviceSubClass;
 8005c82:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8005c84:	795a      	ldrb	r2, [r3, #5]
 8005c86:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8005c8a:	71da      	strb	r2, [r3, #7]
      dev->bDeviceProtocol = desc_device->bDeviceProtocol;
 8005c8c:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8005c8e:	799a      	ldrb	r2, [r3, #6]
 8005c90:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8005c94:	721a      	strb	r2, [r3, #8]
      dev->bMaxPacketSize0 = desc_device->bMaxPacketSize0;
 8005c96:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8005c98:	79da      	ldrb	r2, [r3, #7]
 8005c9a:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8005c9e:	725a      	strb	r2, [r3, #9]
      dev->idVendor = desc_device->idVendor;
 8005ca0:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8005ca2:	891b      	ldrh	r3, [r3, #8]
 8005ca4:	b29a      	uxth	r2, r3
 8005ca6:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8005caa:	815a      	strh	r2, [r3, #10]
      dev->idProduct = desc_device->idProduct;
 8005cac:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8005cae:	895b      	ldrh	r3, [r3, #10]
 8005cb0:	b29a      	uxth	r2, r3
 8005cb2:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8005cb6:	819a      	strh	r2, [r3, #12]
      dev->bcdDevice = desc_device->bcdDevice;
 8005cb8:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8005cba:	899b      	ldrh	r3, [r3, #12]
 8005cbc:	b29a      	uxth	r2, r3
 8005cbe:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8005cc2:	81da      	strh	r2, [r3, #14]
      dev->iManufacturer = desc_device->iManufacturer;
 8005cc4:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8005cc6:	7b9a      	ldrb	r2, [r3, #14]
 8005cc8:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8005ccc:	741a      	strb	r2, [r3, #16]
      dev->iProduct = desc_device->iProduct;
 8005cce:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8005cd0:	7bda      	ldrb	r2, [r3, #15]
 8005cd2:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8005cd6:	745a      	strb	r2, [r3, #17]
      dev->iSerialNumber = desc_device->iSerialNumber;
 8005cd8:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8005cda:	7c1a      	ldrb	r2, [r3, #16]
 8005cdc:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8005ce0:	749a      	strb	r2, [r3, #18]
      dev->bNumConfigurations = desc_device->bNumConfigurations;
 8005ce2:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8005ce4:	7c5a      	ldrb	r2, [r3, #17]
 8005ce6:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8005cea:	74da      	strb	r2, [r3, #19]

      tuh_enum_descriptor_device_cb(daddr, desc_device); // callback
 8005cec:	f897 30bb 	ldrb.w	r3, [r7, #187]	@ 0xbb
 8005cf0:	6f39      	ldr	r1, [r7, #112]	@ 0x70
 8005cf2:	4618      	mov	r0, r3
 8005cf4:	f7fe fa35 	bl	8004162 <tuh_enum_descriptor_device_cb>
 8005cf8:	f897 30bb 	ldrb.w	r3, [r7, #187]	@ 0xbb
 8005cfc:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
 8005d00:	4b55      	ldr	r3, [pc, #340]	@ (8005e58 <process_enumeration+0x5c0>)
 8005d02:	633b      	str	r3, [r7, #48]	@ 0x30
 8005d04:	2302      	movs	r3, #2
 8005d06:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 8005d08:	4b52      	ldr	r3, [pc, #328]	@ (8005e54 <process_enumeration+0x5bc>)
 8005d0a:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005d0c:	2309      	movs	r3, #9
 8005d0e:	627b      	str	r3, [r7, #36]	@ 0x24

// Get language id string descriptor (control transfer)
TU_ATTR_ALWAYS_INLINE static inline
bool tuh_descriptor_get_string_langid(uint8_t daddr, void* buffer, uint16_t len,
                               tuh_xfer_cb_t complete_cb, uintptr_t user_data) {
  return tuh_descriptor_get_string(daddr, 0, 0, buffer, len, complete_cb, user_data);
 8005d10:	f897 0035 	ldrb.w	r0, [r7, #53]	@ 0x35
 8005d14:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d16:	9302      	str	r3, [sp, #8]
 8005d18:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005d1a:	9301      	str	r3, [sp, #4]
 8005d1c:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8005d1e:	9300      	str	r3, [sp, #0]
 8005d20:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005d22:	2200      	movs	r2, #0
 8005d24:	2100      	movs	r1, #0
 8005d26:	f7ff fb6c 	bl	8005402 <tuh_descriptor_get_string>
      tuh_descriptor_get_string_langid(daddr, _usbh_epbuf.ctrl, 2,
                                       process_enumeration, ENUM_GET_STRING_LANGUAGE_ID);
      break;
 8005d2a:	e226      	b.n	800617a <process_enumeration+0x8e2>
    }

    case ENUM_GET_STRING_LANGUAGE_ID: {
      const uint8_t str_len = xfer->buffer[0];
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	68db      	ldr	r3, [r3, #12]
 8005d30:	781b      	ldrb	r3, [r3, #0]
 8005d32:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
      tuh_descriptor_get_string_langid(daddr, _usbh_epbuf.ctrl, str_len,
 8005d36:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 8005d3a:	b29a      	uxth	r2, r3
 8005d3c:	f897 30bb 	ldrb.w	r3, [r7, #187]	@ 0xbb
 8005d40:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005d44:	4b44      	ldr	r3, [pc, #272]	@ (8005e58 <process_enumeration+0x5c0>)
 8005d46:	61fb      	str	r3, [r7, #28]
 8005d48:	4613      	mov	r3, r2
 8005d4a:	837b      	strh	r3, [r7, #26]
 8005d4c:	4b41      	ldr	r3, [pc, #260]	@ (8005e54 <process_enumeration+0x5bc>)
 8005d4e:	617b      	str	r3, [r7, #20]
 8005d50:	230a      	movs	r3, #10
 8005d52:	613b      	str	r3, [r7, #16]
 8005d54:	f897 0023 	ldrb.w	r0, [r7, #35]	@ 0x23
 8005d58:	693b      	ldr	r3, [r7, #16]
 8005d5a:	9302      	str	r3, [sp, #8]
 8005d5c:	697b      	ldr	r3, [r7, #20]
 8005d5e:	9301      	str	r3, [sp, #4]
 8005d60:	8b7b      	ldrh	r3, [r7, #26]
 8005d62:	9300      	str	r3, [sp, #0]
 8005d64:	69fb      	ldr	r3, [r7, #28]
 8005d66:	2200      	movs	r2, #0
 8005d68:	2100      	movs	r1, #0
 8005d6a:	f7ff fb4a 	bl	8005402 <tuh_descriptor_get_string>
                                       process_enumeration, ENUM_GET_STRING_MANUFACTURER_LEN);
      break;
 8005d6e:	e204      	b.n	800617a <process_enumeration+0x8e2>
    }

    case ENUM_GET_STRING_MANUFACTURER_LEN: {
      const tusb_desc_string_t* desc_langid = (const tusb_desc_string_t *) _usbh_epbuf.ctrl;
 8005d70:	4b39      	ldr	r3, [pc, #228]	@ (8005e58 <process_enumeration+0x5c0>)
 8005d72:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
      if (desc_langid->bLength >= 4) {
 8005d76:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8005d7a:	781b      	ldrb	r3, [r3, #0]
 8005d7c:	2b03      	cmp	r3, #3
 8005d7e:	d907      	bls.n	8005d90 <process_enumeration+0x4f8>
        langid = tu_le16toh(desc_langid->utf16le[0]); // previous request is langid
 8005d80:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8005d84:	789a      	ldrb	r2, [r3, #2]
 8005d86:	78db      	ldrb	r3, [r3, #3]
 8005d88:	021b      	lsls	r3, r3, #8
 8005d8a:	4313      	orrs	r3, r2
 8005d8c:	f8a7 30bc 	strh.w	r3, [r7, #188]	@ 0xbc
      }
      if (dev->iManufacturer != 0) {
 8005d90:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8005d94:	7c1b      	ldrb	r3, [r3, #16]
 8005d96:	2b00      	cmp	r3, #0
 8005d98:	d010      	beq.n	8005dbc <process_enumeration+0x524>
        tuh_descriptor_get_string(daddr, dev->iManufacturer, langid, _usbh_epbuf.ctrl, 2,
 8005d9a:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8005d9e:	7c19      	ldrb	r1, [r3, #16]
 8005da0:	f8b7 20bc 	ldrh.w	r2, [r7, #188]	@ 0xbc
 8005da4:	f897 00bb 	ldrb.w	r0, [r7, #187]	@ 0xbb
 8005da8:	230b      	movs	r3, #11
 8005daa:	9302      	str	r3, [sp, #8]
 8005dac:	4b29      	ldr	r3, [pc, #164]	@ (8005e54 <process_enumeration+0x5bc>)
 8005dae:	9301      	str	r3, [sp, #4]
 8005db0:	2302      	movs	r3, #2
 8005db2:	9300      	str	r3, [sp, #0]
 8005db4:	4b28      	ldr	r3, [pc, #160]	@ (8005e58 <process_enumeration+0x5c0>)
 8005db6:	f7ff fb24 	bl	8005402 <tuh_descriptor_get_string>
                                  process_enumeration, ENUM_GET_STRING_MANUFACTURER);
        break;
 8005dba:	e1de      	b.n	800617a <process_enumeration+0x8e2>
        TU_ATTR_FALLTHROUGH;
      }
    }

    case ENUM_GET_STRING_MANUFACTURER: {
      if (dev->iManufacturer != 0)  {
 8005dbc:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8005dc0:	7c1b      	ldrb	r3, [r3, #16]
 8005dc2:	2b00      	cmp	r3, #0
 8005dc4:	d01f      	beq.n	8005e06 <process_enumeration+0x56e>
        langid = tu_le16toh(xfer->setup->wIndex); // langid from length's request
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	689b      	ldr	r3, [r3, #8]
 8005dca:	791a      	ldrb	r2, [r3, #4]
 8005dcc:	795b      	ldrb	r3, [r3, #5]
 8005dce:	021b      	lsls	r3, r3, #8
 8005dd0:	4313      	orrs	r3, r2
 8005dd2:	f8a7 30bc 	strh.w	r3, [r7, #188]	@ 0xbc
        const uint8_t str_len = xfer->buffer[0];
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	68db      	ldr	r3, [r3, #12]
 8005dda:	781b      	ldrb	r3, [r3, #0]
 8005ddc:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
        tuh_descriptor_get_string(daddr, dev->iManufacturer, langid, _usbh_epbuf.ctrl, str_len,
 8005de0:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8005de4:	7c19      	ldrb	r1, [r3, #16]
 8005de6:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 8005dea:	b29b      	uxth	r3, r3
 8005dec:	f8b7 20bc 	ldrh.w	r2, [r7, #188]	@ 0xbc
 8005df0:	f897 00bb 	ldrb.w	r0, [r7, #187]	@ 0xbb
 8005df4:	240c      	movs	r4, #12
 8005df6:	9402      	str	r4, [sp, #8]
 8005df8:	4c16      	ldr	r4, [pc, #88]	@ (8005e54 <process_enumeration+0x5bc>)
 8005dfa:	9401      	str	r4, [sp, #4]
 8005dfc:	9300      	str	r3, [sp, #0]
 8005dfe:	4b16      	ldr	r3, [pc, #88]	@ (8005e58 <process_enumeration+0x5c0>)
 8005e00:	f7ff faff 	bl	8005402 <tuh_descriptor_get_string>
                                  process_enumeration, ENUM_GET_STRING_PRODUCT_LEN);
        break;
 8005e04:	e1b9      	b.n	800617a <process_enumeration+0x8e2>
        TU_ATTR_FALLTHROUGH;
      }
    }

    case ENUM_GET_STRING_PRODUCT_LEN:
      if (dev->iProduct != 0) {
 8005e06:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8005e0a:	7c5b      	ldrb	r3, [r3, #17]
 8005e0c:	2b00      	cmp	r3, #0
 8005e0e:	d025      	beq.n	8005e5c <process_enumeration+0x5c4>
        if (state == ENUM_GET_STRING_PRODUCT_LEN) {
 8005e10:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8005e14:	2b0c      	cmp	r3, #12
 8005e16:	d107      	bne.n	8005e28 <process_enumeration+0x590>
          langid = tu_le16toh(xfer->setup->wIndex); // get langid from previous setup packet if not fall through
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	689b      	ldr	r3, [r3, #8]
 8005e1c:	791a      	ldrb	r2, [r3, #4]
 8005e1e:	795b      	ldrb	r3, [r3, #5]
 8005e20:	021b      	lsls	r3, r3, #8
 8005e22:	4313      	orrs	r3, r2
 8005e24:	f8a7 30bc 	strh.w	r3, [r7, #188]	@ 0xbc
        }
        tuh_descriptor_get_string(daddr, dev->iProduct, langid, _usbh_epbuf.ctrl, 2,
 8005e28:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8005e2c:	7c59      	ldrb	r1, [r3, #17]
 8005e2e:	f8b7 20bc 	ldrh.w	r2, [r7, #188]	@ 0xbc
 8005e32:	f897 00bb 	ldrb.w	r0, [r7, #187]	@ 0xbb
 8005e36:	230d      	movs	r3, #13
 8005e38:	9302      	str	r3, [sp, #8]
 8005e3a:	4b06      	ldr	r3, [pc, #24]	@ (8005e54 <process_enumeration+0x5bc>)
 8005e3c:	9301      	str	r3, [sp, #4]
 8005e3e:	2302      	movs	r3, #2
 8005e40:	9300      	str	r3, [sp, #0]
 8005e42:	4b05      	ldr	r3, [pc, #20]	@ (8005e58 <process_enumeration+0x5c0>)
 8005e44:	f7ff fadd 	bl	8005402 <tuh_descriptor_get_string>
                                  process_enumeration, ENUM_GET_STRING_PRODUCT);
        break;
 8005e48:	e197      	b.n	800617a <process_enumeration+0x8e2>
 8005e4a:	bf00      	nop
 8005e4c:	20000020 	.word	0x20000020
 8005e50:	e000edf0 	.word	0xe000edf0
 8005e54:	08005899 	.word	0x08005899
 8005e58:	20000ab8 	.word	0x20000ab8
      } else {
        TU_ATTR_FALLTHROUGH;
      }

    case ENUM_GET_STRING_PRODUCT: {
      if (dev->iProduct != 0) {
 8005e5c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8005e60:	7c5b      	ldrb	r3, [r3, #17]
 8005e62:	2b00      	cmp	r3, #0
 8005e64:	d01f      	beq.n	8005ea6 <process_enumeration+0x60e>
        langid = tu_le16toh(xfer->setup->wIndex); // langid from length's request
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	689b      	ldr	r3, [r3, #8]
 8005e6a:	791a      	ldrb	r2, [r3, #4]
 8005e6c:	795b      	ldrb	r3, [r3, #5]
 8005e6e:	021b      	lsls	r3, r3, #8
 8005e70:	4313      	orrs	r3, r2
 8005e72:	f8a7 30bc 	strh.w	r3, [r7, #188]	@ 0xbc
        const uint8_t str_len = xfer->buffer[0];
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	68db      	ldr	r3, [r3, #12]
 8005e7a:	781b      	ldrb	r3, [r3, #0]
 8005e7c:	f887 307e 	strb.w	r3, [r7, #126]	@ 0x7e
        tuh_descriptor_get_string(daddr, dev->iProduct, langid, _usbh_epbuf.ctrl, str_len,
 8005e80:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8005e84:	7c59      	ldrb	r1, [r3, #17]
 8005e86:	f897 307e 	ldrb.w	r3, [r7, #126]	@ 0x7e
 8005e8a:	b29b      	uxth	r3, r3
 8005e8c:	f8b7 20bc 	ldrh.w	r2, [r7, #188]	@ 0xbc
 8005e90:	f897 00bb 	ldrb.w	r0, [r7, #187]	@ 0xbb
 8005e94:	240e      	movs	r4, #14
 8005e96:	9402      	str	r4, [sp, #8]
 8005e98:	4caf      	ldr	r4, [pc, #700]	@ (8006158 <process_enumeration+0x8c0>)
 8005e9a:	9401      	str	r4, [sp, #4]
 8005e9c:	9300      	str	r3, [sp, #0]
 8005e9e:	4baf      	ldr	r3, [pc, #700]	@ (800615c <process_enumeration+0x8c4>)
 8005ea0:	f7ff faaf 	bl	8005402 <tuh_descriptor_get_string>
                            process_enumeration, ENUM_GET_STRING_SERIAL_LEN);
        break;
 8005ea4:	e169      	b.n	800617a <process_enumeration+0x8e2>
        TU_ATTR_FALLTHROUGH;
      }
    }

    case ENUM_GET_STRING_SERIAL_LEN:
      if (dev->iSerialNumber != 0) {
 8005ea6:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8005eaa:	7c9b      	ldrb	r3, [r3, #18]
 8005eac:	2b00      	cmp	r3, #0
 8005eae:	d01c      	beq.n	8005eea <process_enumeration+0x652>
        if (state == ENUM_GET_STRING_SERIAL_LEN) {
 8005eb0:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8005eb4:	2b0e      	cmp	r3, #14
 8005eb6:	d107      	bne.n	8005ec8 <process_enumeration+0x630>
          langid = tu_le16toh(xfer->setup->wIndex); // get langid from previous setup packet if not fall through
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	689b      	ldr	r3, [r3, #8]
 8005ebc:	791a      	ldrb	r2, [r3, #4]
 8005ebe:	795b      	ldrb	r3, [r3, #5]
 8005ec0:	021b      	lsls	r3, r3, #8
 8005ec2:	4313      	orrs	r3, r2
 8005ec4:	f8a7 30bc 	strh.w	r3, [r7, #188]	@ 0xbc
        }
        tuh_descriptor_get_string(daddr, dev->iSerialNumber, langid, _usbh_epbuf.ctrl, 2,
 8005ec8:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8005ecc:	7c99      	ldrb	r1, [r3, #18]
 8005ece:	f8b7 20bc 	ldrh.w	r2, [r7, #188]	@ 0xbc
 8005ed2:	f897 00bb 	ldrb.w	r0, [r7, #187]	@ 0xbb
 8005ed6:	230f      	movs	r3, #15
 8005ed8:	9302      	str	r3, [sp, #8]
 8005eda:	4b9f      	ldr	r3, [pc, #636]	@ (8006158 <process_enumeration+0x8c0>)
 8005edc:	9301      	str	r3, [sp, #4]
 8005ede:	2302      	movs	r3, #2
 8005ee0:	9300      	str	r3, [sp, #0]
 8005ee2:	4b9e      	ldr	r3, [pc, #632]	@ (800615c <process_enumeration+0x8c4>)
 8005ee4:	f7ff fa8d 	bl	8005402 <tuh_descriptor_get_string>
                                  process_enumeration, ENUM_GET_STRING_SERIAL);
        break;
 8005ee8:	e147      	b.n	800617a <process_enumeration+0x8e2>
      } else {
        TU_ATTR_FALLTHROUGH;
      }

    case ENUM_GET_STRING_SERIAL: {
      if (dev->iSerialNumber != 0) {
 8005eea:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8005eee:	7c9b      	ldrb	r3, [r3, #18]
 8005ef0:	2b00      	cmp	r3, #0
 8005ef2:	d01f      	beq.n	8005f34 <process_enumeration+0x69c>
        langid = tu_le16toh(xfer->setup->wIndex); // langid from length's request
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	689b      	ldr	r3, [r3, #8]
 8005ef8:	791a      	ldrb	r2, [r3, #4]
 8005efa:	795b      	ldrb	r3, [r3, #5]
 8005efc:	021b      	lsls	r3, r3, #8
 8005efe:	4313      	orrs	r3, r2
 8005f00:	f8a7 30bc 	strh.w	r3, [r7, #188]	@ 0xbc
        const uint8_t str_len = xfer->buffer[0];
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	68db      	ldr	r3, [r3, #12]
 8005f08:	781b      	ldrb	r3, [r3, #0]
 8005f0a:	f887 307d 	strb.w	r3, [r7, #125]	@ 0x7d
        tuh_descriptor_get_string(daddr, dev->iSerialNumber, langid, _usbh_epbuf.ctrl, str_len,
 8005f0e:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8005f12:	7c99      	ldrb	r1, [r3, #18]
 8005f14:	f897 307d 	ldrb.w	r3, [r7, #125]	@ 0x7d
 8005f18:	b29b      	uxth	r3, r3
 8005f1a:	f8b7 20bc 	ldrh.w	r2, [r7, #188]	@ 0xbc
 8005f1e:	f897 00bb 	ldrb.w	r0, [r7, #187]	@ 0xbb
 8005f22:	2410      	movs	r4, #16
 8005f24:	9402      	str	r4, [sp, #8]
 8005f26:	4c8c      	ldr	r4, [pc, #560]	@ (8006158 <process_enumeration+0x8c0>)
 8005f28:	9401      	str	r4, [sp, #4]
 8005f2a:	9300      	str	r3, [sp, #0]
 8005f2c:	4b8b      	ldr	r3, [pc, #556]	@ (800615c <process_enumeration+0x8c4>)
 8005f2e:	f7ff fa68 	bl	8005402 <tuh_descriptor_get_string>
                                  process_enumeration, ENUM_GET_9BYTE_CONFIG_DESC);
        break;
 8005f32:	e122      	b.n	800617a <process_enumeration+0x8e2>
      }
    }

    case ENUM_GET_9BYTE_CONFIG_DESC: {
      // Get 9-byte for total length
      uint8_t const config_idx = 0;
 8005f34:	2300      	movs	r3, #0
 8005f36:	f887 307c 	strb.w	r3, [r7, #124]	@ 0x7c
      TU_LOG_USBH("Get Configuration[%u] Descriptor (9 bytes)\r\n", config_idx);
      TU_ASSERT(tuh_descriptor_get_configuration(daddr, config_idx, _usbh_epbuf.ctrl, 9,
 8005f3a:	f897 107c 	ldrb.w	r1, [r7, #124]	@ 0x7c
 8005f3e:	f897 00bb 	ldrb.w	r0, [r7, #187]	@ 0xbb
 8005f42:	2311      	movs	r3, #17
 8005f44:	9301      	str	r3, [sp, #4]
 8005f46:	4b84      	ldr	r3, [pc, #528]	@ (8006158 <process_enumeration+0x8c0>)
 8005f48:	9300      	str	r3, [sp, #0]
 8005f4a:	2309      	movs	r3, #9
 8005f4c:	4a83      	ldr	r2, [pc, #524]	@ (800615c <process_enumeration+0x8c4>)
 8005f4e:	f7ff fa3c 	bl	80053ca <tuh_descriptor_get_configuration>
 8005f52:	4603      	mov	r3, r0
 8005f54:	f083 0301 	eor.w	r3, r3, #1
 8005f58:	b2db      	uxtb	r3, r3
 8005f5a:	2b00      	cmp	r3, #0
 8005f5c:	f000 80f4 	beq.w	8006148 <process_enumeration+0x8b0>
 8005f60:	4b7f      	ldr	r3, [pc, #508]	@ (8006160 <process_enumeration+0x8c8>)
 8005f62:	67bb      	str	r3, [r7, #120]	@ 0x78
 8005f64:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005f66:	681b      	ldr	r3, [r3, #0]
 8005f68:	f003 0301 	and.w	r3, r3, #1
 8005f6c:	2b00      	cmp	r3, #0
 8005f6e:	f000 80ed 	beq.w	800614c <process_enumeration+0x8b4>
 8005f72:	be00      	bkpt	0x0000
 8005f74:	e0ea      	b.n	800614c <process_enumeration+0x8b4>
                                                 process_enumeration, ENUM_GET_FULL_CONFIG_DESC),);
      break;
    }

    case ENUM_GET_FULL_CONFIG_DESC: {
      uint8_t const* desc_config = _usbh_epbuf.ctrl;
 8005f76:	4b79      	ldr	r3, [pc, #484]	@ (800615c <process_enumeration+0x8c4>)
 8005f78:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90

      // Use offsetof to avoid pointer to the odd/misaligned address
      uint16_t const total_len = tu_le16toh(tu_unaligned_read16(desc_config + offsetof(tusb_desc_configuration_t, wTotalLength)));
 8005f7c:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8005f80:	3302      	adds	r3, #2
 8005f82:	60fb      	str	r3, [r7, #12]
  return *((uint16_t const *) mem);
 8005f84:	68fb      	ldr	r3, [r7, #12]
 8005f86:	881b      	ldrh	r3, [r3, #0]
 8005f88:	f8a7 308e 	strh.w	r3, [r7, #142]	@ 0x8e

      // TODO not enough buffer to hold configuration descriptor
      TU_ASSERT(total_len <= CFG_TUH_ENUMERATION_BUFSIZE,);
 8005f8c:	f8b7 308e 	ldrh.w	r3, [r7, #142]	@ 0x8e
 8005f90:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005f94:	d90c      	bls.n	8005fb0 <process_enumeration+0x718>
 8005f96:	4b72      	ldr	r3, [pc, #456]	@ (8006160 <process_enumeration+0x8c8>)
 8005f98:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8005f9c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8005fa0:	681b      	ldr	r3, [r3, #0]
 8005fa2:	f003 0301 	and.w	r3, r3, #1
 8005fa6:	2b00      	cmp	r3, #0
 8005fa8:	f000 80d2 	beq.w	8006150 <process_enumeration+0x8b8>
 8005fac:	be00      	bkpt	0x0000
 8005fae:	e0cf      	b.n	8006150 <process_enumeration+0x8b8>

      // Get full configuration descriptor
      uint8_t const config_idx = (uint8_t) tu_le16toh(xfer->setup->wIndex);
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	689b      	ldr	r3, [r3, #8]
 8005fb4:	889b      	ldrh	r3, [r3, #4]
 8005fb6:	b29b      	uxth	r3, r3
 8005fb8:	f887 308d 	strb.w	r3, [r7, #141]	@ 0x8d
      TU_LOG_USBH("Get Configuration[%u] Descriptor\r\n", config_idx);
      TU_ASSERT(tuh_descriptor_get_configuration(daddr, config_idx, _usbh_epbuf.ctrl, total_len,
 8005fbc:	f8b7 308e 	ldrh.w	r3, [r7, #142]	@ 0x8e
 8005fc0:	f897 108d 	ldrb.w	r1, [r7, #141]	@ 0x8d
 8005fc4:	f897 00bb 	ldrb.w	r0, [r7, #187]	@ 0xbb
 8005fc8:	2212      	movs	r2, #18
 8005fca:	9201      	str	r2, [sp, #4]
 8005fcc:	4a62      	ldr	r2, [pc, #392]	@ (8006158 <process_enumeration+0x8c0>)
 8005fce:	9200      	str	r2, [sp, #0]
 8005fd0:	4a62      	ldr	r2, [pc, #392]	@ (800615c <process_enumeration+0x8c4>)
 8005fd2:	f7ff f9fa 	bl	80053ca <tuh_descriptor_get_configuration>
 8005fd6:	4603      	mov	r3, r0
 8005fd8:	f083 0301 	eor.w	r3, r3, #1
 8005fdc:	b2db      	uxtb	r3, r3
 8005fde:	2b00      	cmp	r3, #0
 8005fe0:	f000 80b8 	beq.w	8006154 <process_enumeration+0x8bc>
 8005fe4:	4b5e      	ldr	r3, [pc, #376]	@ (8006160 <process_enumeration+0x8c8>)
 8005fe6:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8005fea:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8005fee:	681b      	ldr	r3, [r3, #0]
 8005ff0:	f003 0301 	and.w	r3, r3, #1
 8005ff4:	2b00      	cmp	r3, #0
 8005ff6:	f000 80b5 	beq.w	8006164 <process_enumeration+0x8cc>
 8005ffa:	be00      	bkpt	0x0000
 8005ffc:	e0b2      	b.n	8006164 <process_enumeration+0x8cc>
                                                 process_enumeration, ENUM_SET_CONFIG),);
      break;
    }

    case ENUM_SET_CONFIG: {
      uint8_t config_idx = (uint8_t) tu_le16toh(xfer->setup->wIndex);
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	689b      	ldr	r3, [r3, #8]
 8006002:	889b      	ldrh	r3, [r3, #4]
 8006004:	b29b      	uxth	r3, r3
 8006006:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
      if (tuh_enum_descriptor_configuration_cb(daddr, config_idx, (const tusb_desc_configuration_t*) _usbh_epbuf.ctrl)) {
 800600a:	f897 10a3 	ldrb.w	r1, [r7, #163]	@ 0xa3
 800600e:	f897 30bb 	ldrb.w	r3, [r7, #187]	@ 0xbb
 8006012:	4a52      	ldr	r2, [pc, #328]	@ (800615c <process_enumeration+0x8c4>)
 8006014:	4618      	mov	r0, r3
 8006016:	f7fe f8b0 	bl	800417a <tuh_enum_descriptor_configuration_cb>
 800601a:	4603      	mov	r3, r0
 800601c:	2b00      	cmp	r3, #0
 800601e:	d01d      	beq.n	800605c <process_enumeration+0x7c4>
        TU_ASSERT(tuh_configuration_set(daddr, config_idx+1, process_enumeration, ENUM_CONFIG_DRIVER),);
 8006020:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8006024:	3301      	adds	r3, #1
 8006026:	b2d9      	uxtb	r1, r3
 8006028:	f897 00bb 	ldrb.w	r0, [r7, #187]	@ 0xbb
 800602c:	2313      	movs	r3, #19
 800602e:	4a4a      	ldr	r2, [pc, #296]	@ (8006158 <process_enumeration+0x8c0>)
 8006030:	f7ff faf0 	bl	8005614 <tuh_configuration_set>
 8006034:	4603      	mov	r3, r0
 8006036:	f083 0301 	eor.w	r3, r3, #1
 800603a:	b2db      	uxtb	r3, r3
 800603c:	2b00      	cmp	r3, #0
 800603e:	f000 8093 	beq.w	8006168 <process_enumeration+0x8d0>
 8006042:	4b47      	ldr	r3, [pc, #284]	@ (8006160 <process_enumeration+0x8c8>)
 8006044:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8006048:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800604c:	681b      	ldr	r3, [r3, #0]
 800604e:	f003 0301 	and.w	r3, r3, #1
 8006052:	2b00      	cmp	r3, #0
 8006054:	f000 808a 	beq.w	800616c <process_enumeration+0x8d4>
 8006058:	be00      	bkpt	0x0000
 800605a:	e087      	b.n	800616c <process_enumeration+0x8d4>
      } else {
        config_idx++;
 800605c:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8006060:	3301      	adds	r3, #1
 8006062:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        TU_ASSERT(config_idx < dev->bNumConfigurations,);
 8006066:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800606a:	7cdb      	ldrb	r3, [r3, #19]
 800606c:	f897 20a3 	ldrb.w	r2, [r7, #163]	@ 0xa3
 8006070:	429a      	cmp	r2, r3
 8006072:	d30b      	bcc.n	800608c <process_enumeration+0x7f4>
 8006074:	4b3a      	ldr	r3, [pc, #232]	@ (8006160 <process_enumeration+0x8c8>)
 8006076:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800607a:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800607e:	681b      	ldr	r3, [r3, #0]
 8006080:	f003 0301 	and.w	r3, r3, #1
 8006084:	2b00      	cmp	r3, #0
 8006086:	d073      	beq.n	8006170 <process_enumeration+0x8d8>
 8006088:	be00      	bkpt	0x0000
 800608a:	e071      	b.n	8006170 <process_enumeration+0x8d8>
        TU_LOG_USBH("Get Configuration[%u] Descriptor (9 bytes)\r\n", config_idx);
        TU_ASSERT(tuh_descriptor_get_configuration(daddr, config_idx, _usbh_epbuf.ctrl, 9,
 800608c:	f897 10a3 	ldrb.w	r1, [r7, #163]	@ 0xa3
 8006090:	f897 00bb 	ldrb.w	r0, [r7, #187]	@ 0xbb
 8006094:	2311      	movs	r3, #17
 8006096:	9301      	str	r3, [sp, #4]
 8006098:	4b2f      	ldr	r3, [pc, #188]	@ (8006158 <process_enumeration+0x8c0>)
 800609a:	9300      	str	r3, [sp, #0]
 800609c:	2309      	movs	r3, #9
 800609e:	4a2f      	ldr	r2, [pc, #188]	@ (800615c <process_enumeration+0x8c4>)
 80060a0:	f7ff f993 	bl	80053ca <tuh_descriptor_get_configuration>
 80060a4:	4603      	mov	r3, r0
 80060a6:	f083 0301 	eor.w	r3, r3, #1
 80060aa:	b2db      	uxtb	r3, r3
 80060ac:	2b00      	cmp	r3, #0
 80060ae:	d05b      	beq.n	8006168 <process_enumeration+0x8d0>
 80060b0:	4b2b      	ldr	r3, [pc, #172]	@ (8006160 <process_enumeration+0x8c8>)
 80060b2:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80060b6:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80060ba:	681b      	ldr	r3, [r3, #0]
 80060bc:	f003 0301 	and.w	r3, r3, #1
 80060c0:	2b00      	cmp	r3, #0
 80060c2:	d057      	beq.n	8006174 <process_enumeration+0x8dc>
 80060c4:	be00      	bkpt	0x0000
 80060c6:	e055      	b.n	8006174 <process_enumeration+0x8dc>
      break;
    }

    case ENUM_CONFIG_DRIVER: {
      TU_LOG_USBH("Device configured\r\n");
      dev->configured = 1;
 80060c8:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 80060cc:	7d13      	ldrb	r3, [r2, #20]
 80060ce:	f043 0304 	orr.w	r3, r3, #4
 80060d2:	7513      	strb	r3, [r2, #20]

      // Parse configuration & set up drivers
      // driver_open() must not make any usb transfer
      TU_ASSERT(enum_parse_configuration_desc(daddr, (tusb_desc_configuration_t*) _usbh_epbuf.ctrl),);
 80060d4:	f897 30bb 	ldrb.w	r3, [r7, #187]	@ 0xbb
 80060d8:	4920      	ldr	r1, [pc, #128]	@ (800615c <process_enumeration+0x8c4>)
 80060da:	4618      	mov	r0, r3
 80060dc:	f000 f886 	bl	80061ec <enum_parse_configuration_desc>
 80060e0:	4603      	mov	r3, r0
 80060e2:	f083 0301 	eor.w	r3, r3, #1
 80060e6:	b2db      	uxtb	r3, r3
 80060e8:	2b00      	cmp	r3, #0
 80060ea:	d00b      	beq.n	8006104 <process_enumeration+0x86c>
 80060ec:	4b1c      	ldr	r3, [pc, #112]	@ (8006160 <process_enumeration+0x8c8>)
 80060ee:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 80060f2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80060f6:	681b      	ldr	r3, [r3, #0]
 80060f8:	f003 0301 	and.w	r3, r3, #1
 80060fc:	2b00      	cmp	r3, #0
 80060fe:	d03b      	beq.n	8006178 <process_enumeration+0x8e0>
 8006100:	be00      	bkpt	0x0000
 8006102:	e039      	b.n	8006178 <process_enumeration+0x8e0>

      // Start the Set Configuration process for interfaces (itf = TUSB_INDEX_INVALID_8)
      // Since driver can perform control transfer within its set_config, this is done asynchronously.
      // The process continue with next interface when class driver complete its sequence with usbh_driver_set_config_complete()
      // TODO use separated API instead of using TUSB_INDEX_INVALID_8
      usbh_driver_set_config_complete(daddr, TUSB_INDEX_INVALID_8);
 8006104:	f897 30bb 	ldrb.w	r3, [r7, #187]	@ 0xbb
 8006108:	21ff      	movs	r1, #255	@ 0xff
 800610a:	4618      	mov	r0, r3
 800610c:	f000 f968 	bl	80063e0 <usbh_driver_set_config_complete>
      break;
 8006110:	e033      	b.n	800617a <process_enumeration+0x8e2>
    }

    default:
      enum_full_complete(); // stop enumeration if unknown state
 8006112:	f000 f9b7 	bl	8006484 <enum_full_complete>
      break;
 8006116:	e030      	b.n	800617a <process_enumeration+0x8e2>
    return;
 8006118:	bf00      	nop
 800611a:	e02e      	b.n	800617a <process_enumeration+0x8e2>
    TU_ASSERT(dev,);
 800611c:	bf00      	nop
 800611e:	e02c      	b.n	800617a <process_enumeration+0x8e2>
      TU_ASSERT(usbh_edpt_control_open(addr0, 8),);
 8006120:	bf00      	nop
 8006122:	e02a      	b.n	800617a <process_enumeration+0x8e2>
      break;
 8006124:	bf00      	nop
 8006126:	e028      	b.n	800617a <process_enumeration+0x8e2>
      TU_ASSERT(tuh_descriptor_get_device(addr0, _usbh_epbuf.ctrl, 8,
 8006128:	bf00      	nop
 800612a:	e026      	b.n	800617a <process_enumeration+0x8e2>
      TU_ASSERT(new_addr != 0,);
 800612c:	bf00      	nop
 800612e:	e024      	b.n	800617a <process_enumeration+0x8e2>
      break;
 8006130:	bf00      	nop
 8006132:	e022      	b.n	800617a <process_enumeration+0x8e2>
      TU_ASSERT(tuh_address_set(0, new_addr, process_enumeration, ENUM_GET_DEVICE_DESC),);
 8006134:	bf00      	nop
 8006136:	e020      	b.n	800617a <process_enumeration+0x8e2>
      TU_ASSERT(new_dev,);
 8006138:	bf00      	nop
 800613a:	e01e      	b.n	800617a <process_enumeration+0x8e2>
      TU_ASSERT(usbh_edpt_control_open(new_addr, new_dev->bMaxPacketSize0),); // open new control endpoint
 800613c:	bf00      	nop
 800613e:	e01c      	b.n	800617a <process_enumeration+0x8e2>
      break;
 8006140:	bf00      	nop
 8006142:	e01a      	b.n	800617a <process_enumeration+0x8e2>
      TU_ASSERT(tuh_descriptor_get_device(new_addr, _usbh_epbuf.ctrl, sizeof(tusb_desc_device_t),
 8006144:	bf00      	nop
 8006146:	e018      	b.n	800617a <process_enumeration+0x8e2>
      break;
 8006148:	bf00      	nop
 800614a:	e016      	b.n	800617a <process_enumeration+0x8e2>
      TU_ASSERT(tuh_descriptor_get_configuration(daddr, config_idx, _usbh_epbuf.ctrl, 9,
 800614c:	bf00      	nop
 800614e:	e014      	b.n	800617a <process_enumeration+0x8e2>
      TU_ASSERT(total_len <= CFG_TUH_ENUMERATION_BUFSIZE,);
 8006150:	bf00      	nop
 8006152:	e012      	b.n	800617a <process_enumeration+0x8e2>
      break;
 8006154:	bf00      	nop
 8006156:	e010      	b.n	800617a <process_enumeration+0x8e2>
 8006158:	08005899 	.word	0x08005899
 800615c:	20000ab8 	.word	0x20000ab8
 8006160:	e000edf0 	.word	0xe000edf0
      TU_ASSERT(tuh_descriptor_get_configuration(daddr, config_idx, _usbh_epbuf.ctrl, total_len,
 8006164:	bf00      	nop
 8006166:	e008      	b.n	800617a <process_enumeration+0x8e2>
      break;
 8006168:	bf00      	nop
 800616a:	e006      	b.n	800617a <process_enumeration+0x8e2>
        TU_ASSERT(tuh_configuration_set(daddr, config_idx+1, process_enumeration, ENUM_CONFIG_DRIVER),);
 800616c:	bf00      	nop
 800616e:	e004      	b.n	800617a <process_enumeration+0x8e2>
        TU_ASSERT(config_idx < dev->bNumConfigurations,);
 8006170:	bf00      	nop
 8006172:	e002      	b.n	800617a <process_enumeration+0x8e2>
        TU_ASSERT(tuh_descriptor_get_configuration(daddr, config_idx, _usbh_epbuf.ctrl, 9,
 8006174:	bf00      	nop
 8006176:	e000      	b.n	800617a <process_enumeration+0x8e2>
      TU_ASSERT(enum_parse_configuration_desc(daddr, (tusb_desc_configuration_t*) _usbh_epbuf.ctrl),);
 8006178:	bf00      	nop
  }
}
 800617a:	37c4      	adds	r7, #196	@ 0xc4
 800617c:	46bd      	mov	sp, r7
 800617e:	bd90      	pop	{r4, r7, pc}

08006180 <enum_get_new_address>:

static uint8_t enum_get_new_address(bool is_hub) {
 8006180:	b480      	push	{r7}
 8006182:	b085      	sub	sp, #20
 8006184:	af00      	add	r7, sp, #0
 8006186:	4603      	mov	r3, r0
 8006188:	71fb      	strb	r3, [r7, #7]
  uint8_t start;
  uint8_t end;

  if ( is_hub ) {
 800618a:	79fb      	ldrb	r3, [r7, #7]
 800618c:	2b00      	cmp	r3, #0
 800618e:	d004      	beq.n	800619a <enum_get_new_address+0x1a>
    start = CFG_TUH_DEVICE_MAX;
 8006190:	2301      	movs	r3, #1
 8006192:	73fb      	strb	r3, [r7, #15]
    end   = start + CFG_TUH_HUB;
 8006194:	7bfb      	ldrb	r3, [r7, #15]
 8006196:	73bb      	strb	r3, [r7, #14]
 8006198:	e004      	b.n	80061a4 <enum_get_new_address+0x24>
  }else {
    start = 0;
 800619a:	2300      	movs	r3, #0
 800619c:	73fb      	strb	r3, [r7, #15]
    end   = start + CFG_TUH_DEVICE_MAX;
 800619e:	7bfb      	ldrb	r3, [r7, #15]
 80061a0:	3301      	adds	r3, #1
 80061a2:	73bb      	strb	r3, [r7, #14]
  }

  for (uint8_t idx = start; idx < end; idx++) {
 80061a4:	7bfb      	ldrb	r3, [r7, #15]
 80061a6:	737b      	strb	r3, [r7, #13]
 80061a8:	e013      	b.n	80061d2 <enum_get_new_address+0x52>
    if (!_usbh_devices[idx].connected) {
 80061aa:	7b7b      	ldrb	r3, [r7, #13]
 80061ac:	4a0e      	ldr	r2, [pc, #56]	@ (80061e8 <enum_get_new_address+0x68>)
 80061ae:	215e      	movs	r1, #94	@ 0x5e
 80061b0:	fb01 f303 	mul.w	r3, r1, r3
 80061b4:	4413      	add	r3, r2
 80061b6:	3310      	adds	r3, #16
 80061b8:	791b      	ldrb	r3, [r3, #4]
 80061ba:	f3c3 0300 	ubfx	r3, r3, #0, #1
 80061be:	b2db      	uxtb	r3, r3
 80061c0:	2b00      	cmp	r3, #0
 80061c2:	d103      	bne.n	80061cc <enum_get_new_address+0x4c>
      return (idx + 1);
 80061c4:	7b7b      	ldrb	r3, [r7, #13]
 80061c6:	3301      	adds	r3, #1
 80061c8:	b2db      	uxtb	r3, r3
 80061ca:	e007      	b.n	80061dc <enum_get_new_address+0x5c>
  for (uint8_t idx = start; idx < end; idx++) {
 80061cc:	7b7b      	ldrb	r3, [r7, #13]
 80061ce:	3301      	adds	r3, #1
 80061d0:	737b      	strb	r3, [r7, #13]
 80061d2:	7b7a      	ldrb	r2, [r7, #13]
 80061d4:	7bbb      	ldrb	r3, [r7, #14]
 80061d6:	429a      	cmp	r2, r3
 80061d8:	d3e7      	bcc.n	80061aa <enum_get_new_address+0x2a>
    }
  }

  return 0; // invalid address
 80061da:	2300      	movs	r3, #0
}
 80061dc:	4618      	mov	r0, r3
 80061de:	3714      	adds	r7, #20
 80061e0:	46bd      	mov	sp, r7
 80061e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061e6:	4770      	bx	lr
 80061e8:	2000098c 	.word	0x2000098c

080061ec <enum_parse_configuration_desc>:

static bool enum_parse_configuration_desc(uint8_t dev_addr, tusb_desc_configuration_t const* desc_cfg) {
 80061ec:	b590      	push	{r4, r7, lr}
 80061ee:	b099      	sub	sp, #100	@ 0x64
 80061f0:	af00      	add	r7, sp, #0
 80061f2:	4603      	mov	r3, r0
 80061f4:	6039      	str	r1, [r7, #0]
 80061f6:	71fb      	strb	r3, [r7, #7]
 80061f8:	79fb      	ldrb	r3, [r7, #7]
 80061fa:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  TU_VERIFY(dev_addr > 0 && dev_addr <= TOTAL_DEVICES, NULL);
 80061fe:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8006202:	2b00      	cmp	r3, #0
 8006204:	d003      	beq.n	800620e <enum_parse_configuration_desc+0x22>
 8006206:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800620a:	2b01      	cmp	r3, #1
 800620c:	d901      	bls.n	8006212 <enum_parse_configuration_desc+0x26>
 800620e:	2300      	movs	r3, #0
 8006210:	e007      	b.n	8006222 <enum_parse_configuration_desc+0x36>
  return &_usbh_devices[dev_addr-1];
 8006212:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8006216:	3b01      	subs	r3, #1
 8006218:	225e      	movs	r2, #94	@ 0x5e
 800621a:	fb02 f303 	mul.w	r3, r2, r3
 800621e:	4a6d      	ldr	r2, [pc, #436]	@ (80063d4 <enum_parse_configuration_desc+0x1e8>)
 8006220:	4413      	add	r3, r2
  usbh_device_t* dev = get_device(dev_addr);
 8006222:	657b      	str	r3, [r7, #84]	@ 0x54
  uint16_t const total_len = tu_le16toh(desc_cfg->wTotalLength);
 8006224:	683b      	ldr	r3, [r7, #0]
 8006226:	789a      	ldrb	r2, [r3, #2]
 8006228:	78db      	ldrb	r3, [r3, #3]
 800622a:	021b      	lsls	r3, r3, #8
 800622c:	4313      	orrs	r3, r2
 800622e:	f8a7 3052 	strh.w	r3, [r7, #82]	@ 0x52
  uint8_t const* desc_end = ((uint8_t const*) desc_cfg) + total_len;
 8006232:	f8b7 3052 	ldrh.w	r3, [r7, #82]	@ 0x52
 8006236:	683a      	ldr	r2, [r7, #0]
 8006238:	4413      	add	r3, r2
 800623a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800623c:	683b      	ldr	r3, [r7, #0]
 800623e:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint8_t const* desc8 = (uint8_t const*) desc;
 8006240:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006242:	627b      	str	r3, [r7, #36]	@ 0x24
  return desc8 + desc8[DESC_OFFSET_LEN];
 8006244:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006246:	781b      	ldrb	r3, [r3, #0]
 8006248:	461a      	mov	r2, r3
 800624a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800624c:	4413      	add	r3, r2
  uint8_t const* p_desc   = tu_desc_next(desc_cfg);
 800624e:	65fb      	str	r3, [r7, #92]	@ 0x5c

  TU_LOG_USBH("Parsing Configuration descriptor (wTotalLength = %u)\r\n", total_len);

  // parse each interfaces
  while( p_desc < desc_end ) {
 8006250:	e0b3      	b.n	80063ba <enum_parse_configuration_desc+0x1ce>
 8006252:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006254:	61fb      	str	r3, [r7, #28]
}

// get descriptor length
TU_ATTR_ALWAYS_INLINE static inline uint8_t tu_desc_len(void const* desc) {
  return ((uint8_t const*) desc)[DESC_OFFSET_LEN];
 8006256:	69fb      	ldr	r3, [r7, #28]
 8006258:	781b      	ldrb	r3, [r3, #0]
    if ( 0 == tu_desc_len(p_desc) ) {
 800625a:	2b00      	cmp	r3, #0
 800625c:	f000 80b3 	beq.w	80063c6 <enum_parse_configuration_desc+0x1da>
      // Parsed interfaces should still be usable
      TU_LOG_USBH("Encountered a zero-length descriptor after %" PRIu32 " bytes\r\n", (uint32_t)p_desc - (uint32_t)desc_cfg);
      break;
    }

    uint8_t assoc_itf_count = 1;
 8006260:	2301      	movs	r3, #1
 8006262:	f887 305b 	strb.w	r3, [r7, #91]	@ 0x5b
 8006266:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006268:	61bb      	str	r3, [r7, #24]
}

// get descriptor type
TU_ATTR_ALWAYS_INLINE static inline uint8_t tu_desc_type(void const* desc) {
  return ((uint8_t const*) desc)[DESC_OFFSET_TYPE];
 800626a:	69bb      	ldr	r3, [r7, #24]
 800626c:	3301      	adds	r3, #1
 800626e:	781b      	ldrb	r3, [r3, #0]

    // Class will always starts with Interface Association (if any) and then Interface descriptor
    if ( TUSB_DESC_INTERFACE_ASSOCIATION == tu_desc_type(p_desc) ) {
 8006270:	2b0b      	cmp	r3, #11
 8006272:	d10f      	bne.n	8006294 <enum_parse_configuration_desc+0xa8>
      tusb_desc_interface_assoc_t const * desc_iad = (tusb_desc_interface_assoc_t const *) p_desc;
 8006274:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006276:	64bb      	str	r3, [r7, #72]	@ 0x48
      assoc_itf_count = desc_iad->bInterfaceCount;
 8006278:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800627a:	78db      	ldrb	r3, [r3, #3]
 800627c:	f887 305b 	strb.w	r3, [r7, #91]	@ 0x5b
 8006280:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006282:	617b      	str	r3, [r7, #20]
  uint8_t const* desc8 = (uint8_t const*) desc;
 8006284:	697b      	ldr	r3, [r7, #20]
 8006286:	613b      	str	r3, [r7, #16]
  return desc8 + desc8[DESC_OFFSET_LEN];
 8006288:	693b      	ldr	r3, [r7, #16]
 800628a:	781b      	ldrb	r3, [r3, #0]
 800628c:	461a      	mov	r2, r3
 800628e:	693b      	ldr	r3, [r7, #16]
 8006290:	4413      	add	r3, r2

      p_desc = tu_desc_next(p_desc); // next to Interface
 8006292:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8006294:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006296:	60fb      	str	r3, [r7, #12]
  return ((uint8_t const*) desc)[DESC_OFFSET_TYPE];
 8006298:	68fb      	ldr	r3, [r7, #12]
 800629a:	3301      	adds	r3, #1
 800629c:	781b      	ldrb	r3, [r3, #0]
      // IAD's first interface number and class should match with opened interface
      //TU_ASSERT(desc_iad->bFirstInterface == desc_itf->bInterfaceNumber &&
      //          desc_iad->bFunctionClass  == desc_itf->bInterfaceClass);
    }

    TU_ASSERT( TUSB_DESC_INTERFACE == tu_desc_type(p_desc) );
 800629e:	2b04      	cmp	r3, #4
 80062a0:	d00a      	beq.n	80062b8 <enum_parse_configuration_desc+0xcc>
 80062a2:	4b4d      	ldr	r3, [pc, #308]	@ (80063d8 <enum_parse_configuration_desc+0x1ec>)
 80062a4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80062a6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80062a8:	681b      	ldr	r3, [r3, #0]
 80062aa:	f003 0301 	and.w	r3, r3, #1
 80062ae:	2b00      	cmp	r3, #0
 80062b0:	d000      	beq.n	80062b4 <enum_parse_configuration_desc+0xc8>
 80062b2:	be00      	bkpt	0x0000
 80062b4:	2300      	movs	r3, #0
 80062b6:	e088      	b.n	80063ca <enum_parse_configuration_desc+0x1de>
    tusb_desc_interface_t const* desc_itf = (tusb_desc_interface_t const*) p_desc;
 80062b8:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80062ba:	647b      	str	r3, [r7, #68]	@ 0x44
        CDC_COMM_SUBCLASS_ABSTRACT_CONTROL_MODEL == desc_itf->bInterfaceSubClass) {
      assoc_itf_count = 2;
    }
#endif

    uint16_t const drv_len = tu_desc_get_interface_total_len(desc_itf, assoc_itf_count, (uint16_t) (desc_end-p_desc));
 80062bc:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80062be:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80062c0:	1ad3      	subs	r3, r2, r3
 80062c2:	b29a      	uxth	r2, r3
 80062c4:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 80062c8:	4619      	mov	r1, r3
 80062ca:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 80062cc:	f001 fe5f 	bl	8007f8e <tu_desc_get_interface_total_len>
 80062d0:	4603      	mov	r3, r0
 80062d2:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
    TU_ASSERT(drv_len >= sizeof(tusb_desc_interface_t));
 80062d6:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 80062da:	2b08      	cmp	r3, #8
 80062dc:	d80a      	bhi.n	80062f4 <enum_parse_configuration_desc+0x108>
 80062de:	4b3e      	ldr	r3, [pc, #248]	@ (80063d8 <enum_parse_configuration_desc+0x1ec>)
 80062e0:	633b      	str	r3, [r7, #48]	@ 0x30
 80062e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80062e4:	681b      	ldr	r3, [r3, #0]
 80062e6:	f003 0301 	and.w	r3, r3, #1
 80062ea:	2b00      	cmp	r3, #0
 80062ec:	d000      	beq.n	80062f0 <enum_parse_configuration_desc+0x104>
 80062ee:	be00      	bkpt	0x0000
 80062f0:	2300      	movs	r3, #0
 80062f2:	e06a      	b.n	80063ca <enum_parse_configuration_desc+0x1de>

    // Find driver for this interface
    for (uint8_t drv_id = 0; drv_id < TOTAL_DRIVER_COUNT; drv_id++) {
 80062f4:	2300      	movs	r3, #0
 80062f6:	f887 305a 	strb.w	r3, [r7, #90]	@ 0x5a
 80062fa:	e053      	b.n	80063a4 <enum_parse_configuration_desc+0x1b8>
      usbh_class_driver_t const * driver = get_driver(drv_id);
 80062fc:	f897 305a 	ldrb.w	r3, [r7, #90]	@ 0x5a
 8006300:	4618      	mov	r0, r3
 8006302:	f7fd ff63 	bl	80041cc <get_driver>
 8006306:	63f8      	str	r0, [r7, #60]	@ 0x3c
      if (driver && driver->open(dev->bus_info.rhport, dev_addr, desc_itf, drv_len) ) {
 8006308:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800630a:	2b00      	cmp	r3, #0
 800630c:	d045      	beq.n	800639a <enum_parse_configuration_desc+0x1ae>
 800630e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006310:	68dc      	ldr	r4, [r3, #12]
 8006312:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006314:	7818      	ldrb	r0, [r3, #0]
 8006316:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 800631a:	79f9      	ldrb	r1, [r7, #7]
 800631c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800631e:	47a0      	blx	r4
 8006320:	4603      	mov	r3, r0
 8006322:	2b00      	cmp	r3, #0
 8006324:	d039      	beq.n	800639a <enum_parse_configuration_desc+0x1ae>
        // open successfully
        TU_LOG_USBH("  %s opened\r\n", driver->name);

        // bind (associated) interfaces to found driver
        for(uint8_t i=0; i<assoc_itf_count; i++) {
 8006326:	2300      	movs	r3, #0
 8006328:	f887 3059 	strb.w	r3, [r7, #89]	@ 0x59
 800632c:	e024      	b.n	8006378 <enum_parse_configuration_desc+0x18c>
          uint8_t const itf_num = desc_itf->bInterfaceNumber+i;
 800632e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006330:	789a      	ldrb	r2, [r3, #2]
 8006332:	f897 3059 	ldrb.w	r3, [r7, #89]	@ 0x59
 8006336:	4413      	add	r3, r2
 8006338:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b

          // Interface number must not be used already
          TU_ASSERT( TUSB_INDEX_INVALID_8 == dev->itf2drv[itf_num] );
 800633c:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
 8006340:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8006342:	4413      	add	r3, r2
 8006344:	7d5b      	ldrb	r3, [r3, #21]
 8006346:	2bff      	cmp	r3, #255	@ 0xff
 8006348:	d00a      	beq.n	8006360 <enum_parse_configuration_desc+0x174>
 800634a:	4b23      	ldr	r3, [pc, #140]	@ (80063d8 <enum_parse_configuration_desc+0x1ec>)
 800634c:	637b      	str	r3, [r7, #52]	@ 0x34
 800634e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006350:	681b      	ldr	r3, [r3, #0]
 8006352:	f003 0301 	and.w	r3, r3, #1
 8006356:	2b00      	cmp	r3, #0
 8006358:	d000      	beq.n	800635c <enum_parse_configuration_desc+0x170>
 800635a:	be00      	bkpt	0x0000
 800635c:	2300      	movs	r3, #0
 800635e:	e034      	b.n	80063ca <enum_parse_configuration_desc+0x1de>
          dev->itf2drv[itf_num] = drv_id;
 8006360:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
 8006364:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8006366:	4413      	add	r3, r2
 8006368:	f897 205a 	ldrb.w	r2, [r7, #90]	@ 0x5a
 800636c:	755a      	strb	r2, [r3, #21]
        for(uint8_t i=0; i<assoc_itf_count; i++) {
 800636e:	f897 3059 	ldrb.w	r3, [r7, #89]	@ 0x59
 8006372:	3301      	adds	r3, #1
 8006374:	f887 3059 	strb.w	r3, [r7, #89]	@ 0x59
 8006378:	f897 2059 	ldrb.w	r2, [r7, #89]	@ 0x59
 800637c:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 8006380:	429a      	cmp	r2, r3
 8006382:	d3d4      	bcc.n	800632e <enum_parse_configuration_desc+0x142>
        }

        // bind all endpoints to found driver
        tu_edpt_bind_driver(dev->ep2drv, desc_itf, drv_len, drv_id);
 8006384:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006386:	f103 001d 	add.w	r0, r3, #29
 800638a:	f897 305a 	ldrb.w	r3, [r7, #90]	@ 0x5a
 800638e:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 8006392:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8006394:	f001 fdb6 	bl	8007f04 <tu_edpt_bind_driver>

        break; // exit driver find loop
 8006398:	e00a      	b.n	80063b0 <enum_parse_configuration_desc+0x1c4>
    for (uint8_t drv_id = 0; drv_id < TOTAL_DRIVER_COUNT; drv_id++) {
 800639a:	f897 305a 	ldrb.w	r3, [r7, #90]	@ 0x5a
 800639e:	3301      	adds	r3, #1
 80063a0:	f887 305a 	strb.w	r3, [r7, #90]	@ 0x5a
 80063a4:	4b0d      	ldr	r3, [pc, #52]	@ (80063dc <enum_parse_configuration_desc+0x1f0>)
 80063a6:	781b      	ldrb	r3, [r3, #0]
 80063a8:	f897 205a 	ldrb.w	r2, [r7, #90]	@ 0x5a
 80063ac:	429a      	cmp	r2, r3
 80063ae:	d9a5      	bls.n	80062fc <enum_parse_configuration_desc+0x110>
               dev->bus_info.rhport, dev_addr, desc_itf->bInterfaceNumber, desc_itf->bInterfaceClass, desc_itf->bInterfaceSubClass, desc_itf->bInterfaceProtocol);
      }
    }

    // next Interface or IAD descriptor
    p_desc += drv_len;
 80063b0:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 80063b4:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 80063b6:	4413      	add	r3, r2
 80063b8:	65fb      	str	r3, [r7, #92]	@ 0x5c
  while( p_desc < desc_end ) {
 80063ba:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 80063bc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80063be:	429a      	cmp	r2, r3
 80063c0:	f4ff af47 	bcc.w	8006252 <enum_parse_configuration_desc+0x66>
 80063c4:	e000      	b.n	80063c8 <enum_parse_configuration_desc+0x1dc>
      break;
 80063c6:	bf00      	nop
  }

  return true;
 80063c8:	2301      	movs	r3, #1
}
 80063ca:	4618      	mov	r0, r3
 80063cc:	3764      	adds	r7, #100	@ 0x64
 80063ce:	46bd      	mov	sp, r7
 80063d0:	bd90      	pop	{r4, r7, pc}
 80063d2:	bf00      	nop
 80063d4:	2000098c 	.word	0x2000098c
 80063d8:	e000edf0 	.word	0xe000edf0
 80063dc:	20000bbc 	.word	0x20000bbc

080063e0 <usbh_driver_set_config_complete>:

void usbh_driver_set_config_complete(uint8_t dev_addr, uint8_t itf_num) {
 80063e0:	b580      	push	{r7, lr}
 80063e2:	b086      	sub	sp, #24
 80063e4:	af00      	add	r7, sp, #0
 80063e6:	4603      	mov	r3, r0
 80063e8:	460a      	mov	r2, r1
 80063ea:	71fb      	strb	r3, [r7, #7]
 80063ec:	4613      	mov	r3, r2
 80063ee:	71bb      	strb	r3, [r7, #6]
 80063f0:	79fb      	ldrb	r3, [r7, #7]
 80063f2:	72fb      	strb	r3, [r7, #11]
  TU_VERIFY(dev_addr > 0 && dev_addr <= TOTAL_DEVICES, NULL);
 80063f4:	7afb      	ldrb	r3, [r7, #11]
 80063f6:	2b00      	cmp	r3, #0
 80063f8:	d002      	beq.n	8006400 <usbh_driver_set_config_complete+0x20>
 80063fa:	7afb      	ldrb	r3, [r7, #11]
 80063fc:	2b01      	cmp	r3, #1
 80063fe:	d901      	bls.n	8006404 <usbh_driver_set_config_complete+0x24>
 8006400:	2300      	movs	r3, #0
 8006402:	e006      	b.n	8006412 <usbh_driver_set_config_complete+0x32>
  return &_usbh_devices[dev_addr-1];
 8006404:	7afb      	ldrb	r3, [r7, #11]
 8006406:	3b01      	subs	r3, #1
 8006408:	225e      	movs	r2, #94	@ 0x5e
 800640a:	fb02 f303 	mul.w	r3, r2, r3
 800640e:	4a1b      	ldr	r2, [pc, #108]	@ (800647c <usbh_driver_set_config_complete+0x9c>)
 8006410:	4413      	add	r3, r2
  usbh_device_t* dev = get_device(dev_addr);
 8006412:	617b      	str	r3, [r7, #20]

  for(itf_num++; itf_num < CFG_TUH_INTERFACE_MAX; itf_num++) {
 8006414:	79bb      	ldrb	r3, [r7, #6]
 8006416:	3301      	adds	r3, #1
 8006418:	71bb      	strb	r3, [r7, #6]
 800641a:	e016      	b.n	800644a <usbh_driver_set_config_complete+0x6a>
    // continue with next valid interface
    // IAD binding interface such as CDCs should return itf_num + 1 when complete
    // with usbh_driver_set_config_complete()
    uint8_t const drv_id = dev->itf2drv[itf_num];
 800641c:	79bb      	ldrb	r3, [r7, #6]
 800641e:	697a      	ldr	r2, [r7, #20]
 8006420:	4413      	add	r3, r2
 8006422:	7d5b      	ldrb	r3, [r3, #21]
 8006424:	74fb      	strb	r3, [r7, #19]
    usbh_class_driver_t const * driver = get_driver(drv_id);
 8006426:	7cfb      	ldrb	r3, [r7, #19]
 8006428:	4618      	mov	r0, r3
 800642a:	f7fd fecf 	bl	80041cc <get_driver>
 800642e:	60f8      	str	r0, [r7, #12]
    if (driver) {
 8006430:	68fb      	ldr	r3, [r7, #12]
 8006432:	2b00      	cmp	r3, #0
 8006434:	d006      	beq.n	8006444 <usbh_driver_set_config_complete+0x64>
      TU_LOG_USBH("%s set config: itf = %u\r\n", driver->name, itf_num);
      driver->set_config(dev_addr, itf_num);
 8006436:	68fb      	ldr	r3, [r7, #12]
 8006438:	691b      	ldr	r3, [r3, #16]
 800643a:	79b9      	ldrb	r1, [r7, #6]
 800643c:	79fa      	ldrb	r2, [r7, #7]
 800643e:	4610      	mov	r0, r2
 8006440:	4798      	blx	r3
      break;
 8006442:	e005      	b.n	8006450 <usbh_driver_set_config_complete+0x70>
  for(itf_num++; itf_num < CFG_TUH_INTERFACE_MAX; itf_num++) {
 8006444:	79bb      	ldrb	r3, [r7, #6]
 8006446:	3301      	adds	r3, #1
 8006448:	71bb      	strb	r3, [r7, #6]
 800644a:	79bb      	ldrb	r3, [r7, #6]
 800644c:	2b07      	cmp	r3, #7
 800644e:	d9e5      	bls.n	800641c <usbh_driver_set_config_complete+0x3c>
    }
  }

  // all interface are configured
  if (itf_num == CFG_TUH_INTERFACE_MAX) {
 8006450:	79bb      	ldrb	r3, [r7, #6]
 8006452:	2b08      	cmp	r3, #8
 8006454:	d10d      	bne.n	8006472 <usbh_driver_set_config_complete+0x92>
    enum_full_complete();
 8006456:	f000 f815 	bl	8006484 <enum_full_complete>
 800645a:	79fb      	ldrb	r3, [r7, #7]
 800645c:	72bb      	strb	r3, [r7, #10]
  return (CFG_TUH_HUB > 0) && (daddr > CFG_TUH_DEVICE_MAX);
 800645e:	2300      	movs	r3, #0

    if (is_hub_addr(dev_addr)) {
 8006460:	2b00      	cmp	r3, #0
 8006462:	d106      	bne.n	8006472 <usbh_driver_set_config_complete+0x92>
      TU_LOG_USBH("HUB address = %u is mounted\r\n", dev_addr);
    }else {
      // Invoke callback if available
      if (tuh_mount_cb) {
 8006464:	4b06      	ldr	r3, [pc, #24]	@ (8006480 <usbh_driver_set_config_complete+0xa0>)
 8006466:	2b00      	cmp	r3, #0
 8006468:	d003      	beq.n	8006472 <usbh_driver_set_config_complete+0x92>
        tuh_mount_cb(dev_addr);
 800646a:	79fb      	ldrb	r3, [r7, #7]
 800646c:	4618      	mov	r0, r3
 800646e:	f3af 8000 	nop.w
      }
    }
  }
}
 8006472:	bf00      	nop
 8006474:	3718      	adds	r7, #24
 8006476:	46bd      	mov	sp, r7
 8006478:	bd80      	pop	{r7, pc}
 800647a:	bf00      	nop
 800647c:	2000098c 	.word	0x2000098c
 8006480:	00000000 	.word	0x00000000

08006484 <enum_full_complete>:

static void enum_full_complete(void) {
 8006484:	b480      	push	{r7}
 8006486:	af00      	add	r7, sp, #0
  // mark enumeration as complete
  _usbh_data.enumerating_daddr = TUSB_INDEX_INVALID_8;
 8006488:	4b03      	ldr	r3, [pc, #12]	@ (8006498 <enum_full_complete+0x14>)
 800648a:	22ff      	movs	r2, #255	@ 0xff
 800648c:	705a      	strb	r2, [r3, #1]
  if (_usbh_data.dev0_bus.hub_addr != 0) {
    hub_edpt_status_xfer(_usbh_data.dev0_bus.hub_addr); // get next hub status
  }
#endif

}
 800648e:	bf00      	nop
 8006490:	46bd      	mov	sp, r7
 8006492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006496:	4770      	bx	lr
 8006498:	20000020 	.word	0x20000020

0800649c <dwc2_phy_init>:
}

// MCU specific PHY init, called BEFORE core reset
// - dwc2 3.30a (H5) use USB_HS_PHYC
// - dwc2 4.11a (U5) use femtoPHY
static inline void dwc2_phy_init(dwc2_regs_t* dwc2, uint8_t hs_phy_type) {
 800649c:	b480      	push	{r7}
 800649e:	b083      	sub	sp, #12
 80064a0:	af00      	add	r7, sp, #0
 80064a2:	6078      	str	r0, [r7, #4]
 80064a4:	460b      	mov	r3, r1
 80064a6:	70fb      	strb	r3, [r7, #3]
  if (hs_phy_type == GHWCFG2_HSPHY_NOT_SUPPORTED) {
 80064a8:	78fb      	ldrb	r3, [r7, #3]
 80064aa:	2b00      	cmp	r3, #0
 80064ac:	d110      	bne.n	80064d0 <dwc2_phy_init+0x34>
    // Enable on-chip FS PHY
    dwc2->stm32_gccfg |= STM32_GCCFG_PWRDWN;
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80064b2:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	639a      	str	r2, [r3, #56]	@ 0x38
      RCC->AHB1LPENR &= ~RCC_AHB1LPENR_USB1OTGHSULPILPEN;
    }
    #endif

    #if defined(USB_OTG_HS_PERIPH_BASE) && defined(RCC_AHB1LPENR_OTGHSULPILPEN)
    if ( USB_OTG_HS_PERIPH_BASE == (uint32_t) dwc2 ) {
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	4a0a      	ldr	r2, [pc, #40]	@ (80064e8 <dwc2_phy_init+0x4c>)
 80064be:	4293      	cmp	r3, r2
 80064c0:	d10c      	bne.n	80064dc <dwc2_phy_init+0x40>
      RCC->AHB1LPENR &= ~RCC_AHB1LPENR_OTGHSULPILPEN;
 80064c2:	4b0a      	ldr	r3, [pc, #40]	@ (80064ec <dwc2_phy_init+0x50>)
 80064c4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80064c6:	4a09      	ldr	r2, [pc, #36]	@ (80064ec <dwc2_phy_init+0x50>)
 80064c8:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80064cc:	6513      	str	r3, [r2, #80]	@ 0x50
      #else

      #endif
    }
  }
}
 80064ce:	e005      	b.n	80064dc <dwc2_phy_init+0x40>
    dwc2->stm32_gccfg &= ~STM32_GCCFG_PWRDWN;
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80064d4:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	639a      	str	r2, [r3, #56]	@ 0x38
}
 80064dc:	bf00      	nop
 80064de:	370c      	adds	r7, #12
 80064e0:	46bd      	mov	sp, r7
 80064e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064e6:	4770      	bx	lr
 80064e8:	40040000 	.word	0x40040000
 80064ec:	40023800 	.word	0x40023800

080064f0 <dwc2_phy_update>:

// MCU specific PHY update, it is called AFTER init() and core reset
static inline void dwc2_phy_update(dwc2_regs_t* dwc2, uint8_t hs_phy_type) {
 80064f0:	b480      	push	{r7}
 80064f2:	b085      	sub	sp, #20
 80064f4:	af00      	add	r7, sp, #0
 80064f6:	6078      	str	r0, [r7, #4]
 80064f8:	460b      	mov	r3, r1
 80064fa:	70fb      	strb	r3, [r7, #3]
  // used to set turnaround time for fullspeed, nothing to do in highspeed mode
  if (hs_phy_type == GHWCFG2_HSPHY_NOT_SUPPORTED) {
 80064fc:	78fb      	ldrb	r3, [r7, #3]
 80064fe:	2b00      	cmp	r3, #0
 8006500:	d152      	bne.n	80065a8 <dwc2_phy_update+0xb8>
    // Turnaround timeout depends on the AHB clock dictated by STM32 Reference Manual
    uint32_t turnaround;

    if (SystemCoreClock >= 32000000u) {
 8006502:	4b2c      	ldr	r3, [pc, #176]	@ (80065b4 <dwc2_phy_update+0xc4>)
 8006504:	681b      	ldr	r3, [r3, #0]
 8006506:	4a2c      	ldr	r2, [pc, #176]	@ (80065b8 <dwc2_phy_update+0xc8>)
 8006508:	4293      	cmp	r3, r2
 800650a:	d302      	bcc.n	8006512 <dwc2_phy_update+0x22>
      turnaround = 0x6u;
 800650c:	2306      	movs	r3, #6
 800650e:	60fb      	str	r3, [r7, #12]
 8006510:	e041      	b.n	8006596 <dwc2_phy_update+0xa6>
    } else if (SystemCoreClock >= 27500000u) {
 8006512:	4b28      	ldr	r3, [pc, #160]	@ (80065b4 <dwc2_phy_update+0xc4>)
 8006514:	681b      	ldr	r3, [r3, #0]
 8006516:	4a29      	ldr	r2, [pc, #164]	@ (80065bc <dwc2_phy_update+0xcc>)
 8006518:	4293      	cmp	r3, r2
 800651a:	d902      	bls.n	8006522 <dwc2_phy_update+0x32>
      turnaround = 0x7u;
 800651c:	2307      	movs	r3, #7
 800651e:	60fb      	str	r3, [r7, #12]
 8006520:	e039      	b.n	8006596 <dwc2_phy_update+0xa6>
    } else if (SystemCoreClock >= 24000000u) {
 8006522:	4b24      	ldr	r3, [pc, #144]	@ (80065b4 <dwc2_phy_update+0xc4>)
 8006524:	681b      	ldr	r3, [r3, #0]
 8006526:	4a26      	ldr	r2, [pc, #152]	@ (80065c0 <dwc2_phy_update+0xd0>)
 8006528:	4293      	cmp	r3, r2
 800652a:	d302      	bcc.n	8006532 <dwc2_phy_update+0x42>
      turnaround = 0x8u;
 800652c:	2308      	movs	r3, #8
 800652e:	60fb      	str	r3, [r7, #12]
 8006530:	e031      	b.n	8006596 <dwc2_phy_update+0xa6>
    } else if (SystemCoreClock >= 21800000u) {
 8006532:	4b20      	ldr	r3, [pc, #128]	@ (80065b4 <dwc2_phy_update+0xc4>)
 8006534:	681b      	ldr	r3, [r3, #0]
 8006536:	4a23      	ldr	r2, [pc, #140]	@ (80065c4 <dwc2_phy_update+0xd4>)
 8006538:	4293      	cmp	r3, r2
 800653a:	d902      	bls.n	8006542 <dwc2_phy_update+0x52>
      turnaround = 0x9u;
 800653c:	2309      	movs	r3, #9
 800653e:	60fb      	str	r3, [r7, #12]
 8006540:	e029      	b.n	8006596 <dwc2_phy_update+0xa6>
    }
    else if (SystemCoreClock >= 20000000u) {
 8006542:	4b1c      	ldr	r3, [pc, #112]	@ (80065b4 <dwc2_phy_update+0xc4>)
 8006544:	681b      	ldr	r3, [r3, #0]
 8006546:	4a20      	ldr	r2, [pc, #128]	@ (80065c8 <dwc2_phy_update+0xd8>)
 8006548:	4293      	cmp	r3, r2
 800654a:	d902      	bls.n	8006552 <dwc2_phy_update+0x62>
      turnaround = 0xAu;
 800654c:	230a      	movs	r3, #10
 800654e:	60fb      	str	r3, [r7, #12]
 8006550:	e021      	b.n	8006596 <dwc2_phy_update+0xa6>
    }
    else if (SystemCoreClock >= 18500000u) {
 8006552:	4b18      	ldr	r3, [pc, #96]	@ (80065b4 <dwc2_phy_update+0xc4>)
 8006554:	681b      	ldr	r3, [r3, #0]
 8006556:	4a1d      	ldr	r2, [pc, #116]	@ (80065cc <dwc2_phy_update+0xdc>)
 8006558:	4293      	cmp	r3, r2
 800655a:	d902      	bls.n	8006562 <dwc2_phy_update+0x72>
      turnaround = 0xBu;
 800655c:	230b      	movs	r3, #11
 800655e:	60fb      	str	r3, [r7, #12]
 8006560:	e019      	b.n	8006596 <dwc2_phy_update+0xa6>
    }
    else if (SystemCoreClock >= 17200000u) {
 8006562:	4b14      	ldr	r3, [pc, #80]	@ (80065b4 <dwc2_phy_update+0xc4>)
 8006564:	681b      	ldr	r3, [r3, #0]
 8006566:	4a1a      	ldr	r2, [pc, #104]	@ (80065d0 <dwc2_phy_update+0xe0>)
 8006568:	4293      	cmp	r3, r2
 800656a:	d302      	bcc.n	8006572 <dwc2_phy_update+0x82>
      turnaround = 0xCu;
 800656c:	230c      	movs	r3, #12
 800656e:	60fb      	str	r3, [r7, #12]
 8006570:	e011      	b.n	8006596 <dwc2_phy_update+0xa6>
    }
    else if (SystemCoreClock >= 16000000u) {
 8006572:	4b10      	ldr	r3, [pc, #64]	@ (80065b4 <dwc2_phy_update+0xc4>)
 8006574:	681b      	ldr	r3, [r3, #0]
 8006576:	4a17      	ldr	r2, [pc, #92]	@ (80065d4 <dwc2_phy_update+0xe4>)
 8006578:	4293      	cmp	r3, r2
 800657a:	d302      	bcc.n	8006582 <dwc2_phy_update+0x92>
      turnaround = 0xDu;
 800657c:	230d      	movs	r3, #13
 800657e:	60fb      	str	r3, [r7, #12]
 8006580:	e009      	b.n	8006596 <dwc2_phy_update+0xa6>
    }
    else if (SystemCoreClock >= 15000000u) {
 8006582:	4b0c      	ldr	r3, [pc, #48]	@ (80065b4 <dwc2_phy_update+0xc4>)
 8006584:	681b      	ldr	r3, [r3, #0]
 8006586:	4a14      	ldr	r2, [pc, #80]	@ (80065d8 <dwc2_phy_update+0xe8>)
 8006588:	4293      	cmp	r3, r2
 800658a:	d302      	bcc.n	8006592 <dwc2_phy_update+0xa2>
      turnaround = 0xEu;
 800658c:	230e      	movs	r3, #14
 800658e:	60fb      	str	r3, [r7, #12]
 8006590:	e001      	b.n	8006596 <dwc2_phy_update+0xa6>
    }
    else {
      turnaround = 0xFu;
 8006592:	230f      	movs	r3, #15
 8006594:	60fb      	str	r3, [r7, #12]
    }

    dwc2->gusbcfg = (dwc2->gusbcfg & ~GUSBCFG_TRDT_Msk) | (turnaround << GUSBCFG_TRDT_Pos);
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	68db      	ldr	r3, [r3, #12]
 800659a:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 800659e:	68fb      	ldr	r3, [r7, #12]
 80065a0:	029b      	lsls	r3, r3, #10
 80065a2:	431a      	orrs	r2, r3
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	60da      	str	r2, [r3, #12]
  }
}
 80065a8:	bf00      	nop
 80065aa:	3714      	adds	r7, #20
 80065ac:	46bd      	mov	sp, r7
 80065ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065b2:	4770      	bx	lr
 80065b4:	20000000 	.word	0x20000000
 80065b8:	01e84800 	.word	0x01e84800
 80065bc:	01a39ddf 	.word	0x01a39ddf
 80065c0:	016e3600 	.word	0x016e3600
 80065c4:	014ca43f 	.word	0x014ca43f
 80065c8:	01312cff 	.word	0x01312cff
 80065cc:	011a499f 	.word	0x011a499f
 80065d0:	01067380 	.word	0x01067380
 80065d4:	00f42400 	.word	0x00f42400
 80065d8:	00e4e1c0 	.word	0x00e4e1c0

080065dc <reset_core>:
#include "dwc2_common.h"

//--------------------------------------------------------------------
//
//--------------------------------------------------------------------
static void reset_core(dwc2_regs_t* dwc2) {
 80065dc:	b480      	push	{r7}
 80065de:	b083      	sub	sp, #12
 80065e0:	af00      	add	r7, sp, #0
 80065e2:	6078      	str	r0, [r7, #4]
  // reset core
  dwc2->grstctl |= GRSTCTL_CSRST;
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	691b      	ldr	r3, [r3, #16]
 80065e8:	f043 0201 	orr.w	r2, r3, #1
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	611a      	str	r2, [r3, #16]

  if ((dwc2->gsnpsid & DWC2_CORE_REV_MASK) < (DWC2_CORE_REV_4_20a & DWC2_CORE_REV_MASK)) {
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80065f4:	b29b      	uxth	r3, r3
 80065f6:	f244 2209 	movw	r2, #16905	@ 0x4209
 80065fa:	4293      	cmp	r3, r2
 80065fc:	d807      	bhi.n	800660e <reset_core+0x32>
    // prior v42.0 CSRST is self-clearing
    while (dwc2->grstctl & GRSTCTL_CSRST) {}
 80065fe:	bf00      	nop
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	691b      	ldr	r3, [r3, #16]
 8006604:	f003 0301 	and.w	r3, r3, #1
 8006608:	2b00      	cmp	r3, #0
 800660a:	d1f9      	bne.n	8006600 <reset_core+0x24>
 800660c:	e010      	b.n	8006630 <reset_core+0x54>
  } else {
    // From v4.20a CSRST bit is write only, CSRT_DONE (w1c) is introduced for checking.
    // CSRST must also be explicitly cleared
    while (!(dwc2->grstctl & GRSTCTL_CSRST_DONE)) {}
 800660e:	bf00      	nop
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	691b      	ldr	r3, [r3, #16]
 8006614:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8006618:	2b00      	cmp	r3, #0
 800661a:	d0f9      	beq.n	8006610 <reset_core+0x34>
    dwc2->grstctl =  (dwc2->grstctl & ~GRSTCTL_CSRST) | GRSTCTL_CSRST_DONE;
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	691b      	ldr	r3, [r3, #16]
 8006620:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8006624:	f023 0301 	bic.w	r3, r3, #1
 8006628:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	611a      	str	r2, [r3, #16]
  }

  while (!(dwc2->grstctl & GRSTCTL_AHBIDL)) {} // wait for AHB master IDLE
 8006630:	bf00      	nop
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	691b      	ldr	r3, [r3, #16]
 8006636:	2b00      	cmp	r3, #0
 8006638:	dafb      	bge.n	8006632 <reset_core+0x56>
}
 800663a:	bf00      	nop
 800663c:	bf00      	nop
 800663e:	370c      	adds	r7, #12
 8006640:	46bd      	mov	sp, r7
 8006642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006646:	4770      	bx	lr

08006648 <phy_fs_init>:

static void phy_fs_init(dwc2_regs_t* dwc2) {
 8006648:	b580      	push	{r7, lr}
 800664a:	b084      	sub	sp, #16
 800664c:	af00      	add	r7, sp, #0
 800664e:	6078      	str	r0, [r7, #4]
  TU_LOG(DWC2_COMMON_DEBUG, "Fullspeed PHY init\r\n");

  uint32_t gusbcfg = dwc2->gusbcfg;
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	68db      	ldr	r3, [r3, #12]
 8006654:	60fb      	str	r3, [r7, #12]

  // Select FS PHY
  gusbcfg |= GUSBCFG_PHYSEL;
 8006656:	68fb      	ldr	r3, [r7, #12]
 8006658:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800665c:	60fb      	str	r3, [r7, #12]
  dwc2->gusbcfg = gusbcfg;
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	68fa      	ldr	r2, [r7, #12]
 8006662:	60da      	str	r2, [r3, #12]

  // MCU specific PHY init before reset
  dwc2_phy_init(dwc2, GHWCFG2_HSPHY_NOT_SUPPORTED);
 8006664:	2100      	movs	r1, #0
 8006666:	6878      	ldr	r0, [r7, #4]
 8006668:	f7ff ff18 	bl	800649c <dwc2_phy_init>

  // Reset core after selecting PHY
  reset_core(dwc2);
 800666c:	6878      	ldr	r0, [r7, #4]
 800666e:	f7ff ffb5 	bl	80065dc <reset_core>

  // USB turnaround time is critical for certification where long cables and 5-Hubs are used.
  // So if you need the AHB to run at less than 30 MHz, and if USB turnaround time is not critical,
  // these bits can be programmed to a larger value. Default is 5
  gusbcfg &= ~GUSBCFG_TRDT_Msk;
 8006672:	68fb      	ldr	r3, [r7, #12]
 8006674:	f423 5370 	bic.w	r3, r3, #15360	@ 0x3c00
 8006678:	60fb      	str	r3, [r7, #12]
  gusbcfg |= 5u << GUSBCFG_TRDT_Pos;
 800667a:	68fb      	ldr	r3, [r7, #12]
 800667c:	f443 53a0 	orr.w	r3, r3, #5120	@ 0x1400
 8006680:	60fb      	str	r3, [r7, #12]
  dwc2->gusbcfg = gusbcfg;
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	68fa      	ldr	r2, [r7, #12]
 8006686:	60da      	str	r2, [r3, #12]

  // MCU specific PHY update post reset
  dwc2_phy_update(dwc2, GHWCFG2_HSPHY_NOT_SUPPORTED);
 8006688:	2100      	movs	r1, #0
 800668a:	6878      	ldr	r0, [r7, #4]
 800668c:	f7ff ff30 	bl	80064f0 <dwc2_phy_update>
}
 8006690:	bf00      	nop
 8006692:	3710      	adds	r7, #16
 8006694:	46bd      	mov	sp, r7
 8006696:	bd80      	pop	{r7, pc}

08006698 <phy_hs_init>:

static void phy_hs_init(dwc2_regs_t* dwc2) {
 8006698:	b580      	push	{r7, lr}
 800669a:	b086      	sub	sp, #24
 800669c:	af00      	add	r7, sp, #0
 800669e:	6078      	str	r0, [r7, #4]
  uint32_t gusbcfg = dwc2->gusbcfg;
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	68db      	ldr	r3, [r3, #12]
 80066a4:	617b      	str	r3, [r7, #20]
  const dwc2_ghwcfg2_t ghwcfg2 = {.value = dwc2->ghwcfg2};
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80066aa:	613b      	str	r3, [r7, #16]
  const dwc2_ghwcfg4_t ghwcfg4 = {.value = dwc2->ghwcfg4};
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80066b0:	60fb      	str	r3, [r7, #12]

  // De-select FS PHY
  gusbcfg &= ~GUSBCFG_PHYSEL;
 80066b2:	697b      	ldr	r3, [r7, #20]
 80066b4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80066b8:	617b      	str	r3, [r7, #20]

  if (ghwcfg2.hs_phy_type == GHWCFG2_HSPHY_ULPI) {
 80066ba:	7c3b      	ldrb	r3, [r7, #16]
 80066bc:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80066c0:	b2db      	uxtb	r3, r3
 80066c2:	2b80      	cmp	r3, #128	@ 0x80
 80066c4:	d114      	bne.n	80066f0 <phy_hs_init+0x58>
    TU_LOG(DWC2_COMMON_DEBUG, "Highspeed ULPI PHY init\r\n");

    // Select ULPI PHY (external)
    gusbcfg |= GUSBCFG_ULPI_UTMI_SEL;
 80066c6:	697b      	ldr	r3, [r7, #20]
 80066c8:	f043 0310 	orr.w	r3, r3, #16
 80066cc:	617b      	str	r3, [r7, #20]

    // ULPI is always 8-bit interface
    gusbcfg &= ~GUSBCFG_PHYIF16;
 80066ce:	697b      	ldr	r3, [r7, #20]
 80066d0:	f023 0308 	bic.w	r3, r3, #8
 80066d4:	617b      	str	r3, [r7, #20]

    // ULPI select single data rate
    gusbcfg &= ~GUSBCFG_DDRSEL;
 80066d6:	697b      	ldr	r3, [r7, #20]
 80066d8:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80066dc:	617b      	str	r3, [r7, #20]

    // default internal VBUS Indicator and Drive
    gusbcfg &= ~(GUSBCFG_ULPIEVBUSD | GUSBCFG_ULPIEVBUSI);
 80066de:	697b      	ldr	r3, [r7, #20]
 80066e0:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 80066e4:	617b      	str	r3, [r7, #20]

    // Disable FS/LS ULPI
    gusbcfg &= ~(GUSBCFG_ULPIFSLS | GUSBCFG_ULPICSM);
 80066e6:	697b      	ldr	r3, [r7, #20]
 80066e8:	f423 2320 	bic.w	r3, r3, #655360	@ 0xa0000
 80066ec:	617b      	str	r3, [r7, #20]
 80066ee:	e012      	b.n	8006716 <phy_hs_init+0x7e>
  } else {
    TU_LOG(DWC2_COMMON_DEBUG, "Highspeed UTMI+ PHY init\r\n");

    // Select UTMI+ PHY (internal)
    gusbcfg &= ~GUSBCFG_ULPI_UTMI_SEL;
 80066f0:	697b      	ldr	r3, [r7, #20]
 80066f2:	f023 0310 	bic.w	r3, r3, #16
 80066f6:	617b      	str	r3, [r7, #20]

    // Set 16-bit interface if supported
    if (ghwcfg4.phy_data_width) {
 80066f8:	7b7b      	ldrb	r3, [r7, #13]
 80066fa:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80066fe:	b2db      	uxtb	r3, r3
 8006700:	2b00      	cmp	r3, #0
 8006702:	d004      	beq.n	800670e <phy_hs_init+0x76>
      #if CFG_TUSB_MCU != OPT_MCU_AT32F402_405 // at32f402_405 does not actually support 16-bit
      gusbcfg |= GUSBCFG_PHYIF16; // 16 bit
 8006704:	697b      	ldr	r3, [r7, #20]
 8006706:	f043 0308 	orr.w	r3, r3, #8
 800670a:	617b      	str	r3, [r7, #20]
 800670c:	e003      	b.n	8006716 <phy_hs_init+0x7e>
      #endif
    } else {
      gusbcfg &= ~GUSBCFG_PHYIF16; // 8 bit
 800670e:	697b      	ldr	r3, [r7, #20]
 8006710:	f023 0308 	bic.w	r3, r3, #8
 8006714:	617b      	str	r3, [r7, #20]
    }
  }

  // Apply config
  dwc2->gusbcfg = gusbcfg;
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	697a      	ldr	r2, [r7, #20]
 800671a:	60da      	str	r2, [r3, #12]

  // mcu specific phy init
  dwc2_phy_init(dwc2, ghwcfg2.hs_phy_type);
 800671c:	7c3b      	ldrb	r3, [r7, #16]
 800671e:	f3c3 1381 	ubfx	r3, r3, #6, #2
 8006722:	b2db      	uxtb	r3, r3
 8006724:	4619      	mov	r1, r3
 8006726:	6878      	ldr	r0, [r7, #4]
 8006728:	f7ff feb8 	bl	800649c <dwc2_phy_init>

  // Reset core after selecting PHY
  reset_core(dwc2);
 800672c:	6878      	ldr	r0, [r7, #4]
 800672e:	f7ff ff55 	bl	80065dc <reset_core>

  // Set turn-around, must after core reset otherwise it will be clear
  // - 9 if using 8-bit PHY interface
  // - 5 if using 16-bit PHY interface
  gusbcfg &= ~GUSBCFG_TRDT_Msk;
 8006732:	697b      	ldr	r3, [r7, #20]
 8006734:	f423 5370 	bic.w	r3, r3, #15360	@ 0x3c00
 8006738:	617b      	str	r3, [r7, #20]

#if CFG_TUSB_MCU == OPT_MCU_AT32F402_405 // at32f402_405 does not actually support 16-bit
  gusbcfg |= 9u << GUSBCFG_TRDT_Pos;
#else
  gusbcfg |= (dwc2->ghwcfg4_bm.phy_data_width ? 5u : 9u) << GUSBCFG_TRDT_Pos;
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800673e:	f3c3 3381 	ubfx	r3, r3, #14, #2
 8006742:	b2db      	uxtb	r3, r3
 8006744:	2b00      	cmp	r3, #0
 8006746:	d002      	beq.n	800674e <phy_hs_init+0xb6>
 8006748:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 800674c:	e001      	b.n	8006752 <phy_hs_init+0xba>
 800674e:	f44f 5310 	mov.w	r3, #9216	@ 0x2400
 8006752:	697a      	ldr	r2, [r7, #20]
 8006754:	4313      	orrs	r3, r2
 8006756:	617b      	str	r3, [r7, #20]
#endif

  dwc2->gusbcfg = gusbcfg;
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	697a      	ldr	r2, [r7, #20]
 800675c:	60da      	str	r2, [r3, #12]

  // MCU specific PHY update post reset
  dwc2_phy_update(dwc2, ghwcfg2.hs_phy_type);
 800675e:	7c3b      	ldrb	r3, [r7, #16]
 8006760:	f3c3 1381 	ubfx	r3, r3, #6, #2
 8006764:	b2db      	uxtb	r3, r3
 8006766:	4619      	mov	r1, r3
 8006768:	6878      	ldr	r0, [r7, #4]
 800676a:	f7ff fec1 	bl	80064f0 <dwc2_phy_update>
}
 800676e:	bf00      	nop
 8006770:	3718      	adds	r7, #24
 8006772:	46bd      	mov	sp, r7
 8006774:	bd80      	pop	{r7, pc}
	...

08006778 <check_dwc2>:

static bool check_dwc2(dwc2_regs_t* dwc2) {
 8006778:	b480      	push	{r7}
 800677a:	b085      	sub	sp, #20
 800677c:	af00      	add	r7, sp, #0
 800677e:	6078      	str	r0, [r7, #4]

  // For some reason: GD32VF103 gsnpsid and all hwcfg register are always zero (skip it)
  (void)dwc2;
#if !TU_CHECK_MCU(OPT_MCU_GD32VF103)
  enum { GSNPSID_ID_MASK = TU_GENMASK(31, 16) };
  const uint32_t gsnpsid = dwc2->gsnpsid & GSNPSID_ID_MASK;
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006784:	0c1b      	lsrs	r3, r3, #16
 8006786:	041b      	lsls	r3, r3, #16
 8006788:	60fb      	str	r3, [r7, #12]
  TU_ASSERT(gsnpsid == DWC2_OTG_ID || gsnpsid == DWC2_FS_IOT_ID || gsnpsid == DWC2_HS_IOT_ID);
 800678a:	68fb      	ldr	r3, [r7, #12]
 800678c:	4a0e      	ldr	r2, [pc, #56]	@ (80067c8 <check_dwc2+0x50>)
 800678e:	4293      	cmp	r3, r2
 8006790:	d012      	beq.n	80067b8 <check_dwc2+0x40>
 8006792:	68fb      	ldr	r3, [r7, #12]
 8006794:	4a0d      	ldr	r2, [pc, #52]	@ (80067cc <check_dwc2+0x54>)
 8006796:	4293      	cmp	r3, r2
 8006798:	d00e      	beq.n	80067b8 <check_dwc2+0x40>
 800679a:	68fb      	ldr	r3, [r7, #12]
 800679c:	4a0c      	ldr	r2, [pc, #48]	@ (80067d0 <check_dwc2+0x58>)
 800679e:	4293      	cmp	r3, r2
 80067a0:	d00a      	beq.n	80067b8 <check_dwc2+0x40>
 80067a2:	4b0c      	ldr	r3, [pc, #48]	@ (80067d4 <check_dwc2+0x5c>)
 80067a4:	60bb      	str	r3, [r7, #8]
 80067a6:	68bb      	ldr	r3, [r7, #8]
 80067a8:	681b      	ldr	r3, [r3, #0]
 80067aa:	f003 0301 	and.w	r3, r3, #1
 80067ae:	2b00      	cmp	r3, #0
 80067b0:	d000      	beq.n	80067b4 <check_dwc2+0x3c>
 80067b2:	be00      	bkpt	0x0000
 80067b4:	2300      	movs	r3, #0
 80067b6:	e000      	b.n	80067ba <check_dwc2+0x42>
#endif

  return true;
 80067b8:	2301      	movs	r3, #1
}
 80067ba:	4618      	mov	r0, r3
 80067bc:	3714      	adds	r7, #20
 80067be:	46bd      	mov	sp, r7
 80067c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067c4:	4770      	bx	lr
 80067c6:	bf00      	nop
 80067c8:	4f540000 	.word	0x4f540000
 80067cc:	55310000 	.word	0x55310000
 80067d0:	55320000 	.word	0x55320000
 80067d4:	e000edf0 	.word	0xe000edf0

080067d8 <dwc2_core_is_highspeed>:

//--------------------------------------------------------------------
//
//--------------------------------------------------------------------
bool dwc2_core_is_highspeed(dwc2_regs_t* dwc2, tusb_role_t role) {
 80067d8:	b480      	push	{r7}
 80067da:	b085      	sub	sp, #20
 80067dc:	af00      	add	r7, sp, #0
 80067de:	6078      	str	r0, [r7, #4]
 80067e0:	460b      	mov	r3, r1
 80067e2:	70fb      	strb	r3, [r7, #3]
  if (role == TUSB_ROLE_DEVICE && !TUD_OPT_HIGH_SPEED) {
    return false;
  }
#endif
#if CFG_TUH_ENABLED
  if (role == TUSB_ROLE_HOST && !TUH_OPT_HIGH_SPEED) {
 80067e4:	78fb      	ldrb	r3, [r7, #3]
 80067e6:	2b02      	cmp	r3, #2
 80067e8:	d101      	bne.n	80067ee <dwc2_core_is_highspeed+0x16>
    return false;
 80067ea:	2300      	movs	r3, #0
 80067ec:	e00b      	b.n	8006806 <dwc2_core_is_highspeed+0x2e>
  }
#endif

  const dwc2_ghwcfg2_t ghwcfg2 = {.value = dwc2->ghwcfg2};
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80067f2:	60fb      	str	r3, [r7, #12]
  return ghwcfg2.hs_phy_type != GHWCFG2_HSPHY_NOT_SUPPORTED;
 80067f4:	7b3b      	ldrb	r3, [r7, #12]
 80067f6:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80067fa:	b2db      	uxtb	r3, r3
 80067fc:	2b00      	cmp	r3, #0
 80067fe:	bf14      	ite	ne
 8006800:	2301      	movne	r3, #1
 8006802:	2300      	moveq	r3, #0
 8006804:	b2db      	uxtb	r3, r3
}
 8006806:	4618      	mov	r0, r3
 8006808:	3714      	adds	r7, #20
 800680a:	46bd      	mov	sp, r7
 800680c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006810:	4770      	bx	lr
	...

08006814 <dwc2_core_init>:
 * - Dedicated FS PHY is internal with clock 48Mhz.
 *
 * In addition, UTMI+/ULPI can be shared to run at fullspeed mode with 48Mhz
 *
*/
bool dwc2_core_init(uint8_t rhport, bool is_highspeed, bool is_dma) {
 8006814:	b580      	push	{r7, lr}
 8006816:	b088      	sub	sp, #32
 8006818:	af00      	add	r7, sp, #0
 800681a:	4603      	mov	r3, r0
 800681c:	71fb      	strb	r3, [r7, #7]
 800681e:	460b      	mov	r3, r1
 8006820:	71bb      	strb	r3, [r7, #6]
 8006822:	4613      	mov	r3, r2
 8006824:	717b      	strb	r3, [r7, #5]
 8006826:	79fb      	ldrb	r3, [r7, #7]
 8006828:	75fb      	strb	r3, [r7, #23]

//--------------------------------------------------------------------+
// Core/Controller
//--------------------------------------------------------------------+
TU_ATTR_ALWAYS_INLINE static inline dwc2_regs_t* DWC2_REG(uint8_t rhport) {
  if (rhport >= DWC2_CONTROLLER_COUNT) {
 800682a:	7dfb      	ldrb	r3, [r7, #23]
 800682c:	2b01      	cmp	r3, #1
 800682e:	d901      	bls.n	8006834 <dwc2_core_init+0x20>
    // user mis-configured, ignore and use first controller
    rhport = 0;
 8006830:	2300      	movs	r3, #0
 8006832:	75fb      	strb	r3, [r7, #23]
  }
  return (dwc2_regs_t*)_dwc2_controller[rhport].reg_base;
 8006834:	7dfb      	ldrb	r3, [r7, #23]
 8006836:	4a3b      	ldr	r2, [pc, #236]	@ (8006924 <dwc2_core_init+0x110>)
 8006838:	011b      	lsls	r3, r3, #4
 800683a:	4413      	add	r3, r2
 800683c:	681b      	ldr	r3, [r3, #0]
  dwc2_regs_t* dwc2 = DWC2_REG(rhport);
 800683e:	61fb      	str	r3, [r7, #28]

  // Check Synopsys ID register, failed if controller clock/power is not enabled
  TU_ASSERT(check_dwc2(dwc2));
 8006840:	69f8      	ldr	r0, [r7, #28]
 8006842:	f7ff ff99 	bl	8006778 <check_dwc2>
 8006846:	4603      	mov	r3, r0
 8006848:	f083 0301 	eor.w	r3, r3, #1
 800684c:	b2db      	uxtb	r3, r3
 800684e:	2b00      	cmp	r3, #0
 8006850:	d00a      	beq.n	8006868 <dwc2_core_init+0x54>
 8006852:	4b35      	ldr	r3, [pc, #212]	@ (8006928 <dwc2_core_init+0x114>)
 8006854:	61bb      	str	r3, [r7, #24]
 8006856:	69bb      	ldr	r3, [r7, #24]
 8006858:	681b      	ldr	r3, [r3, #0]
 800685a:	f003 0301 	and.w	r3, r3, #1
 800685e:	2b00      	cmp	r3, #0
 8006860:	d000      	beq.n	8006864 <dwc2_core_init+0x50>
 8006862:	be00      	bkpt	0x0000
 8006864:	2300      	movs	r3, #0
 8006866:	e058      	b.n	800691a <dwc2_core_init+0x106>

  // disable global interrupt
  dwc2->gahbcfg &= ~GAHBCFG_GINT;
 8006868:	69fb      	ldr	r3, [r7, #28]
 800686a:	689b      	ldr	r3, [r3, #8]
 800686c:	f023 0201 	bic.w	r2, r3, #1
 8006870:	69fb      	ldr	r3, [r7, #28]
 8006872:	609a      	str	r2, [r3, #8]

  if (is_highspeed) {
 8006874:	79bb      	ldrb	r3, [r7, #6]
 8006876:	2b00      	cmp	r3, #0
 8006878:	d003      	beq.n	8006882 <dwc2_core_init+0x6e>
    phy_hs_init(dwc2);
 800687a:	69f8      	ldr	r0, [r7, #28]
 800687c:	f7ff ff0c 	bl	8006698 <phy_hs_init>
 8006880:	e002      	b.n	8006888 <dwc2_core_init+0x74>
  } else {
    phy_fs_init(dwc2);
 8006882:	69f8      	ldr	r0, [r7, #28]
 8006884:	f7ff fee0 	bl	8006648 <phy_fs_init>
   * this field is added to the high/full speed interpacket timeout
   * duration in the core to account for any additional delays
   * introduced by the PHY. This can be required, because the delay
   * introduced by the PHY in generating the linestate condition
   * can vary from one PHY to another. */
  dwc2->gusbcfg |= (7ul << GUSBCFG_TOCAL_Pos);
 8006888:	69fb      	ldr	r3, [r7, #28]
 800688a:	68db      	ldr	r3, [r3, #12]
 800688c:	f043 0207 	orr.w	r2, r3, #7
 8006890:	69fb      	ldr	r3, [r7, #28]
 8006892:	60da      	str	r2, [r3, #12]

  // Enable PHY clock TODO stop/gate clock when suspended mode
  dwc2->pcgcctl &= ~(PCGCCTL_STOPPCLK | PCGCCTL_GATEHCLK | PCGCCTL_PWRCLMP | PCGCCTL_RSTPDWNMODULE);
 8006894:	69fb      	ldr	r3, [r7, #28]
 8006896:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	@ 0xe00
 800689a:	f023 020f 	bic.w	r2, r3, #15
 800689e:	69fb      	ldr	r3, [r7, #28]
 80068a0:	f8c3 2e00 	str.w	r2, [r3, #3584]	@ 0xe00
 80068a4:	69fb      	ldr	r3, [r7, #28]
 80068a6:	60fb      	str	r3, [r7, #12]
 80068a8:	2310      	movs	r3, #16
 80068aa:	72fb      	strb	r3, [r7, #11]
//--------------------------------------------------------------------+
// DFIFO
//--------------------------------------------------------------------+
TU_ATTR_ALWAYS_INLINE static inline void dfifo_flush_tx(dwc2_regs_t* dwc2, uint8_t fnum) {
  // flush TX fifo and wait for it cleared
  dwc2->grstctl = GRSTCTL_TXFFLSH | (fnum << GRSTCTL_TXFNUM_Pos);
 80068ac:	7afb      	ldrb	r3, [r7, #11]
 80068ae:	019b      	lsls	r3, r3, #6
 80068b0:	f043 0220 	orr.w	r2, r3, #32
 80068b4:	68fb      	ldr	r3, [r7, #12]
 80068b6:	611a      	str	r2, [r3, #16]
  while (dwc2->grstctl & GRSTCTL_TXFFLSH_Msk) {}
 80068b8:	bf00      	nop
 80068ba:	68fb      	ldr	r3, [r7, #12]
 80068bc:	691b      	ldr	r3, [r3, #16]
 80068be:	f003 0320 	and.w	r3, r3, #32
 80068c2:	2b00      	cmp	r3, #0
 80068c4:	d1f9      	bne.n	80068ba <dwc2_core_init+0xa6>
}
 80068c6:	bf00      	nop
 80068c8:	69fb      	ldr	r3, [r7, #28]
 80068ca:	613b      	str	r3, [r7, #16]

TU_ATTR_ALWAYS_INLINE static inline void dfifo_flush_rx(dwc2_regs_t* dwc2) {
  // flush RX fifo and wait for it cleared
  dwc2->grstctl = GRSTCTL_RXFFLSH;
 80068cc:	693b      	ldr	r3, [r7, #16]
 80068ce:	2210      	movs	r2, #16
 80068d0:	611a      	str	r2, [r3, #16]
  while (dwc2->grstctl & GRSTCTL_RXFFLSH_Msk) {}
 80068d2:	bf00      	nop
 80068d4:	693b      	ldr	r3, [r7, #16]
 80068d6:	691b      	ldr	r3, [r3, #16]
 80068d8:	f003 0310 	and.w	r3, r3, #16
 80068dc:	2b00      	cmp	r3, #0
 80068de:	d1f9      	bne.n	80068d4 <dwc2_core_init+0xc0>
}
 80068e0:	bf00      	nop

  dfifo_flush_tx(dwc2, 0x10); // all tx fifo
  dfifo_flush_rx(dwc2);

  // Clear pending and disable all interrupts
  dwc2->gintsts = 0xFFFFFFFFU;
 80068e2:	69fb      	ldr	r3, [r7, #28]
 80068e4:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80068e8:	615a      	str	r2, [r3, #20]
  dwc2->gotgint = 0xFFFFFFFFU;
 80068ea:	69fb      	ldr	r3, [r7, #28]
 80068ec:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80068f0:	605a      	str	r2, [r3, #4]
  dwc2->gintmsk = 0;
 80068f2:	69fb      	ldr	r3, [r7, #28]
 80068f4:	2200      	movs	r2, #0
 80068f6:	619a      	str	r2, [r3, #24]

  TU_LOG(DWC2_COMMON_DEBUG, "DMA = %u\r\n", is_dma);

  if (is_dma) {
 80068f8:	797b      	ldrb	r3, [r7, #5]
 80068fa:	2b00      	cmp	r3, #0
 80068fc:	d006      	beq.n	800690c <dwc2_core_init+0xf8>
    // DMA seems to be only settable after a core reset, and not possible to switch on-the-fly
    dwc2->gahbcfg |= GAHBCFG_DMAEN | GAHBCFG_HBSTLEN_2;
 80068fe:	69fb      	ldr	r3, [r7, #28]
 8006900:	689b      	ldr	r3, [r3, #8]
 8006902:	f043 0226 	orr.w	r2, r3, #38	@ 0x26
 8006906:	69fb      	ldr	r3, [r7, #28]
 8006908:	609a      	str	r2, [r3, #8]
 800690a:	e005      	b.n	8006918 <dwc2_core_init+0x104>
  } else {
    dwc2->gintmsk |= GINTSTS_RXFLVL;
 800690c:	69fb      	ldr	r3, [r7, #28]
 800690e:	699b      	ldr	r3, [r3, #24]
 8006910:	f043 0210 	orr.w	r2, r3, #16
 8006914:	69fb      	ldr	r3, [r7, #28]
 8006916:	619a      	str	r2, [r3, #24]
  }

  return true;
 8006918:	2301      	movs	r3, #1
}
 800691a:	4618      	mov	r0, r3
 800691c:	3720      	adds	r7, #32
 800691e:	46bd      	mov	sp, r7
 8006920:	bd80      	pop	{r7, pc}
 8006922:	bf00      	nop
 8006924:	08008110 	.word	0x08008110
 8006928:	e000edf0 	.word	0xe000edf0

0800692c <__NVIC_EnableIRQ>:
{
 800692c:	b480      	push	{r7}
 800692e:	b083      	sub	sp, #12
 8006930:	af00      	add	r7, sp, #0
 8006932:	4603      	mov	r3, r0
 8006934:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006936:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800693a:	2b00      	cmp	r3, #0
 800693c:	db0b      	blt.n	8006956 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800693e:	79fb      	ldrb	r3, [r7, #7]
 8006940:	f003 021f 	and.w	r2, r3, #31
 8006944:	4907      	ldr	r1, [pc, #28]	@ (8006964 <__NVIC_EnableIRQ+0x38>)
 8006946:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800694a:	095b      	lsrs	r3, r3, #5
 800694c:	2001      	movs	r0, #1
 800694e:	fa00 f202 	lsl.w	r2, r0, r2
 8006952:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8006956:	bf00      	nop
 8006958:	370c      	adds	r7, #12
 800695a:	46bd      	mov	sp, r7
 800695c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006960:	4770      	bx	lr
 8006962:	bf00      	nop
 8006964:	e000e100 	.word	0xe000e100

08006968 <__NVIC_DisableIRQ>:
{
 8006968:	b480      	push	{r7}
 800696a:	b083      	sub	sp, #12
 800696c:	af00      	add	r7, sp, #0
 800696e:	4603      	mov	r3, r0
 8006970:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006972:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006976:	2b00      	cmp	r3, #0
 8006978:	db12      	blt.n	80069a0 <__NVIC_DisableIRQ+0x38>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800697a:	79fb      	ldrb	r3, [r7, #7]
 800697c:	f003 021f 	and.w	r2, r3, #31
 8006980:	490a      	ldr	r1, [pc, #40]	@ (80069ac <__NVIC_DisableIRQ+0x44>)
 8006982:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006986:	095b      	lsrs	r3, r3, #5
 8006988:	2001      	movs	r0, #1
 800698a:	fa00 f202 	lsl.w	r2, r0, r2
 800698e:	3320      	adds	r3, #32
 8006990:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8006994:	f3bf 8f4f 	dsb	sy
}
 8006998:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800699a:	f3bf 8f6f 	isb	sy
}
 800699e:	bf00      	nop
}
 80069a0:	bf00      	nop
 80069a2:	370c      	adds	r7, #12
 80069a4:	46bd      	mov	sp, r7
 80069a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069aa:	4770      	bx	lr
 80069ac:	e000e100 	.word	0xe000e100

080069b0 <dfifo_host_init>:
 * - At least largest-EPsize/4, recommended x2
 *
 * TX periodic (PTX)
 * - At least largest-EPsize*MulCount/4 (MulCount up to 3 for high-bandwidth ISO/interrupt)
*/
static void dfifo_host_init(uint8_t rhport) {
 80069b0:	b580      	push	{r7, lr}
 80069b2:	b092      	sub	sp, #72	@ 0x48
 80069b4:	af00      	add	r7, sp, #0
 80069b6:	4603      	mov	r3, r0
 80069b8:	71fb      	strb	r3, [r7, #7]
  const dwc2_controller_t* dwc2_controller = &_dwc2_controller[rhport];
 80069ba:	79fb      	ldrb	r3, [r7, #7]
 80069bc:	011b      	lsls	r3, r3, #4
 80069be:	4a53      	ldr	r2, [pc, #332]	@ (8006b0c <dfifo_host_init+0x15c>)
 80069c0:	4413      	add	r3, r2
 80069c2:	643b      	str	r3, [r7, #64]	@ 0x40
 80069c4:	79fb      	ldrb	r3, [r7, #7]
 80069c6:	77fb      	strb	r3, [r7, #31]
  if (rhport >= DWC2_CONTROLLER_COUNT) {
 80069c8:	7ffb      	ldrb	r3, [r7, #31]
 80069ca:	2b01      	cmp	r3, #1
 80069cc:	d901      	bls.n	80069d2 <dfifo_host_init+0x22>
    rhport = 0;
 80069ce:	2300      	movs	r3, #0
 80069d0:	77fb      	strb	r3, [r7, #31]
  return (dwc2_regs_t*)_dwc2_controller[rhport].reg_base;
 80069d2:	7ffb      	ldrb	r3, [r7, #31]
 80069d4:	4a4d      	ldr	r2, [pc, #308]	@ (8006b0c <dfifo_host_init+0x15c>)
 80069d6:	011b      	lsls	r3, r3, #4
 80069d8:	4413      	add	r3, r2
 80069da:	681b      	ldr	r3, [r3, #0]
  dwc2_regs_t* dwc2 = DWC2_REG(rhport);
 80069dc:	63fb      	str	r3, [r7, #60]	@ 0x3c
  const dwc2_ghwcfg2_t ghwcfg2 = {.value = dwc2->ghwcfg2};
 80069de:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80069e0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80069e2:	613b      	str	r3, [r7, #16]
 80069e4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80069e6:	623b      	str	r3, [r7, #32]
  const dwc2_ghwcfg2_t ghwcfg2 = {.value = dwc2->ghwcfg2};
 80069e8:	6a3b      	ldr	r3, [r7, #32]
 80069ea:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80069ec:	60fb      	str	r3, [r7, #12]
  return CFG_TUH_DWC2_DMA_ENABLE && ghwcfg2.arch == GHWCFG2_ARCH_INTERNAL_DMA;
 80069ee:	2300      	movs	r3, #0

  // Scatter/Gather DMA mode is not yet supported. Buffer DMA only need 1 words per channel
  const bool is_dma = dma_host_enabled(dwc2);
 80069f0:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
  uint16_t dfifo_top = dwc2_controller->ep_fifo_size/4;
 80069f4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80069f6:	68db      	ldr	r3, [r3, #12]
 80069f8:	089b      	lsrs	r3, r3, #2
 80069fa:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
  if (is_dma) {
 80069fe:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
 8006a02:	2b00      	cmp	r3, #0
 8006a04:	d009      	beq.n	8006a1a <dfifo_host_init+0x6a>
    dfifo_top -= ghwcfg2.num_host_ch;
 8006a06:	693b      	ldr	r3, [r7, #16]
 8006a08:	f3c3 3383 	ubfx	r3, r3, #14, #4
 8006a0c:	b2db      	uxtb	r3, r3
 8006a0e:	461a      	mov	r2, r3
 8006a10:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8006a14:	1a9b      	subs	r3, r3, r2
 8006a16:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
  }

  // fixed allocation for now, improve later:
    // - ptx_largest is limited to 256 for FS since most FS core only has 1024 bytes total
  bool is_highspeed = dwc2_core_is_highspeed(dwc2, TUSB_ROLE_HOST);
 8006a1a:	2102      	movs	r1, #2
 8006a1c:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8006a1e:	f7ff fedb 	bl	80067d8 <dwc2_core_is_highspeed>
 8006a22:	4603      	mov	r3, r0
 8006a24:	f887 303a 	strb.w	r3, [r7, #58]	@ 0x3a
  uint32_t nptx_largest = is_highspeed ? TUSB_EPSIZE_BULK_HS/4 : TUSB_EPSIZE_BULK_FS/4;
 8006a28:	f897 303a 	ldrb.w	r3, [r7, #58]	@ 0x3a
 8006a2c:	2b00      	cmp	r3, #0
 8006a2e:	d001      	beq.n	8006a34 <dfifo_host_init+0x84>
 8006a30:	2380      	movs	r3, #128	@ 0x80
 8006a32:	e000      	b.n	8006a36 <dfifo_host_init+0x86>
 8006a34:	2310      	movs	r3, #16
 8006a36:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t ptx_largest = is_highspeed ? TUSB_EPSIZE_ISO_HS_MAX/4 : 256/4;
 8006a38:	f897 303a 	ldrb.w	r3, [r7, #58]	@ 0x3a
 8006a3c:	2b00      	cmp	r3, #0
 8006a3e:	d002      	beq.n	8006a46 <dfifo_host_init+0x96>
 8006a40:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8006a44:	e000      	b.n	8006a48 <dfifo_host_init+0x98>
 8006a46:	2340      	movs	r3, #64	@ 0x40
 8006a48:	633b      	str	r3, [r7, #48]	@ 0x30

  uint16_t nptxfsiz = 2 * nptx_largest;
 8006a4a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006a4c:	b29b      	uxth	r3, r3
 8006a4e:	005b      	lsls	r3, r3, #1
 8006a50:	85fb      	strh	r3, [r7, #46]	@ 0x2e
  uint16_t rxfsiz = 2 * (ptx_largest + 2) + ghwcfg2.num_host_ch;
 8006a52:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006a54:	3302      	adds	r3, #2
 8006a56:	b29b      	uxth	r3, r3
 8006a58:	005b      	lsls	r3, r3, #1
 8006a5a:	b29b      	uxth	r3, r3
 8006a5c:	693a      	ldr	r2, [r7, #16]
 8006a5e:	f3c2 3283 	ubfx	r2, r2, #14, #4
 8006a62:	b2d2      	uxtb	r2, r2
 8006a64:	4413      	add	r3, r2
 8006a66:	85bb      	strh	r3, [r7, #44]	@ 0x2c
  TU_ASSERT(dfifo_top >= (nptxfsiz + rxfsiz),);
 8006a68:	f8b7 2046 	ldrh.w	r2, [r7, #70]	@ 0x46
 8006a6c:	8df9      	ldrh	r1, [r7, #46]	@ 0x2e
 8006a6e:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8006a70:	440b      	add	r3, r1
 8006a72:	429a      	cmp	r2, r3
 8006a74:	da09      	bge.n	8006a8a <dfifo_host_init+0xda>
 8006a76:	4b26      	ldr	r3, [pc, #152]	@ (8006b10 <dfifo_host_init+0x160>)
 8006a78:	627b      	str	r3, [r7, #36]	@ 0x24
 8006a7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a7c:	681b      	ldr	r3, [r3, #0]
 8006a7e:	f003 0301 	and.w	r3, r3, #1
 8006a82:	2b00      	cmp	r3, #0
 8006a84:	d03d      	beq.n	8006b02 <dfifo_host_init+0x152>
 8006a86:	be00      	bkpt	0x0000
 8006a88:	e03b      	b.n	8006b02 <dfifo_host_init+0x152>
  uint16_t ptxfsiz = dfifo_top - (nptxfsiz + rxfsiz);
 8006a8a:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 8006a8c:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8006a8e:	4413      	add	r3, r2
 8006a90:	b29b      	uxth	r3, r3
 8006a92:	f8b7 2046 	ldrh.w	r2, [r7, #70]	@ 0x46
 8006a96:	1ad3      	subs	r3, r2, r3
 8006a98:	857b      	strh	r3, [r7, #42]	@ 0x2a

  dwc2->gdfifocfg = (dfifo_top << GDFIFOCFG_EPINFOBASE_SHIFT) | dfifo_top;
 8006a9a:	f8b7 2046 	ldrh.w	r2, [r7, #70]	@ 0x46
 8006a9e:	4613      	mov	r3, r2
 8006aa0:	041b      	lsls	r3, r3, #16
 8006aa2:	441a      	add	r2, r3
 8006aa4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006aa6:	65da      	str	r2, [r3, #92]	@ 0x5c

  dfifo_top -= rxfsiz;
 8006aa8:	f8b7 2046 	ldrh.w	r2, [r7, #70]	@ 0x46
 8006aac:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8006aae:	1ad3      	subs	r3, r2, r3
 8006ab0:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
  dwc2->grxfsiz = rxfsiz;
 8006ab4:	8dba      	ldrh	r2, [r7, #44]	@ 0x2c
 8006ab6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006ab8:	625a      	str	r2, [r3, #36]	@ 0x24

  dfifo_top -= nptxfsiz;
 8006aba:	f8b7 2046 	ldrh.w	r2, [r7, #70]	@ 0x46
 8006abe:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8006ac0:	1ad3      	subs	r3, r2, r3
 8006ac2:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
 8006ac6:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8006ac8:	833b      	strh	r3, [r7, #24]
 8006aca:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8006ace:	82fb      	strh	r3, [r7, #22]
  return (((uint32_t)high) << 16) | low;
 8006ad0:	8b3b      	ldrh	r3, [r7, #24]
 8006ad2:	041a      	lsls	r2, r3, #16
 8006ad4:	8afb      	ldrh	r3, [r7, #22]
 8006ad6:	431a      	orrs	r2, r3
  dwc2->gnptxfsiz = tu_u32_from_u16(nptxfsiz, dfifo_top);
 8006ad8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006ada:	629a      	str	r2, [r3, #40]	@ 0x28

  dfifo_top -= ptxfsiz;
 8006adc:	f8b7 2046 	ldrh.w	r2, [r7, #70]	@ 0x46
 8006ae0:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8006ae2:	1ad3      	subs	r3, r2, r3
 8006ae4:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
 8006ae8:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8006aea:	83bb      	strh	r3, [r7, #28]
 8006aec:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8006af0:	837b      	strh	r3, [r7, #26]
 8006af2:	8bbb      	ldrh	r3, [r7, #28]
 8006af4:	041a      	lsls	r2, r3, #16
 8006af6:	8b7b      	ldrh	r3, [r7, #26]
 8006af8:	431a      	orrs	r2, r3
  dwc2->hptxfsiz = tu_u32_from_u16(ptxfsiz, dfifo_top);
 8006afa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006afc:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
 8006b00:	e000      	b.n	8006b04 <dfifo_host_init+0x154>
  TU_ASSERT(dfifo_top >= (nptxfsiz + rxfsiz),);
 8006b02:	bf00      	nop
}
 8006b04:	3748      	adds	r7, #72	@ 0x48
 8006b06:	46bd      	mov	sp, r7
 8006b08:	bd80      	pop	{r7, pc}
 8006b0a:	bf00      	nop
 8006b0c:	08008130 	.word	0x08008130
 8006b10:	e000edf0 	.word	0xe000edf0

08006b14 <hcd_init>:

  return true;
}

// Initialize controller to host mode
bool hcd_init(uint8_t rhport, const tusb_rhport_init_t* rh_init) {
 8006b14:	b580      	push	{r7, lr}
 8006b16:	b08a      	sub	sp, #40	@ 0x28
 8006b18:	af00      	add	r7, sp, #0
 8006b1a:	4603      	mov	r3, r0
 8006b1c:	6039      	str	r1, [r7, #0]
 8006b1e:	71fb      	strb	r3, [r7, #7]
 8006b20:	79fb      	ldrb	r3, [r7, #7]
 8006b22:	74fb      	strb	r3, [r7, #19]
  if (rhport >= DWC2_CONTROLLER_COUNT) {
 8006b24:	7cfb      	ldrb	r3, [r7, #19]
 8006b26:	2b01      	cmp	r3, #1
 8006b28:	d901      	bls.n	8006b2e <hcd_init+0x1a>
    rhport = 0;
 8006b2a:	2300      	movs	r3, #0
 8006b2c:	74fb      	strb	r3, [r7, #19]
  return (dwc2_regs_t*)_dwc2_controller[rhport].reg_base;
 8006b2e:	7cfb      	ldrb	r3, [r7, #19]
 8006b30:	4a3e      	ldr	r2, [pc, #248]	@ (8006c2c <hcd_init+0x118>)
 8006b32:	011b      	lsls	r3, r3, #4
 8006b34:	4413      	add	r3, r2
 8006b36:	681b      	ldr	r3, [r3, #0]
  (void) rh_init;
  dwc2_regs_t* dwc2 = DWC2_REG(rhport);
 8006b38:	627b      	str	r3, [r7, #36]	@ 0x24

  tu_memclr(&_hcd_data, sizeof(_hcd_data));
 8006b3a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006b3e:	2100      	movs	r1, #0
 8006b40:	483b      	ldr	r0, [pc, #236]	@ (8006c30 <hcd_init+0x11c>)
 8006b42:	f001 fa84 	bl	800804e <memset>

  // Core Initialization
  const bool is_highspeed = dwc2_core_is_highspeed(dwc2, TUSB_ROLE_HOST);
 8006b46:	2102      	movs	r1, #2
 8006b48:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8006b4a:	f7ff fe45 	bl	80067d8 <dwc2_core_is_highspeed>
 8006b4e:	4603      	mov	r3, r0
 8006b50:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006b54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b56:	617b      	str	r3, [r7, #20]
  const dwc2_ghwcfg2_t ghwcfg2 = {.value = dwc2->ghwcfg2};
 8006b58:	697b      	ldr	r3, [r7, #20]
 8006b5a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006b5c:	60fb      	str	r3, [r7, #12]
  return CFG_TUH_DWC2_DMA_ENABLE && ghwcfg2.arch == GHWCFG2_ARCH_INTERNAL_DMA;
 8006b5e:	2300      	movs	r3, #0
  const bool is_dma = dma_host_enabled(dwc2);
 8006b60:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  TU_ASSERT(dwc2_core_init(rhport, is_highspeed, is_dma));
 8006b64:	f897 2022 	ldrb.w	r2, [r7, #34]	@ 0x22
 8006b68:	f897 1023 	ldrb.w	r1, [r7, #35]	@ 0x23
 8006b6c:	79fb      	ldrb	r3, [r7, #7]
 8006b6e:	4618      	mov	r0, r3
 8006b70:	f7ff fe50 	bl	8006814 <dwc2_core_init>
 8006b74:	4603      	mov	r3, r0
 8006b76:	f083 0301 	eor.w	r3, r3, #1
 8006b7a:	b2db      	uxtb	r3, r3
 8006b7c:	2b00      	cmp	r3, #0
 8006b7e:	d00a      	beq.n	8006b96 <hcd_init+0x82>
 8006b80:	4b2c      	ldr	r3, [pc, #176]	@ (8006c34 <hcd_init+0x120>)
 8006b82:	61bb      	str	r3, [r7, #24]
 8006b84:	69bb      	ldr	r3, [r7, #24]
 8006b86:	681b      	ldr	r3, [r3, #0]
 8006b88:	f003 0301 	and.w	r3, r3, #1
 8006b8c:	2b00      	cmp	r3, #0
 8006b8e:	d000      	beq.n	8006b92 <hcd_init+0x7e>
 8006b90:	be00      	bkpt	0x0000
 8006b92:	2300      	movs	r3, #0
 8006b94:	e045      	b.n	8006c22 <hcd_init+0x10e>

  //------------- 3.1 Host Initialization -------------//

  // work at max supported speed
  dwc2->hcfg &= ~HCFG_FSLS_ONLY;
 8006b96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b98:	f8d3 3400 	ldr.w	r3, [r3, #1024]	@ 0x400
 8006b9c:	f023 0204 	bic.w	r2, r3, #4
 8006ba0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ba2:	f8c3 2400 	str.w	r2, [r3, #1024]	@ 0x400

  // Enable HFIR reload
  if (dwc2->gsnpsid >= DWC2_CORE_REV_2_92a) {
 8006ba6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ba8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006baa:	4a23      	ldr	r2, [pc, #140]	@ (8006c38 <hcd_init+0x124>)
 8006bac:	4293      	cmp	r3, r2
 8006bae:	d907      	bls.n	8006bc0 <hcd_init+0xac>
    dwc2->hfir |= HFIR_RELOAD_CTRL;
 8006bb0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006bb2:	f8d3 3404 	ldr.w	r3, [r3, #1028]	@ 0x404
 8006bb6:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8006bba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006bbc:	f8c3 2404 	str.w	r2, [r3, #1028]	@ 0x404
  }

  // force host mode and wait for mode switch
  dwc2->gusbcfg = (dwc2->gusbcfg & ~GUSBCFG_FDMOD) | GUSBCFG_FHMOD;
 8006bc0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006bc2:	68db      	ldr	r3, [r3, #12]
 8006bc4:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 8006bc8:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8006bcc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006bce:	60da      	str	r2, [r3, #12]
#if CFG_TUSB_MCU == OPT_MCU_STM32N6
  // No hardware detection of Vbus B-session is available on the STM32N6
  dwc2->stm32_gccfg &= ~STM32_GCCFG_VBVALOVAL;
#endif
  while ((dwc2->gintsts & GINTSTS_CMOD) != GINTSTS_CMODE_HOST) {}
 8006bd0:	bf00      	nop
 8006bd2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006bd4:	695b      	ldr	r3, [r3, #20]
 8006bd6:	f003 0301 	and.w	r3, r3, #1
 8006bda:	2b01      	cmp	r3, #1
 8006bdc:	d1f9      	bne.n	8006bd2 <hcd_init+0xbe>

  // configure fixed-allocated fifo scheme
  dfifo_host_init(rhport);
 8006bde:	79fb      	ldrb	r3, [r7, #7]
 8006be0:	4618      	mov	r0, r3
 8006be2:	f7ff fee5 	bl	80069b0 <dfifo_host_init>

  dwc2->hprt = HPRT_W1_MASK; // clear all write-1-clear bits
 8006be6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006be8:	22ae      	movs	r2, #174	@ 0xae
 8006bea:	f8c3 2440 	str.w	r2, [r3, #1088]	@ 0x440
  dwc2->hprt = HPRT_POWER; // turn on VBUS
 8006bee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006bf0:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8006bf4:	f8c3 2440 	str.w	r2, [r3, #1088]	@ 0x440

  // Enable required interrupts
  dwc2->gintmsk |= GINTSTS_OTGINT | GINTSTS_CONIDSTSCHNG | GINTSTS_HPRTINT | GINTSTS_HCINT | GINTSTS_DISCINT;
 8006bf8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006bfa:	699b      	ldr	r3, [r3, #24]
 8006bfc:	f043 534c 	orr.w	r3, r3, #855638016	@ 0x33000000
 8006c00:	f043 0304 	orr.w	r3, r3, #4
 8006c04:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006c06:	6193      	str	r3, [r2, #24]

  // NPTX can hold at least 2 packet, change interrupt level to half-empty
  uint32_t gahbcfg = dwc2->gahbcfg & ~GAHBCFG_TX_FIFO_EPMTY_LVL;
 8006c08:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006c0a:	689b      	ldr	r3, [r3, #8]
 8006c0c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006c10:	61fb      	str	r3, [r7, #28]
  gahbcfg |= GAHBCFG_GINT;   // Enable global interrupt
 8006c12:	69fb      	ldr	r3, [r7, #28]
 8006c14:	f043 0301 	orr.w	r3, r3, #1
 8006c18:	61fb      	str	r3, [r7, #28]
  dwc2->gahbcfg = gahbcfg;
 8006c1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006c1c:	69fa      	ldr	r2, [r7, #28]
 8006c1e:	609a      	str	r2, [r3, #8]

  return true;
 8006c20:	2301      	movs	r3, #1
}
 8006c22:	4618      	mov	r0, r3
 8006c24:	3728      	adds	r7, #40	@ 0x28
 8006c26:	46bd      	mov	sp, r7
 8006c28:	bd80      	pop	{r7, pc}
 8006c2a:	bf00      	nop
 8006c2c:	08008130 	.word	0x08008130
 8006c30:	20000bc0 	.word	0x20000bc0
 8006c34:	e000edf0 	.word	0xe000edf0
 8006c38:	4f542929 	.word	0x4f542929

08006c3c <hcd_int_enable>:

// Enable USB interrupt
void hcd_int_enable (uint8_t rhport) {
 8006c3c:	b580      	push	{r7, lr}
 8006c3e:	b084      	sub	sp, #16
 8006c40:	af00      	add	r7, sp, #0
 8006c42:	4603      	mov	r3, r0
 8006c44:	71fb      	strb	r3, [r7, #7]
 8006c46:	79fb      	ldrb	r3, [r7, #7]
 8006c48:	73fb      	strb	r3, [r7, #15]
 8006c4a:	2302      	movs	r3, #2
 8006c4c:	73bb      	strb	r3, [r7, #14]
 8006c4e:	2301      	movs	r3, #1
 8006c50:	737b      	strb	r3, [r7, #13]
  const IRQn_Type irqn = (IRQn_Type) _dwc2_controller[rhport].irqnum;
 8006c52:	7bfb      	ldrb	r3, [r7, #15]
 8006c54:	4a0c      	ldr	r2, [pc, #48]	@ (8006c88 <hcd_int_enable+0x4c>)
 8006c56:	011b      	lsls	r3, r3, #4
 8006c58:	4413      	add	r3, r2
 8006c5a:	3304      	adds	r3, #4
 8006c5c:	681b      	ldr	r3, [r3, #0]
 8006c5e:	733b      	strb	r3, [r7, #12]
  if (enabled) {
 8006c60:	7b7b      	ldrb	r3, [r7, #13]
 8006c62:	2b00      	cmp	r3, #0
 8006c64:	d005      	beq.n	8006c72 <hcd_int_enable+0x36>
    NVIC_EnableIRQ(irqn);
 8006c66:	f997 300c 	ldrsb.w	r3, [r7, #12]
 8006c6a:	4618      	mov	r0, r3
 8006c6c:	f7ff fe5e 	bl	800692c <__NVIC_EnableIRQ>
}
 8006c70:	e004      	b.n	8006c7c <hcd_int_enable+0x40>
    NVIC_DisableIRQ(irqn);
 8006c72:	f997 300c 	ldrsb.w	r3, [r7, #12]
 8006c76:	4618      	mov	r0, r3
 8006c78:	f7ff fe76 	bl	8006968 <__NVIC_DisableIRQ>
}
 8006c7c:	bf00      	nop
  dwc2_int_set(rhport, TUSB_ROLE_HOST, true);
}
 8006c7e:	bf00      	nop
 8006c80:	3710      	adds	r7, #16
 8006c82:	46bd      	mov	sp, r7
 8006c84:	bd80      	pop	{r7, pc}
 8006c86:	bf00      	nop
 8006c88:	08008130 	.word	0x08008130

08006c8c <hcd_int_disable>:

// Disable USB interrupt
void hcd_int_disable(uint8_t rhport) {
 8006c8c:	b580      	push	{r7, lr}
 8006c8e:	b084      	sub	sp, #16
 8006c90:	af00      	add	r7, sp, #0
 8006c92:	4603      	mov	r3, r0
 8006c94:	71fb      	strb	r3, [r7, #7]
 8006c96:	79fb      	ldrb	r3, [r7, #7]
 8006c98:	73fb      	strb	r3, [r7, #15]
 8006c9a:	2302      	movs	r3, #2
 8006c9c:	73bb      	strb	r3, [r7, #14]
 8006c9e:	2300      	movs	r3, #0
 8006ca0:	737b      	strb	r3, [r7, #13]
  const IRQn_Type irqn = (IRQn_Type) _dwc2_controller[rhport].irqnum;
 8006ca2:	7bfb      	ldrb	r3, [r7, #15]
 8006ca4:	4a0c      	ldr	r2, [pc, #48]	@ (8006cd8 <hcd_int_disable+0x4c>)
 8006ca6:	011b      	lsls	r3, r3, #4
 8006ca8:	4413      	add	r3, r2
 8006caa:	3304      	adds	r3, #4
 8006cac:	681b      	ldr	r3, [r3, #0]
 8006cae:	733b      	strb	r3, [r7, #12]
  if (enabled) {
 8006cb0:	7b7b      	ldrb	r3, [r7, #13]
 8006cb2:	2b00      	cmp	r3, #0
 8006cb4:	d005      	beq.n	8006cc2 <hcd_int_disable+0x36>
    NVIC_EnableIRQ(irqn);
 8006cb6:	f997 300c 	ldrsb.w	r3, [r7, #12]
 8006cba:	4618      	mov	r0, r3
 8006cbc:	f7ff fe36 	bl	800692c <__NVIC_EnableIRQ>
}
 8006cc0:	e004      	b.n	8006ccc <hcd_int_disable+0x40>
    NVIC_DisableIRQ(irqn);
 8006cc2:	f997 300c 	ldrsb.w	r3, [r7, #12]
 8006cc6:	4618      	mov	r0, r3
 8006cc8:	f7ff fe4e 	bl	8006968 <__NVIC_DisableIRQ>
}
 8006ccc:	bf00      	nop
  dwc2_int_set(rhport, TUSB_ROLE_HOST, false);
}
 8006cce:	bf00      	nop
 8006cd0:	3710      	adds	r7, #16
 8006cd2:	46bd      	mov	sp, r7
 8006cd4:	bd80      	pop	{r7, pc}
 8006cd6:	bf00      	nop
 8006cd8:	08008130 	.word	0x08008130

08006cdc <hcd_port_connect_status>:
//--------------------------------------------------------------------+
// Port API
//--------------------------------------------------------------------+

// Get the current connect status of roothub port
bool hcd_port_connect_status(uint8_t rhport) {
 8006cdc:	b480      	push	{r7}
 8006cde:	b085      	sub	sp, #20
 8006ce0:	af00      	add	r7, sp, #0
 8006ce2:	4603      	mov	r3, r0
 8006ce4:	71fb      	strb	r3, [r7, #7]
 8006ce6:	79fb      	ldrb	r3, [r7, #7]
 8006ce8:	72fb      	strb	r3, [r7, #11]
  if (rhport >= DWC2_CONTROLLER_COUNT) {
 8006cea:	7afb      	ldrb	r3, [r7, #11]
 8006cec:	2b01      	cmp	r3, #1
 8006cee:	d901      	bls.n	8006cf4 <hcd_port_connect_status+0x18>
    rhport = 0;
 8006cf0:	2300      	movs	r3, #0
 8006cf2:	72fb      	strb	r3, [r7, #11]
  return (dwc2_regs_t*)_dwc2_controller[rhport].reg_base;
 8006cf4:	7afb      	ldrb	r3, [r7, #11]
 8006cf6:	4a0a      	ldr	r2, [pc, #40]	@ (8006d20 <hcd_port_connect_status+0x44>)
 8006cf8:	011b      	lsls	r3, r3, #4
 8006cfa:	4413      	add	r3, r2
 8006cfc:	681b      	ldr	r3, [r3, #0]
  dwc2_regs_t* dwc2 = DWC2_REG(rhport);
 8006cfe:	60fb      	str	r3, [r7, #12]
  return dwc2->hprt & HPRT_CONN_STATUS;
 8006d00:	68fb      	ldr	r3, [r7, #12]
 8006d02:	f8d3 3440 	ldr.w	r3, [r3, #1088]	@ 0x440
 8006d06:	f003 0301 	and.w	r3, r3, #1
 8006d0a:	2b00      	cmp	r3, #0
 8006d0c:	bf14      	ite	ne
 8006d0e:	2301      	movne	r3, #1
 8006d10:	2300      	moveq	r3, #0
 8006d12:	b2db      	uxtb	r3, r3
}
 8006d14:	4618      	mov	r0, r3
 8006d16:	3714      	adds	r7, #20
 8006d18:	46bd      	mov	sp, r7
 8006d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d1e:	4770      	bx	lr
 8006d20:	08008130 	.word	0x08008130

08006d24 <hcd_port_reset>:

// Reset USB bus on the port. Return immediately, bus reset sequence may not be complete.
// Some port would require hcd_port_reset_end() to be invoked after 10ms to complete the reset sequence.
void hcd_port_reset(uint8_t rhport) {
 8006d24:	b480      	push	{r7}
 8006d26:	b087      	sub	sp, #28
 8006d28:	af00      	add	r7, sp, #0
 8006d2a:	4603      	mov	r3, r0
 8006d2c:	71fb      	strb	r3, [r7, #7]
 8006d2e:	79fb      	ldrb	r3, [r7, #7]
 8006d30:	73fb      	strb	r3, [r7, #15]
  if (rhport >= DWC2_CONTROLLER_COUNT) {
 8006d32:	7bfb      	ldrb	r3, [r7, #15]
 8006d34:	2b01      	cmp	r3, #1
 8006d36:	d901      	bls.n	8006d3c <hcd_port_reset+0x18>
    rhport = 0;
 8006d38:	2300      	movs	r3, #0
 8006d3a:	73fb      	strb	r3, [r7, #15]
  return (dwc2_regs_t*)_dwc2_controller[rhport].reg_base;
 8006d3c:	7bfb      	ldrb	r3, [r7, #15]
 8006d3e:	4a0c      	ldr	r2, [pc, #48]	@ (8006d70 <hcd_port_reset+0x4c>)
 8006d40:	011b      	lsls	r3, r3, #4
 8006d42:	4413      	add	r3, r2
 8006d44:	681b      	ldr	r3, [r3, #0]
  dwc2_regs_t* dwc2 = DWC2_REG(rhport);
 8006d46:	617b      	str	r3, [r7, #20]
  uint32_t hprt = dwc2->hprt & ~HPRT_W1_MASK;
 8006d48:	697b      	ldr	r3, [r7, #20]
 8006d4a:	f8d3 3440 	ldr.w	r3, [r3, #1088]	@ 0x440
 8006d4e:	f023 03ae 	bic.w	r3, r3, #174	@ 0xae
 8006d52:	613b      	str	r3, [r7, #16]
  hprt |= HPRT_RESET;
 8006d54:	693b      	ldr	r3, [r7, #16]
 8006d56:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006d5a:	613b      	str	r3, [r7, #16]
  dwc2->hprt = hprt;
 8006d5c:	697b      	ldr	r3, [r7, #20]
 8006d5e:	693a      	ldr	r2, [r7, #16]
 8006d60:	f8c3 2440 	str.w	r2, [r3, #1088]	@ 0x440
}
 8006d64:	bf00      	nop
 8006d66:	371c      	adds	r7, #28
 8006d68:	46bd      	mov	sp, r7
 8006d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d6e:	4770      	bx	lr
 8006d70:	08008130 	.word	0x08008130

08006d74 <hcd_port_reset_end>:

// Complete bus reset sequence, may be required by some controllers
void hcd_port_reset_end(uint8_t rhport) {
 8006d74:	b480      	push	{r7}
 8006d76:	b087      	sub	sp, #28
 8006d78:	af00      	add	r7, sp, #0
 8006d7a:	4603      	mov	r3, r0
 8006d7c:	71fb      	strb	r3, [r7, #7]
 8006d7e:	79fb      	ldrb	r3, [r7, #7]
 8006d80:	73fb      	strb	r3, [r7, #15]
  if (rhport >= DWC2_CONTROLLER_COUNT) {
 8006d82:	7bfb      	ldrb	r3, [r7, #15]
 8006d84:	2b01      	cmp	r3, #1
 8006d86:	d901      	bls.n	8006d8c <hcd_port_reset_end+0x18>
    rhport = 0;
 8006d88:	2300      	movs	r3, #0
 8006d8a:	73fb      	strb	r3, [r7, #15]
  return (dwc2_regs_t*)_dwc2_controller[rhport].reg_base;
 8006d8c:	7bfb      	ldrb	r3, [r7, #15]
 8006d8e:	4a0c      	ldr	r2, [pc, #48]	@ (8006dc0 <hcd_port_reset_end+0x4c>)
 8006d90:	011b      	lsls	r3, r3, #4
 8006d92:	4413      	add	r3, r2
 8006d94:	681b      	ldr	r3, [r3, #0]
  dwc2_regs_t* dwc2 = DWC2_REG(rhport);
 8006d96:	617b      	str	r3, [r7, #20]
  uint32_t hprt = dwc2->hprt & ~HPRT_W1_MASK; // skip w1c bits
 8006d98:	697b      	ldr	r3, [r7, #20]
 8006d9a:	f8d3 3440 	ldr.w	r3, [r3, #1088]	@ 0x440
 8006d9e:	f023 03ae 	bic.w	r3, r3, #174	@ 0xae
 8006da2:	613b      	str	r3, [r7, #16]
  hprt &= ~HPRT_RESET;
 8006da4:	693b      	ldr	r3, [r7, #16]
 8006da6:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006daa:	613b      	str	r3, [r7, #16]
  dwc2->hprt = hprt;
 8006dac:	697b      	ldr	r3, [r7, #20]
 8006dae:	693a      	ldr	r2, [r7, #16]
 8006db0:	f8c3 2440 	str.w	r2, [r3, #1088]	@ 0x440
}
 8006db4:	bf00      	nop
 8006db6:	371c      	adds	r7, #28
 8006db8:	46bd      	mov	sp, r7
 8006dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dbe:	4770      	bx	lr
 8006dc0:	08008130 	.word	0x08008130

08006dc4 <hcd_port_speed_get>:

// Get port link speed
tusb_speed_t hcd_port_speed_get(uint8_t rhport) {
 8006dc4:	b480      	push	{r7}
 8006dc6:	b08b      	sub	sp, #44	@ 0x2c
 8006dc8:	af00      	add	r7, sp, #0
 8006dca:	4603      	mov	r3, r0
 8006dcc:	71fb      	strb	r3, [r7, #7]
 8006dce:	79fb      	ldrb	r3, [r7, #7]
 8006dd0:	74fb      	strb	r3, [r7, #19]
  if (rhport >= DWC2_CONTROLLER_COUNT) {
 8006dd2:	7cfb      	ldrb	r3, [r7, #19]
 8006dd4:	2b01      	cmp	r3, #1
 8006dd6:	d901      	bls.n	8006ddc <hcd_port_speed_get+0x18>
    rhport = 0;
 8006dd8:	2300      	movs	r3, #0
 8006dda:	74fb      	strb	r3, [r7, #19]
  return (dwc2_regs_t*)_dwc2_controller[rhport].reg_base;
 8006ddc:	7cfb      	ldrb	r3, [r7, #19]
 8006dde:	4a1c      	ldr	r2, [pc, #112]	@ (8006e50 <hcd_port_speed_get+0x8c>)
 8006de0:	011b      	lsls	r3, r3, #4
 8006de2:	4413      	add	r3, r2
 8006de4:	681b      	ldr	r3, [r3, #0]
  dwc2_regs_t* dwc2 = DWC2_REG(rhport);
 8006de6:	627b      	str	r3, [r7, #36]	@ 0x24
 8006de8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006dea:	61fb      	str	r3, [r7, #28]
  const dwc2_hprt_t hprt = {.value = dwc2->hprt};
 8006dec:	69fb      	ldr	r3, [r7, #28]
 8006dee:	f8d3 3440 	ldr.w	r3, [r3, #1088]	@ 0x440
 8006df2:	60fb      	str	r3, [r7, #12]
  switch(hprt.speed) {
 8006df4:	7bbb      	ldrb	r3, [r7, #14]
 8006df6:	f3c3 0341 	ubfx	r3, r3, #1, #2
 8006dfa:	b2db      	uxtb	r3, r3
 8006dfc:	2b02      	cmp	r3, #2
 8006dfe:	d00c      	beq.n	8006e1a <hcd_port_speed_get+0x56>
 8006e00:	2b02      	cmp	r3, #2
 8006e02:	dc0d      	bgt.n	8006e20 <hcd_port_speed_get+0x5c>
 8006e04:	2b00      	cmp	r3, #0
 8006e06:	d002      	beq.n	8006e0e <hcd_port_speed_get+0x4a>
 8006e08:	2b01      	cmp	r3, #1
 8006e0a:	d003      	beq.n	8006e14 <hcd_port_speed_get+0x50>
 8006e0c:	e008      	b.n	8006e20 <hcd_port_speed_get+0x5c>
    case HPRT_SPEED_HIGH: speed = TUSB_SPEED_HIGH; break;
 8006e0e:	2302      	movs	r3, #2
 8006e10:	76fb      	strb	r3, [r7, #27]
 8006e12:	e011      	b.n	8006e38 <hcd_port_speed_get+0x74>
    case HPRT_SPEED_FULL: speed = TUSB_SPEED_FULL; break;
 8006e14:	2300      	movs	r3, #0
 8006e16:	76fb      	strb	r3, [r7, #27]
 8006e18:	e00e      	b.n	8006e38 <hcd_port_speed_get+0x74>
    case HPRT_SPEED_LOW : speed = TUSB_SPEED_LOW ; break;
 8006e1a:	2301      	movs	r3, #1
 8006e1c:	76fb      	strb	r3, [r7, #27]
 8006e1e:	e00b      	b.n	8006e38 <hcd_port_speed_get+0x74>
      speed = TUSB_SPEED_INVALID;
 8006e20:	23ff      	movs	r3, #255	@ 0xff
 8006e22:	76fb      	strb	r3, [r7, #27]
      TU_BREAKPOINT();
 8006e24:	4b0b      	ldr	r3, [pc, #44]	@ (8006e54 <hcd_port_speed_get+0x90>)
 8006e26:	617b      	str	r3, [r7, #20]
 8006e28:	697b      	ldr	r3, [r7, #20]
 8006e2a:	681b      	ldr	r3, [r3, #0]
 8006e2c:	f003 0301 	and.w	r3, r3, #1
 8006e30:	2b00      	cmp	r3, #0
 8006e32:	d000      	beq.n	8006e36 <hcd_port_speed_get+0x72>
 8006e34:	be00      	bkpt	0x0000
    break;
 8006e36:	bf00      	nop
  return speed;
 8006e38:	7efb      	ldrb	r3, [r7, #27]
  const tusb_speed_t speed = hprt_speed_get(dwc2);
 8006e3a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  return speed;
 8006e3e:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
}
 8006e42:	4618      	mov	r0, r3
 8006e44:	372c      	adds	r7, #44	@ 0x2c
 8006e46:	46bd      	mov	sp, r7
 8006e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e4c:	4770      	bx	lr
 8006e4e:	bf00      	nop
 8006e50:	08008130 	.word	0x08008130
 8006e54:	e000edf0 	.word	0xe000edf0

08006e58 <hcd_device_close>:

// HCD closes all opened endpoints belong to this device
void hcd_device_close(uint8_t rhport, uint8_t dev_addr) {
 8006e58:	b580      	push	{r7, lr}
 8006e5a:	b084      	sub	sp, #16
 8006e5c:	af00      	add	r7, sp, #0
 8006e5e:	4603      	mov	r3, r0
 8006e60:	460a      	mov	r2, r1
 8006e62:	71fb      	strb	r3, [r7, #7]
 8006e64:	4613      	mov	r3, r2
 8006e66:	71bb      	strb	r3, [r7, #6]
  (void) rhport;
  for (uint8_t i = 0; i < (uint8_t) CFG_TUH_DWC2_ENDPOINT_MAX; i++) {
 8006e68:	2300      	movs	r3, #0
 8006e6a:	73fb      	strb	r3, [r7, #15]
 8006e6c:	e020      	b.n	8006eb0 <hcd_device_close+0x58>
    hcd_endpoint_t* edpt = &_hcd_data.edpt[i];
 8006e6e:	7bfa      	ldrb	r2, [r7, #15]
 8006e70:	4613      	mov	r3, r2
 8006e72:	005b      	lsls	r3, r3, #1
 8006e74:	4413      	add	r3, r2
 8006e76:	00db      	lsls	r3, r3, #3
 8006e78:	3380      	adds	r3, #128	@ 0x80
 8006e7a:	4a11      	ldr	r2, [pc, #68]	@ (8006ec0 <hcd_device_close+0x68>)
 8006e7c:	4413      	add	r3, r2
 8006e7e:	60bb      	str	r3, [r7, #8]
    if (edpt->hcchar_bm.enable && edpt->hcchar_bm.dev_addr == dev_addr) {
 8006e80:	68bb      	ldr	r3, [r7, #8]
 8006e82:	78db      	ldrb	r3, [r3, #3]
 8006e84:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8006e88:	b2db      	uxtb	r3, r3
 8006e8a:	2b00      	cmp	r3, #0
 8006e8c:	d00d      	beq.n	8006eaa <hcd_device_close+0x52>
 8006e8e:	68bb      	ldr	r3, [r7, #8]
 8006e90:	885b      	ldrh	r3, [r3, #2]
 8006e92:	f3c3 1386 	ubfx	r3, r3, #6, #7
 8006e96:	b2db      	uxtb	r3, r3
 8006e98:	461a      	mov	r2, r3
 8006e9a:	79bb      	ldrb	r3, [r7, #6]
 8006e9c:	429a      	cmp	r2, r3
 8006e9e:	d104      	bne.n	8006eaa <hcd_device_close+0x52>
      tu_memclr(edpt, sizeof(hcd_endpoint_t));
 8006ea0:	2218      	movs	r2, #24
 8006ea2:	2100      	movs	r1, #0
 8006ea4:	68b8      	ldr	r0, [r7, #8]
 8006ea6:	f001 f8d2 	bl	800804e <memset>
  for (uint8_t i = 0; i < (uint8_t) CFG_TUH_DWC2_ENDPOINT_MAX; i++) {
 8006eaa:	7bfb      	ldrb	r3, [r7, #15]
 8006eac:	3301      	adds	r3, #1
 8006eae:	73fb      	strb	r3, [r7, #15]
 8006eb0:	7bfb      	ldrb	r3, [r7, #15]
 8006eb2:	2b0f      	cmp	r3, #15
 8006eb4:	d9db      	bls.n	8006e6e <hcd_device_close+0x16>
    }
  }
}
 8006eb6:	bf00      	nop
 8006eb8:	bf00      	nop
 8006eba:	3710      	adds	r7, #16
 8006ebc:	46bd      	mov	sp, r7
 8006ebe:	bd80      	pop	{r7, pc}
 8006ec0:	20000bc0 	.word	0x20000bc0

08006ec4 <hcd_edpt_open>:
//--------------------------------------------------------------------+
// Endpoints API
//--------------------------------------------------------------------+

// Open an endpoint
bool hcd_edpt_open(uint8_t rhport, uint8_t dev_addr, const tusb_desc_endpoint_t* desc_ep) {
 8006ec4:	b580      	push	{r7, lr}
 8006ec6:	b092      	sub	sp, #72	@ 0x48
 8006ec8:	af00      	add	r7, sp, #0
 8006eca:	4603      	mov	r3, r0
 8006ecc:	603a      	str	r2, [r7, #0]
 8006ece:	71fb      	strb	r3, [r7, #7]
 8006ed0:	460b      	mov	r3, r1
 8006ed2:	71bb      	strb	r3, [r7, #6]
 8006ed4:	79fb      	ldrb	r3, [r7, #7]
 8006ed6:	76fb      	strb	r3, [r7, #27]
  if (rhport >= DWC2_CONTROLLER_COUNT) {
 8006ed8:	7efb      	ldrb	r3, [r7, #27]
 8006eda:	2b01      	cmp	r3, #1
 8006edc:	d901      	bls.n	8006ee2 <hcd_edpt_open+0x1e>
    rhport = 0;
 8006ede:	2300      	movs	r3, #0
 8006ee0:	76fb      	strb	r3, [r7, #27]
  return (dwc2_regs_t*)_dwc2_controller[rhport].reg_base;
 8006ee2:	7efb      	ldrb	r3, [r7, #27]
 8006ee4:	4aac      	ldr	r2, [pc, #688]	@ (8007198 <hcd_edpt_open+0x2d4>)
 8006ee6:	011b      	lsls	r3, r3, #4
 8006ee8:	4413      	add	r3, r2
 8006eea:	681b      	ldr	r3, [r3, #0]
  dwc2_regs_t* dwc2 = DWC2_REG(rhport);
 8006eec:	647b      	str	r3, [r7, #68]	@ 0x44
 8006eee:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006ef0:	627b      	str	r3, [r7, #36]	@ 0x24
  const dwc2_hprt_t hprt = {.value = dwc2->hprt};
 8006ef2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ef4:	f8d3 3440 	ldr.w	r3, [r3, #1088]	@ 0x440
 8006ef8:	60fb      	str	r3, [r7, #12]
  switch(hprt.speed) {
 8006efa:	7bbb      	ldrb	r3, [r7, #14]
 8006efc:	f3c3 0341 	ubfx	r3, r3, #1, #2
 8006f00:	b2db      	uxtb	r3, r3
 8006f02:	2b02      	cmp	r3, #2
 8006f04:	d00e      	beq.n	8006f24 <hcd_edpt_open+0x60>
 8006f06:	2b02      	cmp	r3, #2
 8006f08:	dc10      	bgt.n	8006f2c <hcd_edpt_open+0x68>
 8006f0a:	2b00      	cmp	r3, #0
 8006f0c:	d002      	beq.n	8006f14 <hcd_edpt_open+0x50>
 8006f0e:	2b01      	cmp	r3, #1
 8006f10:	d004      	beq.n	8006f1c <hcd_edpt_open+0x58>
 8006f12:	e00b      	b.n	8006f2c <hcd_edpt_open+0x68>
    case HPRT_SPEED_HIGH: speed = TUSB_SPEED_HIGH; break;
 8006f14:	2302      	movs	r3, #2
 8006f16:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006f1a:	e014      	b.n	8006f46 <hcd_edpt_open+0x82>
    case HPRT_SPEED_FULL: speed = TUSB_SPEED_FULL; break;
 8006f1c:	2300      	movs	r3, #0
 8006f1e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006f22:	e010      	b.n	8006f46 <hcd_edpt_open+0x82>
    case HPRT_SPEED_LOW : speed = TUSB_SPEED_LOW ; break;
 8006f24:	2301      	movs	r3, #1
 8006f26:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006f2a:	e00c      	b.n	8006f46 <hcd_edpt_open+0x82>
      speed = TUSB_SPEED_INVALID;
 8006f2c:	23ff      	movs	r3, #255	@ 0xff
 8006f2e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
      TU_BREAKPOINT();
 8006f32:	4b9a      	ldr	r3, [pc, #616]	@ (800719c <hcd_edpt_open+0x2d8>)
 8006f34:	61fb      	str	r3, [r7, #28]
 8006f36:	69fb      	ldr	r3, [r7, #28]
 8006f38:	681b      	ldr	r3, [r3, #0]
 8006f3a:	f003 0301 	and.w	r3, r3, #1
 8006f3e:	2b00      	cmp	r3, #0
 8006f40:	d000      	beq.n	8006f44 <hcd_edpt_open+0x80>
 8006f42:	be00      	bkpt	0x0000
    break;
 8006f44:	bf00      	nop
  return speed;
 8006f46:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
  const tusb_speed_t rh_speed = hprt_speed_get(dwc2);
 8006f4a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  tuh_bus_info_t bus_info;
  tuh_bus_info_get(dev_addr, &bus_info);
 8006f4e:	f107 0210 	add.w	r2, r7, #16
 8006f52:	79bb      	ldrb	r3, [r7, #6]
 8006f54:	4611      	mov	r1, r2
 8006f56:	4618      	mov	r0, r3
 8006f58:	f7fe f980 	bl	800525c <tuh_bus_info_get>
  for (uint32_t i = 0; i < CFG_TUH_DWC2_ENDPOINT_MAX; i++) {
 8006f5c:	2300      	movs	r3, #0
 8006f5e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006f60:	e01f      	b.n	8006fa2 <hcd_edpt_open+0xde>
    hcd_endpoint_t* edpt = &_hcd_data.edpt[i];
 8006f62:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006f64:	4613      	mov	r3, r2
 8006f66:	005b      	lsls	r3, r3, #1
 8006f68:	4413      	add	r3, r2
 8006f6a:	00db      	lsls	r3, r3, #3
 8006f6c:	3380      	adds	r3, #128	@ 0x80
 8006f6e:	4a8c      	ldr	r2, [pc, #560]	@ (80071a0 <hcd_edpt_open+0x2dc>)
 8006f70:	4413      	add	r3, r2
 8006f72:	62bb      	str	r3, [r7, #40]	@ 0x28
    if (edpt->hcchar_bm.enable == 0) {
 8006f74:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006f76:	78db      	ldrb	r3, [r3, #3]
 8006f78:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8006f7c:	b2db      	uxtb	r3, r3
 8006f7e:	2b00      	cmp	r3, #0
 8006f80:	d10c      	bne.n	8006f9c <hcd_edpt_open+0xd8>
      tu_memclr(edpt, sizeof(hcd_endpoint_t));
 8006f82:	2218      	movs	r2, #24
 8006f84:	2100      	movs	r1, #0
 8006f86:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006f88:	f001 f861 	bl	800804e <memset>
      edpt->hcchar_bm.enable = 1;
 8006f8c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006f8e:	78d3      	ldrb	r3, [r2, #3]
 8006f90:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006f94:	70d3      	strb	r3, [r2, #3]
      return i;
 8006f96:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006f98:	b2db      	uxtb	r3, r3
 8006f9a:	e006      	b.n	8006faa <hcd_edpt_open+0xe6>
  for (uint32_t i = 0; i < CFG_TUH_DWC2_ENDPOINT_MAX; i++) {
 8006f9c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006f9e:	3301      	adds	r3, #1
 8006fa0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006fa2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006fa4:	2b0f      	cmp	r3, #15
 8006fa6:	d9dc      	bls.n	8006f62 <hcd_edpt_open+0x9e>
  return TUSB_INDEX_INVALID_8;
 8006fa8:	23ff      	movs	r3, #255	@ 0xff

  // find a free endpoint
  const uint8_t ep_id = edpt_alloc();
 8006faa:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  TU_ASSERT(ep_id < CFG_TUH_DWC2_ENDPOINT_MAX);
 8006fae:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
 8006fb2:	2b0f      	cmp	r3, #15
 8006fb4:	d90a      	bls.n	8006fcc <hcd_edpt_open+0x108>
 8006fb6:	4b79      	ldr	r3, [pc, #484]	@ (800719c <hcd_edpt_open+0x2d8>)
 8006fb8:	633b      	str	r3, [r7, #48]	@ 0x30
 8006fba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006fbc:	681b      	ldr	r3, [r3, #0]
 8006fbe:	f003 0301 	and.w	r3, r3, #1
 8006fc2:	2b00      	cmp	r3, #0
 8006fc4:	d000      	beq.n	8006fc8 <hcd_edpt_open+0x104>
 8006fc6:	be00      	bkpt	0x0000
 8006fc8:	2300      	movs	r3, #0
 8006fca:	e128      	b.n	800721e <hcd_edpt_open+0x35a>
  hcd_endpoint_t* edpt = &_hcd_data.edpt[ep_id];
 8006fcc:	f897 2042 	ldrb.w	r2, [r7, #66]	@ 0x42
 8006fd0:	4613      	mov	r3, r2
 8006fd2:	005b      	lsls	r3, r3, #1
 8006fd4:	4413      	add	r3, r2
 8006fd6:	00db      	lsls	r3, r3, #3
 8006fd8:	3380      	adds	r3, #128	@ 0x80
 8006fda:	4a71      	ldr	r2, [pc, #452]	@ (80071a0 <hcd_edpt_open+0x2dc>)
 8006fdc:	4413      	add	r3, r2
 8006fde:	63fb      	str	r3, [r7, #60]	@ 0x3c

  dwc2_channel_char_t* hcchar_bm = &edpt->hcchar_bm;
 8006fe0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006fe2:	63bb      	str	r3, [r7, #56]	@ 0x38
 8006fe4:	683b      	ldr	r3, [r7, #0]
 8006fe6:	617b      	str	r3, [r7, #20]
  return tu_le16toh(desc_ep->wMaxPacketSize) & 0x7FF;
 8006fe8:	697b      	ldr	r3, [r7, #20]
 8006fea:	889b      	ldrh	r3, [r3, #4]
 8006fec:	b29b      	uxth	r3, r3
 8006fee:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006ff2:	b29b      	uxth	r3, r3
  hcchar_bm->ep_size         = tu_edpt_packet_size(desc_ep);
 8006ff4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006ff8:	b299      	uxth	r1, r3
 8006ffa:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8006ffc:	8813      	ldrh	r3, [r2, #0]
 8006ffe:	f361 030a 	bfi	r3, r1, #0, #11
 8007002:	8013      	strh	r3, [r2, #0]
  hcchar_bm->ep_num          = tu_edpt_number(desc_ep->bEndpointAddress);
 8007004:	683b      	ldr	r3, [r7, #0]
 8007006:	789b      	ldrb	r3, [r3, #2]
 8007008:	767b      	strb	r3, [r7, #25]
  return (uint8_t)(addr & (~TUSB_DIR_IN_MASK));
 800700a:	7e7b      	ldrb	r3, [r7, #25]
 800700c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007010:	b2db      	uxtb	r3, r3
 8007012:	f003 030f 	and.w	r3, r3, #15
 8007016:	b2d9      	uxtb	r1, r3
 8007018:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800701a:	7853      	ldrb	r3, [r2, #1]
 800701c:	f361 03c6 	bfi	r3, r1, #3, #4
 8007020:	7053      	strb	r3, [r2, #1]
  hcchar_bm->ep_dir          = tu_edpt_dir(desc_ep->bEndpointAddress);
 8007022:	683b      	ldr	r3, [r7, #0]
 8007024:	789b      	ldrb	r3, [r3, #2]
 8007026:	76bb      	strb	r3, [r7, #26]
  return (addr & TUSB_DIR_IN_MASK) ? TUSB_DIR_IN : TUSB_DIR_OUT;
 8007028:	7ebb      	ldrb	r3, [r7, #26]
 800702a:	09db      	lsrs	r3, r3, #7
 800702c:	b2db      	uxtb	r3, r3
 800702e:	f003 0301 	and.w	r3, r3, #1
 8007032:	b2d9      	uxtb	r1, r3
 8007034:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8007036:	7853      	ldrb	r3, [r2, #1]
 8007038:	f361 13c7 	bfi	r3, r1, #7, #1
 800703c:	7053      	strb	r3, [r2, #1]
  hcchar_bm->low_speed_dev   = (bus_info.speed == TUSB_SPEED_LOW) ? 1 : 0;
 800703e:	7cfb      	ldrb	r3, [r7, #19]
 8007040:	2b01      	cmp	r3, #1
 8007042:	bf0c      	ite	eq
 8007044:	2301      	moveq	r3, #1
 8007046:	2300      	movne	r3, #0
 8007048:	b2d9      	uxtb	r1, r3
 800704a:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800704c:	7893      	ldrb	r3, [r2, #2]
 800704e:	f361 0341 	bfi	r3, r1, #1, #1
 8007052:	7093      	strb	r3, [r2, #2]
  hcchar_bm->ep_type         = desc_ep->bmAttributes.xfer; // ep_type matches TUSB_XFER_*
 8007054:	683b      	ldr	r3, [r7, #0]
 8007056:	78db      	ldrb	r3, [r3, #3]
 8007058:	f3c3 0301 	ubfx	r3, r3, #0, #2
 800705c:	b2d9      	uxtb	r1, r3
 800705e:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8007060:	7893      	ldrb	r3, [r2, #2]
 8007062:	f361 0383 	bfi	r3, r1, #2, #2
 8007066:	7093      	strb	r3, [r2, #2]
  hcchar_bm->err_multi_count = 0;
 8007068:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800706a:	7893      	ldrb	r3, [r2, #2]
 800706c:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 8007070:	7093      	strb	r3, [r2, #2]
  hcchar_bm->dev_addr        = dev_addr;
 8007072:	79bb      	ldrb	r3, [r7, #6]
 8007074:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007078:	b2d9      	uxtb	r1, r3
 800707a:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800707c:	8853      	ldrh	r3, [r2, #2]
 800707e:	f361 138c 	bfi	r3, r1, #6, #7
 8007082:	8053      	strh	r3, [r2, #2]
  hcchar_bm->odd_frame       = 0;
 8007084:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8007086:	78d3      	ldrb	r3, [r2, #3]
 8007088:	f023 0320 	bic.w	r3, r3, #32
 800708c:	70d3      	strb	r3, [r2, #3]
  hcchar_bm->disable         = 0;
 800708e:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8007090:	78d3      	ldrb	r3, [r2, #3]
 8007092:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007096:	70d3      	strb	r3, [r2, #3]
  hcchar_bm->enable          = 1;
 8007098:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800709a:	78d3      	ldrb	r3, [r2, #3]
 800709c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80070a0:	70d3      	strb	r3, [r2, #3]

  dwc2_channel_split_t* hcsplt_bm = &edpt->hcsplt_bm;
 80070a2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80070a4:	3304      	adds	r3, #4
 80070a6:	637b      	str	r3, [r7, #52]	@ 0x34
  hcsplt_bm->hub_port        = bus_info.hub_port;
 80070a8:	7cbb      	ldrb	r3, [r7, #18]
 80070aa:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80070ae:	b2d9      	uxtb	r1, r3
 80070b0:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80070b2:	7813      	ldrb	r3, [r2, #0]
 80070b4:	f361 0306 	bfi	r3, r1, #0, #7
 80070b8:	7013      	strb	r3, [r2, #0]
  hcsplt_bm->hub_addr        = bus_info.hub_addr;
 80070ba:	7c7b      	ldrb	r3, [r7, #17]
 80070bc:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80070c0:	b2d9      	uxtb	r1, r3
 80070c2:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80070c4:	8813      	ldrh	r3, [r2, #0]
 80070c6:	f361 13cd 	bfi	r3, r1, #7, #7
 80070ca:	8013      	strh	r3, [r2, #0]
  hcsplt_bm->xact_pos        = 0;
 80070cc:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80070ce:	7853      	ldrb	r3, [r2, #1]
 80070d0:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 80070d4:	7053      	strb	r3, [r2, #1]
  hcsplt_bm->split_compl     = 0;
 80070d6:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80070d8:	7893      	ldrb	r3, [r2, #2]
 80070da:	f023 0301 	bic.w	r3, r3, #1
 80070de:	7093      	strb	r3, [r2, #2]
  hcsplt_bm->split_en        = (rh_speed == TUSB_SPEED_HIGH && bus_info.speed != TUSB_SPEED_HIGH) ? 1 : 0;
 80070e0:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 80070e4:	2b02      	cmp	r3, #2
 80070e6:	d104      	bne.n	80070f2 <hcd_edpt_open+0x22e>
 80070e8:	7cfb      	ldrb	r3, [r7, #19]
 80070ea:	2b02      	cmp	r3, #2
 80070ec:	d001      	beq.n	80070f2 <hcd_edpt_open+0x22e>
 80070ee:	2301      	movs	r3, #1
 80070f0:	e000      	b.n	80070f4 <hcd_edpt_open+0x230>
 80070f2:	2300      	movs	r3, #0
 80070f4:	f003 0301 	and.w	r3, r3, #1
 80070f8:	b2d9      	uxtb	r1, r3
 80070fa:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80070fc:	78d3      	ldrb	r3, [r2, #3]
 80070fe:	f361 13c7 	bfi	r3, r1, #7, #1
 8007102:	70d3      	strb	r3, [r2, #3]

  edpt->speed = bus_info.speed;
 8007104:	7cfb      	ldrb	r3, [r7, #19]
 8007106:	f003 0303 	and.w	r3, r3, #3
 800710a:	b2d9      	uxtb	r1, r3
 800710c:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800710e:	7a93      	ldrb	r3, [r2, #10]
 8007110:	f361 0383 	bfi	r3, r1, #2, #2
 8007114:	7293      	strb	r3, [r2, #10]
  edpt->next_pid = HCTSIZ_PID_DATA0;
 8007116:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8007118:	7a93      	ldrb	r3, [r2, #10]
 800711a:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 800711e:	7293      	strb	r3, [r2, #10]
  if (desc_ep->bmAttributes.xfer == TUSB_XFER_ISOCHRONOUS) {
 8007120:	683b      	ldr	r3, [r7, #0]
 8007122:	78db      	ldrb	r3, [r3, #3]
 8007124:	f003 0303 	and.w	r3, r3, #3
 8007128:	b2db      	uxtb	r3, r3
 800712a:	2b01      	cmp	r3, #1
 800712c:	d13a      	bne.n	80071a4 <hcd_edpt_open+0x2e0>
    edpt->uframe_interval = 1 << (desc_ep->bInterval - 1);
 800712e:	683b      	ldr	r3, [r7, #0]
 8007130:	799b      	ldrb	r3, [r3, #6]
 8007132:	3b01      	subs	r3, #1
 8007134:	2201      	movs	r2, #1
 8007136:	fa02 f303 	lsl.w	r3, r2, r3
 800713a:	f3c3 0211 	ubfx	r2, r3, #0, #18
 800713e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007140:	b291      	uxth	r1, r2
 8007142:	2000      	movs	r0, #0
 8007144:	4301      	orrs	r1, r0
 8007146:	8119      	strh	r1, [r3, #8]
 8007148:	0c12      	lsrs	r2, r2, #16
 800714a:	f002 0203 	and.w	r2, r2, #3
 800714e:	f002 0003 	and.w	r0, r2, #3
 8007152:	7a9a      	ldrb	r2, [r3, #10]
 8007154:	f022 0203 	bic.w	r2, r2, #3
 8007158:	4611      	mov	r1, r2
 800715a:	4602      	mov	r2, r0
 800715c:	430a      	orrs	r2, r1
 800715e:	729a      	strb	r2, [r3, #10]
    if (bus_info.speed == TUSB_SPEED_FULL) {
 8007160:	7cfb      	ldrb	r3, [r7, #19]
 8007162:	2b00      	cmp	r3, #0
 8007164:	d15a      	bne.n	800721c <hcd_edpt_open+0x358>
      edpt->uframe_interval <<= 3;
 8007166:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007168:	689b      	ldr	r3, [r3, #8]
 800716a:	f3c3 0311 	ubfx	r3, r3, #0, #18
 800716e:	00db      	lsls	r3, r3, #3
 8007170:	f3c3 0311 	ubfx	r3, r3, #0, #18
 8007174:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8007176:	b299      	uxth	r1, r3
 8007178:	2000      	movs	r0, #0
 800717a:	4301      	orrs	r1, r0
 800717c:	8111      	strh	r1, [r2, #8]
 800717e:	0c1b      	lsrs	r3, r3, #16
 8007180:	f003 0303 	and.w	r3, r3, #3
 8007184:	f003 0003 	and.w	r0, r3, #3
 8007188:	7a93      	ldrb	r3, [r2, #10]
 800718a:	f023 0303 	bic.w	r3, r3, #3
 800718e:	4619      	mov	r1, r3
 8007190:	4603      	mov	r3, r0
 8007192:	430b      	orrs	r3, r1
 8007194:	7293      	strb	r3, [r2, #10]
 8007196:	e041      	b.n	800721c <hcd_edpt_open+0x358>
 8007198:	08008130 	.word	0x08008130
 800719c:	e000edf0 	.word	0xe000edf0
 80071a0:	20000bc0 	.word	0x20000bc0
    }
  } else if (desc_ep->bmAttributes.xfer == TUSB_XFER_INTERRUPT) {
 80071a4:	683b      	ldr	r3, [r7, #0]
 80071a6:	78db      	ldrb	r3, [r3, #3]
 80071a8:	f003 0303 	and.w	r3, r3, #3
 80071ac:	b2db      	uxtb	r3, r3
 80071ae:	2b03      	cmp	r3, #3
 80071b0:	d134      	bne.n	800721c <hcd_edpt_open+0x358>
    if (bus_info.speed == TUSB_SPEED_HIGH) {
 80071b2:	7cfb      	ldrb	r3, [r7, #19]
 80071b4:	2b02      	cmp	r3, #2
 80071b6:	d119      	bne.n	80071ec <hcd_edpt_open+0x328>
      edpt->uframe_interval = 1 << (desc_ep->bInterval - 1);
 80071b8:	683b      	ldr	r3, [r7, #0]
 80071ba:	799b      	ldrb	r3, [r3, #6]
 80071bc:	3b01      	subs	r3, #1
 80071be:	2201      	movs	r2, #1
 80071c0:	fa02 f303 	lsl.w	r3, r2, r3
 80071c4:	f3c3 0211 	ubfx	r2, r3, #0, #18
 80071c8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80071ca:	b291      	uxth	r1, r2
 80071cc:	2000      	movs	r0, #0
 80071ce:	4301      	orrs	r1, r0
 80071d0:	8119      	strh	r1, [r3, #8]
 80071d2:	0c12      	lsrs	r2, r2, #16
 80071d4:	f002 0203 	and.w	r2, r2, #3
 80071d8:	f002 0003 	and.w	r0, r2, #3
 80071dc:	7a9a      	ldrb	r2, [r3, #10]
 80071de:	f022 0203 	bic.w	r2, r2, #3
 80071e2:	4611      	mov	r1, r2
 80071e4:	4602      	mov	r2, r0
 80071e6:	430a      	orrs	r2, r1
 80071e8:	729a      	strb	r2, [r3, #10]
 80071ea:	e017      	b.n	800721c <hcd_edpt_open+0x358>
    } else {
      edpt->uframe_interval = desc_ep->bInterval << 3;
 80071ec:	683b      	ldr	r3, [r7, #0]
 80071ee:	799b      	ldrb	r3, [r3, #6]
 80071f0:	f3c3 0311 	ubfx	r3, r3, #0, #18
 80071f4:	00db      	lsls	r3, r3, #3
 80071f6:	f3c3 0311 	ubfx	r3, r3, #0, #18
 80071fa:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80071fc:	b299      	uxth	r1, r3
 80071fe:	2000      	movs	r0, #0
 8007200:	4301      	orrs	r1, r0
 8007202:	8111      	strh	r1, [r2, #8]
 8007204:	0c1b      	lsrs	r3, r3, #16
 8007206:	f003 0303 	and.w	r3, r3, #3
 800720a:	f003 0003 	and.w	r0, r3, #3
 800720e:	7a93      	ldrb	r3, [r2, #10]
 8007210:	f023 0303 	bic.w	r3, r3, #3
 8007214:	4619      	mov	r1, r3
 8007216:	4603      	mov	r3, r0
 8007218:	430b      	orrs	r3, r1
 800721a:	7293      	strb	r3, [r2, #10]
    }
  }

  return true;
 800721c:	2301      	movs	r3, #1
}
 800721e:	4618      	mov	r0, r3
 8007220:	3748      	adds	r7, #72	@ 0x48
 8007222:	46bd      	mov	sp, r7
 8007224:	bd80      	pop	{r7, pc}
 8007226:	bf00      	nop

08007228 <channel_xfer_start>:
  xfer->xferred_bytes += actual_bytes;
  edpt->buffer += actual_bytes;
  edpt->buflen -= actual_bytes;
}

static bool channel_xfer_start(dwc2_regs_t* dwc2, uint8_t ch_id) {
 8007228:	b580      	push	{r7, lr}
 800722a:	b0a4      	sub	sp, #144	@ 0x90
 800722c:	af00      	add	r7, sp, #0
 800722e:	6078      	str	r0, [r7, #4]
 8007230:	460b      	mov	r3, r1
 8007232:	70fb      	strb	r3, [r7, #3]
  hcd_xfer_t* xfer = &_hcd_data.xfer[ch_id];
 8007234:	78fb      	ldrb	r3, [r7, #3]
 8007236:	00db      	lsls	r3, r3, #3
 8007238:	4aae      	ldr	r2, [pc, #696]	@ (80074f4 <channel_xfer_start+0x2cc>)
 800723a:	4413      	add	r3, r2
 800723c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  hcd_endpoint_t* edpt = &_hcd_data.edpt[xfer->ep_id];
 8007240:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8007244:	785b      	ldrb	r3, [r3, #1]
 8007246:	461a      	mov	r2, r3
 8007248:	4613      	mov	r3, r2
 800724a:	005b      	lsls	r3, r3, #1
 800724c:	4413      	add	r3, r2
 800724e:	00db      	lsls	r3, r3, #3
 8007250:	3380      	adds	r3, #128	@ 0x80
 8007252:	4aa8      	ldr	r2, [pc, #672]	@ (80074f4 <channel_xfer_start+0x2cc>)
 8007254:	4413      	add	r3, r2
 8007256:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  dwc2_channel_char_t* hcchar_bm = &edpt->hcchar_bm;
 800725a:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800725e:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  dwc2_channel_t* channel = &dwc2->channel[ch_id];
 8007262:	78fb      	ldrb	r3, [r7, #3]
 8007264:	3328      	adds	r3, #40	@ 0x28
 8007266:	015b      	lsls	r3, r3, #5
 8007268:	687a      	ldr	r2, [r7, #4]
 800726a:	4413      	add	r3, r2
 800726c:	67fb      	str	r3, [r7, #124]	@ 0x7c
  bool const is_period = channel_is_periodic(edpt->hcchar);
 800726e:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8007272:	681b      	ldr	r3, [r3, #0]
 8007274:	673b      	str	r3, [r7, #112]	@ 0x70
  const dwc2_channel_char_t hcchar_bm = {.value = hcchar};
 8007276:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8007278:	623b      	str	r3, [r7, #32]
  return hcchar_bm.ep_type == HCCHAR_EPTYPE_INTERRUPT || hcchar_bm.ep_type == HCCHAR_EPTYPE_ISOCHRONOUS;
 800727a:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 800727e:	f003 030c 	and.w	r3, r3, #12
 8007282:	b2db      	uxtb	r3, r3
 8007284:	2b0c      	cmp	r3, #12
 8007286:	d006      	beq.n	8007296 <channel_xfer_start+0x6e>
 8007288:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 800728c:	f003 030c 	and.w	r3, r3, #12
 8007290:	b2db      	uxtb	r3, r3
 8007292:	2b04      	cmp	r3, #4
 8007294:	d101      	bne.n	800729a <channel_xfer_start+0x72>
 8007296:	2301      	movs	r3, #1
 8007298:	e000      	b.n	800729c <channel_xfer_start+0x74>
 800729a:	2300      	movs	r3, #0
 800729c:	f003 0301 	and.w	r3, r3, #1
 80072a0:	b2db      	uxtb	r3, r3
  bool const is_period = channel_is_periodic(edpt->hcchar);
 80072a2:	f887 307b 	strb.w	r3, [r7, #123]	@ 0x7b

  // clear previous state
  xfer->fifo_bytes = 0;
 80072a6:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80072aa:	2200      	movs	r2, #0
 80072ac:	80da      	strh	r2, [r3, #6]

  // hchar: restore but don't enable yet
  if (is_period) {
 80072ae:	f897 307b 	ldrb.w	r3, [r7, #123]	@ 0x7b
 80072b2:	2b00      	cmp	r3, #0
 80072b4:	d00f      	beq.n	80072d6 <channel_xfer_start+0xae>
    hcchar_bm->odd_frame = 1 - (dwc2->hfnum & 1);   // transfer on next frame
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	f8d3 3408 	ldr.w	r3, [r3, #1032]	@ 0x408
 80072bc:	f003 0301 	and.w	r3, r3, #1
 80072c0:	2b00      	cmp	r3, #0
 80072c2:	bf0c      	ite	eq
 80072c4:	2301      	moveq	r3, #1
 80072c6:	2300      	movne	r3, #0
 80072c8:	b2d9      	uxtb	r1, r3
 80072ca:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80072ce:	78d3      	ldrb	r3, [r2, #3]
 80072d0:	f361 1345 	bfi	r3, r1, #5, #1
 80072d4:	70d3      	strb	r3, [r2, #3]
  }
  channel->hcchar = (edpt->hcchar & ~HCCHAR_CHENA);
 80072d6:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80072da:	681b      	ldr	r3, [r3, #0]
 80072dc:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80072e0:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80072e2:	601a      	str	r2, [r3, #0]

  // hctsiz: zero length packet still count as 1
  const uint16_t packet_count = cal_packet_count(edpt->buflen, hcchar_bm->ep_size);
 80072e4:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80072e8:	8a9a      	ldrh	r2, [r3, #20]
 80072ea:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80072ee:	881b      	ldrh	r3, [r3, #0]
 80072f0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80072f4:	b29b      	uxth	r3, r3
 80072f6:	4619      	mov	r1, r3
 80072f8:	4613      	mov	r3, r2
 80072fa:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
 80072fe:	460b      	mov	r3, r1
 8007300:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
  if (len == 0) {
 8007304:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8007308:	2b00      	cmp	r3, #0
 800730a:	d101      	bne.n	8007310 <channel_xfer_start+0xe8>
    return 1;
 800730c:	2301      	movs	r3, #1
 800730e:	e00d      	b.n	800732c <channel_xfer_start+0x104>
    return tu_div_ceil(len, ep_size);
 8007310:	f8b7 206e 	ldrh.w	r2, [r7, #110]	@ 0x6e
 8007314:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8007318:	66ba      	str	r2, [r7, #104]	@ 0x68
 800731a:	667b      	str	r3, [r7, #100]	@ 0x64
TU_ATTR_ALWAYS_INLINE static inline uint32_t tu_div_ceil(uint32_t v, uint32_t d) { return TU_DIV_CEIL(v, d); }
 800731c:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 800731e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007320:	4413      	add	r3, r2
 8007322:	1e5a      	subs	r2, r3, #1
 8007324:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007326:	fbb2 f3f3 	udiv	r3, r2, r3
 800732a:	b29b      	uxth	r3, r3
  const uint16_t packet_count = cal_packet_count(edpt->buflen, hcchar_bm->ep_size);
 800732c:	f8a7 3078 	strh.w	r3, [r7, #120]	@ 0x78
  dwc2_channel_tsize_t hctsiz = {.value = 0};
 8007330:	2300      	movs	r3, #0
 8007332:	62bb      	str	r3, [r7, #40]	@ 0x28
  hctsiz.pid = edpt->next_pid; // next PID is set in transfer complete interrupt
 8007334:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8007338:	7a9b      	ldrb	r3, [r3, #10]
 800733a:	f3c3 1301 	ubfx	r3, r3, #4, #2
 800733e:	b2da      	uxtb	r2, r3
 8007340:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8007344:	f362 1346 	bfi	r3, r2, #5, #2
 8007348:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
  hctsiz.packet_count = packet_count;
 800734c:	f8b7 3078 	ldrh.w	r3, [r7, #120]	@ 0x78
 8007350:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007354:	b29a      	uxth	r2, r3
 8007356:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8007358:	f362 03cc 	bfi	r3, r2, #3, #10
 800735c:	857b      	strh	r3, [r7, #42]	@ 0x2a
  hctsiz.xfer_size = edpt->buflen;
 800735e:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8007362:	8a9b      	ldrh	r3, [r3, #20]
 8007364:	461a      	mov	r2, r3
 8007366:	f3c2 0212 	ubfx	r2, r2, #0, #19
 800736a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800736c:	f362 0312 	bfi	r3, r2, #0, #19
 8007370:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (edpt->next_do_ping && edpt->speed == TUSB_SPEED_HIGH &&
 8007372:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8007376:	7a9b      	ldrb	r3, [r3, #10]
 8007378:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800737c:	b2db      	uxtb	r3, r3
 800737e:	2b00      	cmp	r3, #0
 8007380:	d01d      	beq.n	80073be <channel_xfer_start+0x196>
 8007382:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8007386:	7a9b      	ldrb	r3, [r3, #10]
 8007388:	f003 030c 	and.w	r3, r3, #12
 800738c:	b2db      	uxtb	r3, r3
 800738e:	2b08      	cmp	r3, #8
 8007390:	d115      	bne.n	80073be <channel_xfer_start+0x196>
     edpt->next_pid != HCTSIZ_PID_SETUP && hcchar_bm->ep_dir == TUSB_DIR_OUT) {
 8007392:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8007396:	7a9b      	ldrb	r3, [r3, #10]
 8007398:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 800739c:	b2db      	uxtb	r3, r3
  if (edpt->next_do_ping && edpt->speed == TUSB_SPEED_HIGH &&
 800739e:	2b30      	cmp	r3, #48	@ 0x30
 80073a0:	d00d      	beq.n	80073be <channel_xfer_start+0x196>
     edpt->next_pid != HCTSIZ_PID_SETUP && hcchar_bm->ep_dir == TUSB_DIR_OUT) {
 80073a2:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80073a6:	785b      	ldrb	r3, [r3, #1]
 80073a8:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 80073ac:	b2db      	uxtb	r3, r3
 80073ae:	2b00      	cmp	r3, #0
 80073b0:	d105      	bne.n	80073be <channel_xfer_start+0x196>
    hctsiz.do_ping = 1;
 80073b2:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80073b6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80073ba:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
  }
  channel->hctsiz = hctsiz.value;
 80073be:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80073c0:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80073c2:	611a      	str	r2, [r3, #16]
  edpt->next_do_ping = 0;
 80073c4:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 80073c8:	7a93      	ldrb	r3, [r2, #10]
 80073ca:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80073ce:	7293      	strb	r3, [r2, #10]

  // pre-calculate next PID based on packet count, adjusted in transfer complete interrupt if short packet
  if (hcchar_bm->ep_num == 0) {
 80073d0:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80073d4:	785b      	ldrb	r3, [r3, #1]
 80073d6:	f003 0378 	and.w	r3, r3, #120	@ 0x78
 80073da:	b2db      	uxtb	r3, r3
 80073dc:	2b00      	cmp	r3, #0
 80073de:	d107      	bne.n	80073f0 <channel_xfer_start+0x1c8>
    edpt->next_pid = HCTSIZ_PID_DATA1; // control data and status stage always start with DATA1
 80073e0:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 80073e4:	7a93      	ldrb	r3, [r2, #10]
 80073e6:	2102      	movs	r1, #2
 80073e8:	f361 1305 	bfi	r3, r1, #4, #2
 80073ec:	7293      	strb	r3, [r2, #10]
 80073ee:	e024      	b.n	800743a <channel_xfer_start+0x212>
  } else {
    edpt->next_pid = cal_next_pid(edpt->next_pid, packet_count);
 80073f0:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80073f4:	7a9b      	ldrb	r3, [r3, #10]
 80073f6:	f3c3 1301 	ubfx	r3, r3, #4, #2
 80073fa:	b2db      	uxtb	r3, r3
 80073fc:	461a      	mov	r2, r3
 80073fe:	f8b7 3078 	ldrh.w	r3, [r7, #120]	@ 0x78
 8007402:	b2db      	uxtb	r3, r3
 8007404:	f887 2063 	strb.w	r2, [r7, #99]	@ 0x63
 8007408:	f887 3062 	strb.w	r3, [r7, #98]	@ 0x62
  if (packet_count & 0x01) {
 800740c:	f897 3062 	ldrb.w	r3, [r7, #98]	@ 0x62
 8007410:	f003 0301 	and.w	r3, r3, #1
 8007414:	2b00      	cmp	r3, #0
 8007416:	d005      	beq.n	8007424 <channel_xfer_start+0x1fc>
    return pid ^ 0x02; // toggle DATA0 and DATA1
 8007418:	f897 3063 	ldrb.w	r3, [r7, #99]	@ 0x63
 800741c:	f083 0302 	eor.w	r3, r3, #2
 8007420:	b2db      	uxtb	r3, r3
 8007422:	e001      	b.n	8007428 <channel_xfer_start+0x200>
    return pid;
 8007424:	f897 3063 	ldrb.w	r3, [r7, #99]	@ 0x63
    edpt->next_pid = cal_next_pid(edpt->next_pid, packet_count);
 8007428:	f003 0303 	and.w	r3, r3, #3
 800742c:	b2d9      	uxtb	r1, r3
 800742e:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 8007432:	7a93      	ldrb	r3, [r2, #10]
 8007434:	f361 1305 	bfi	r3, r1, #4, #2
 8007438:	7293      	strb	r3, [r2, #10]
  }

  channel->hcsplt = edpt->hcsplt;
 800743a:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800743e:	685a      	ldr	r2, [r3, #4]
 8007440:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8007442:	605a      	str	r2, [r3, #4]
  channel->hcint = 0xFFFFFFFFU; // clear all channel interrupts
 8007444:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8007446:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800744a:	609a      	str	r2, [r3, #8]
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	65fb      	str	r3, [r7, #92]	@ 0x5c
  const dwc2_ghwcfg2_t ghwcfg2 = {.value = dwc2->ghwcfg2};
 8007450:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007452:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007454:	627b      	str	r3, [r7, #36]	@ 0x24
  return CFG_TUH_DWC2_DMA_ENABLE && ghwcfg2.arch == GHWCFG2_ARCH_INTERNAL_DMA;
 8007456:	2300      	movs	r3, #0

  if (dma_host_enabled(dwc2)) {
 8007458:	2b00      	cmp	r3, #0
 800745a:	d076      	beq.n	800754a <channel_xfer_start+0x322>
    uint32_t hcintmsk = HCINT_HALTED;
 800745c:	2302      	movs	r3, #2
 800745e:	677b      	str	r3, [r7, #116]	@ 0x74
    channel->hcintmsk = hcintmsk;
 8007460:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8007462:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8007464:	60da      	str	r2, [r3, #12]
    dwc2->haintmsk |= TU_BIT(ch_id);
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	f8d3 2418 	ldr.w	r2, [r3, #1048]	@ 0x418
 800746c:	78fb      	ldrb	r3, [r7, #3]
 800746e:	2101      	movs	r1, #1
 8007470:	fa01 f303 	lsl.w	r3, r1, r3
 8007474:	431a      	orrs	r2, r3
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	f8c3 2418 	str.w	r2, [r3, #1048]	@ 0x418

    channel->hcdma = (uint32_t) edpt->buffer;
 800747c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8007480:	691b      	ldr	r3, [r3, #16]
 8007482:	461a      	mov	r2, r3
 8007484:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8007486:	615a      	str	r2, [r3, #20]

    if (hcchar_bm->ep_dir == TUSB_DIR_IN) {
 8007488:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800748c:	785b      	ldrb	r3, [r3, #1]
 800748e:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8007492:	b2db      	uxtb	r3, r3
 8007494:	2b00      	cmp	r3, #0
 8007496:	d047      	beq.n	8007528 <channel_xfer_start+0x300>
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	65bb      	str	r3, [r7, #88]	@ 0x58
 800749c:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800749e:	657b      	str	r3, [r7, #84]	@ 0x54
  TU_ASSERT(req_queue_avail(dwc2, channel_is_periodic(channel->hcchar)));
 80074a0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80074a2:	681b      	ldr	r3, [r3, #0]
 80074a4:	653b      	str	r3, [r7, #80]	@ 0x50
  const dwc2_channel_char_t hcchar_bm = {.value = hcchar};
 80074a6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80074a8:	61fb      	str	r3, [r7, #28]
  return hcchar_bm.ep_type == HCCHAR_EPTYPE_INTERRUPT || hcchar_bm.ep_type == HCCHAR_EPTYPE_ISOCHRONOUS;
 80074aa:	7fbb      	ldrb	r3, [r7, #30]
 80074ac:	f003 030c 	and.w	r3, r3, #12
 80074b0:	b2db      	uxtb	r3, r3
 80074b2:	2b0c      	cmp	r3, #12
 80074b4:	d005      	beq.n	80074c2 <channel_xfer_start+0x29a>
 80074b6:	7fbb      	ldrb	r3, [r7, #30]
 80074b8:	f003 030c 	and.w	r3, r3, #12
 80074bc:	b2db      	uxtb	r3, r3
 80074be:	2b04      	cmp	r3, #4
 80074c0:	d101      	bne.n	80074c6 <channel_xfer_start+0x29e>
 80074c2:	2301      	movs	r3, #1
 80074c4:	e000      	b.n	80074c8 <channel_xfer_start+0x2a0>
 80074c6:	2300      	movs	r3, #0
 80074c8:	f003 0301 	and.w	r3, r3, #1
 80074cc:	b2da      	uxtb	r2, r3
 80074ce:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80074d0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80074d2:	4613      	mov	r3, r2
 80074d4:	f887 304b 	strb.w	r3, [r7, #75]	@ 0x4b
  if (is_period) {
 80074d8:	f897 304b 	ldrb.w	r3, [r7, #75]	@ 0x4b
 80074dc:	2b00      	cmp	r3, #0
 80074de:	d00b      	beq.n	80074f8 <channel_xfer_start+0x2d0>
    const dwc2_hptxsts_t hptxsts = {.value = dwc2->hptxsts};
 80074e0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80074e2:	f8d3 3410 	ldr.w	r3, [r3, #1040]	@ 0x410
 80074e6:	61bb      	str	r3, [r7, #24]
    return hptxsts.req_queue_available;
 80074e8:	7ebb      	ldrb	r3, [r7, #26]
 80074ea:	f3c3 0306 	ubfx	r3, r3, #0, #7
 80074ee:	b2db      	uxtb	r3, r3
 80074f0:	e006      	b.n	8007500 <channel_xfer_start+0x2d8>
 80074f2:	bf00      	nop
 80074f4:	20000bc0 	.word	0x20000bc0
    const dwc2_hnptxsts_t hnptxsts = {.value = dwc2->hnptxsts};
 80074f8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80074fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80074fc:	617b      	str	r3, [r7, #20]
    return hnptxsts.req_queue_available;
 80074fe:	7dbb      	ldrb	r3, [r7, #22]
  TU_ASSERT(req_queue_avail(dwc2, channel_is_periodic(channel->hcchar)));
 8007500:	2b00      	cmp	r3, #0
 8007502:	d10a      	bne.n	800751a <channel_xfer_start+0x2f2>
 8007504:	4b66      	ldr	r3, [pc, #408]	@ (80076a0 <channel_xfer_start+0x478>)
 8007506:	647b      	str	r3, [r7, #68]	@ 0x44
 8007508:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800750a:	681b      	ldr	r3, [r3, #0]
 800750c:	f003 0301 	and.w	r3, r3, #1
 8007510:	2b00      	cmp	r3, #0
 8007512:	f000 80bc 	beq.w	800768e <channel_xfer_start+0x466>
 8007516:	be00      	bkpt	0x0000
 8007518:	e0b9      	b.n	800768e <channel_xfer_start+0x466>
  channel->hcchar |= HCCHAR_CHENA;
 800751a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800751c:	681b      	ldr	r3, [r3, #0]
 800751e:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8007522:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007524:	601a      	str	r2, [r3, #0]
  return true;
 8007526:	e0b5      	b.n	8007694 <channel_xfer_start+0x46c>
      channel_send_in_token(dwc2, channel);
    } else {
      hcd_dcache_clean(edpt->buffer, edpt->buflen);
 8007528:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800752c:	691a      	ldr	r2, [r3, #16]
 800752e:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8007532:	8a9b      	ldrh	r3, [r3, #20]
 8007534:	4619      	mov	r1, r3
 8007536:	4610      	mov	r0, r2
 8007538:	f7fc fe3c 	bl	80041b4 <hcd_dcache_clean>
      channel->hcchar |= HCCHAR_CHENA;
 800753c:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800753e:	681b      	ldr	r3, [r3, #0]
 8007540:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8007544:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8007546:	601a      	str	r2, [r3, #0]
 8007548:	e0a4      	b.n	8007694 <channel_xfer_start+0x46c>
    }
  } else {
    uint32_t hcintmsk = HCINT_NAK | HCINT_XACT_ERR | HCINT_STALL | HCINT_XFER_COMPLETE | HCINT_DATATOGGLE_ERR;
 800754a:	f240 4399 	movw	r3, #1177	@ 0x499
 800754e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    if (hcchar_bm->ep_dir == TUSB_DIR_IN) {
 8007552:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8007556:	785b      	ldrb	r3, [r3, #1]
 8007558:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800755c:	b2db      	uxtb	r3, r3
 800755e:	2b00      	cmp	r3, #0
 8007560:	d006      	beq.n	8007570 <channel_xfer_start+0x348>
      hcintmsk |= HCINT_BABBLE_ERR | HCINT_DATATOGGLE_ERR | HCINT_ACK;
 8007562:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8007566:	f443 63a4 	orr.w	r3, r3, #1312	@ 0x520
 800756a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800756e:	e01a      	b.n	80075a6 <channel_xfer_start+0x37e>
    } else {
      hcintmsk |= HCINT_NYET;
 8007570:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8007574:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007578:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
      if (edpt->hcsplt_bm.split_en || hctsiz.do_ping) {
 800757c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8007580:	79db      	ldrb	r3, [r3, #7]
 8007582:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8007586:	b2db      	uxtb	r3, r3
 8007588:	2b00      	cmp	r3, #0
 800758a:	d106      	bne.n	800759a <channel_xfer_start+0x372>
 800758c:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8007590:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8007594:	b2db      	uxtb	r3, r3
 8007596:	2b00      	cmp	r3, #0
 8007598:	d005      	beq.n	80075a6 <channel_xfer_start+0x37e>
        hcintmsk |= HCINT_ACK;
 800759a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800759e:	f043 0320 	orr.w	r3, r3, #32
 80075a2:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
      }
    }
    channel->hcintmsk = hcintmsk;
 80075a6:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80075a8:	f8d7 208c 	ldr.w	r2, [r7, #140]	@ 0x8c
 80075ac:	60da      	str	r2, [r3, #12]
    dwc2->haintmsk |= TU_BIT(ch_id);
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	f8d3 2418 	ldr.w	r2, [r3, #1048]	@ 0x418
 80075b4:	78fb      	ldrb	r3, [r7, #3]
 80075b6:	2101      	movs	r1, #1
 80075b8:	fa01 f303 	lsl.w	r3, r1, r3
 80075bc:	431a      	orrs	r2, r3
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	f8c3 2418 	str.w	r2, [r3, #1048]	@ 0x418
    // enable channel for slave mode:
    // - OUT: it will enable corresponding FIFO channel
    // - IN : it will write an IN request to the Non-periodic Request Queue, this will have dwc2 trying to send
    // IN Token. If we got NAK, we have to re-enable the channel again in the interrupt. Due to the way usbh stack only
    // call hcd_edpt_xfer() once, we will need to manage de-allocate/re-allocate IN channel dynamically.
    if (hcchar_bm->ep_dir == TUSB_DIR_IN) {
 80075c4:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80075c8:	785b      	ldrb	r3, [r3, #1]
 80075ca:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 80075ce:	b2db      	uxtb	r3, r3
 80075d0:	2b00      	cmp	r3, #0
 80075d2:	d043      	beq.n	800765c <channel_xfer_start+0x434>
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	643b      	str	r3, [r7, #64]	@ 0x40
 80075d8:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80075da:	63fb      	str	r3, [r7, #60]	@ 0x3c
  TU_ASSERT(req_queue_avail(dwc2, channel_is_periodic(channel->hcchar)));
 80075dc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80075de:	681b      	ldr	r3, [r3, #0]
 80075e0:	63bb      	str	r3, [r7, #56]	@ 0x38
  const dwc2_channel_char_t hcchar_bm = {.value = hcchar};
 80075e2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80075e4:	613b      	str	r3, [r7, #16]
  return hcchar_bm.ep_type == HCCHAR_EPTYPE_INTERRUPT || hcchar_bm.ep_type == HCCHAR_EPTYPE_ISOCHRONOUS;
 80075e6:	7cbb      	ldrb	r3, [r7, #18]
 80075e8:	f003 030c 	and.w	r3, r3, #12
 80075ec:	b2db      	uxtb	r3, r3
 80075ee:	2b0c      	cmp	r3, #12
 80075f0:	d005      	beq.n	80075fe <channel_xfer_start+0x3d6>
 80075f2:	7cbb      	ldrb	r3, [r7, #18]
 80075f4:	f003 030c 	and.w	r3, r3, #12
 80075f8:	b2db      	uxtb	r3, r3
 80075fa:	2b04      	cmp	r3, #4
 80075fc:	d101      	bne.n	8007602 <channel_xfer_start+0x3da>
 80075fe:	2301      	movs	r3, #1
 8007600:	e000      	b.n	8007604 <channel_xfer_start+0x3dc>
 8007602:	2300      	movs	r3, #0
 8007604:	f003 0301 	and.w	r3, r3, #1
 8007608:	b2da      	uxtb	r2, r3
 800760a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800760c:	637b      	str	r3, [r7, #52]	@ 0x34
 800760e:	4613      	mov	r3, r2
 8007610:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (is_period) {
 8007614:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8007618:	2b00      	cmp	r3, #0
 800761a:	d008      	beq.n	800762e <channel_xfer_start+0x406>
    const dwc2_hptxsts_t hptxsts = {.value = dwc2->hptxsts};
 800761c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800761e:	f8d3 3410 	ldr.w	r3, [r3, #1040]	@ 0x410
 8007622:	60fb      	str	r3, [r7, #12]
    return hptxsts.req_queue_available;
 8007624:	7bbb      	ldrb	r3, [r7, #14]
 8007626:	f3c3 0306 	ubfx	r3, r3, #0, #7
 800762a:	b2db      	uxtb	r3, r3
 800762c:	e003      	b.n	8007636 <channel_xfer_start+0x40e>
    const dwc2_hnptxsts_t hnptxsts = {.value = dwc2->hnptxsts};
 800762e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007630:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007632:	60bb      	str	r3, [r7, #8]
    return hnptxsts.req_queue_available;
 8007634:	7abb      	ldrb	r3, [r7, #10]
  TU_ASSERT(req_queue_avail(dwc2, channel_is_periodic(channel->hcchar)));
 8007636:	2b00      	cmp	r3, #0
 8007638:	d109      	bne.n	800764e <channel_xfer_start+0x426>
 800763a:	4b19      	ldr	r3, [pc, #100]	@ (80076a0 <channel_xfer_start+0x478>)
 800763c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800763e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007640:	681b      	ldr	r3, [r3, #0]
 8007642:	f003 0301 	and.w	r3, r3, #1
 8007646:	2b00      	cmp	r3, #0
 8007648:	d023      	beq.n	8007692 <channel_xfer_start+0x46a>
 800764a:	be00      	bkpt	0x0000
 800764c:	e021      	b.n	8007692 <channel_xfer_start+0x46a>
  channel->hcchar |= HCCHAR_CHENA;
 800764e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007650:	681b      	ldr	r3, [r3, #0]
 8007652:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8007656:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007658:	601a      	str	r2, [r3, #0]
  return true;
 800765a:	e01b      	b.n	8007694 <channel_xfer_start+0x46c>
      channel_send_in_token(dwc2, channel);
    } else {
      channel->hcchar |= HCCHAR_CHENA;
 800765c:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800765e:	681b      	ldr	r3, [r3, #0]
 8007660:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8007664:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8007666:	601a      	str	r2, [r3, #0]
      if (edpt->buflen > 0) {
 8007668:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800766c:	8a9b      	ldrh	r3, [r3, #20]
 800766e:	2b00      	cmp	r3, #0
 8007670:	d010      	beq.n	8007694 <channel_xfer_start+0x46c>
        // To prevent conflict with other channel, we will enable periodic/non-periodic FIFO empty interrupt accordingly
        // And write packet in the interrupt handler
        dwc2->gintmsk |= (is_period ? GINTSTS_PTX_FIFO_EMPTY : GINTSTS_NPTX_FIFO_EMPTY);
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	699b      	ldr	r3, [r3, #24]
 8007676:	f897 207b 	ldrb.w	r2, [r7, #123]	@ 0x7b
 800767a:	2a00      	cmp	r2, #0
 800767c:	d002      	beq.n	8007684 <channel_xfer_start+0x45c>
 800767e:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8007682:	e000      	b.n	8007686 <channel_xfer_start+0x45e>
 8007684:	2220      	movs	r2, #32
 8007686:	431a      	orrs	r2, r3
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	619a      	str	r2, [r3, #24]
 800768c:	e002      	b.n	8007694 <channel_xfer_start+0x46c>
  TU_ASSERT(req_queue_avail(dwc2, channel_is_periodic(channel->hcchar)));
 800768e:	bf00      	nop
 8007690:	e000      	b.n	8007694 <channel_xfer_start+0x46c>
 8007692:	bf00      	nop
      }
    }
  }

  return true;
 8007694:	2301      	movs	r3, #1
}
 8007696:	4618      	mov	r0, r3
 8007698:	3790      	adds	r7, #144	@ 0x90
 800769a:	46bd      	mov	sp, r7
 800769c:	bd80      	pop	{r7, pc}
 800769e:	bf00      	nop
 80076a0:	e000edf0 	.word	0xe000edf0

080076a4 <edpt_xfer_kickoff>:

// kick-off transfer with an endpoint
static bool edpt_xfer_kickoff(dwc2_regs_t* dwc2, uint8_t ep_id) {
 80076a4:	b580      	push	{r7, lr}
 80076a6:	b08a      	sub	sp, #40	@ 0x28
 80076a8:	af00      	add	r7, sp, #0
 80076aa:	6078      	str	r0, [r7, #4]
 80076ac:	460b      	mov	r3, r1
 80076ae:	70fb      	strb	r3, [r7, #3]
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	61bb      	str	r3, [r7, #24]
 80076b4:	69bb      	ldr	r3, [r7, #24]
 80076b6:	617b      	str	r3, [r7, #20]
  const dwc2_ghwcfg2_t ghwcfg2 = {.value = dwc2->ghwcfg2};
 80076b8:	697b      	ldr	r3, [r7, #20]
 80076ba:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80076bc:	60bb      	str	r3, [r7, #8]
  return tu_min8(ghwcfg2.num_host_ch + 1, DWC2_CHANNEL_COUNT_MAX);
 80076be:	68bb      	ldr	r3, [r7, #8]
 80076c0:	f3c3 3383 	ubfx	r3, r3, #14, #4
 80076c4:	b2db      	uxtb	r3, r3
 80076c6:	3301      	adds	r3, #1
 80076c8:	b2db      	uxtb	r3, r3
 80076ca:	74fb      	strb	r3, [r7, #19]
 80076cc:	2310      	movs	r3, #16
 80076ce:	74bb      	strb	r3, [r7, #18]
TU_ATTR_ALWAYS_INLINE static inline uint8_t  tu_min8  (uint8_t  x, uint8_t y ) { return (x < y) ? x : y; }
 80076d0:	7cfa      	ldrb	r2, [r7, #19]
 80076d2:	7cbb      	ldrb	r3, [r7, #18]
 80076d4:	4293      	cmp	r3, r2
 80076d6:	bf28      	it	cs
 80076d8:	4613      	movcs	r3, r2
 80076da:	b2db      	uxtb	r3, r3
  const uint8_t max_channel = dwc2_channel_count(dwc2);
 80076dc:	747b      	strb	r3, [r7, #17]
  for (uint8_t ch_id = 0; ch_id < max_channel; ch_id++) {
 80076de:	2300      	movs	r3, #0
 80076e0:	743b      	strb	r3, [r7, #16]
 80076e2:	e019      	b.n	8007718 <edpt_xfer_kickoff+0x74>
    hcd_xfer_t* xfer = &_hcd_data.xfer[ch_id];
 80076e4:	7c3b      	ldrb	r3, [r7, #16]
 80076e6:	00db      	lsls	r3, r3, #3
 80076e8:	4a22      	ldr	r2, [pc, #136]	@ (8007774 <edpt_xfer_kickoff+0xd0>)
 80076ea:	4413      	add	r3, r2
 80076ec:	60fb      	str	r3, [r7, #12]
    if (!xfer->allocated) {
 80076ee:	68fb      	ldr	r3, [r7, #12]
 80076f0:	781b      	ldrb	r3, [r3, #0]
 80076f2:	b2db      	uxtb	r3, r3
 80076f4:	f083 0301 	eor.w	r3, r3, #1
 80076f8:	b2db      	uxtb	r3, r3
 80076fa:	2b00      	cmp	r3, #0
 80076fc:	d009      	beq.n	8007712 <edpt_xfer_kickoff+0x6e>
      tu_memclr(xfer, sizeof(hcd_xfer_t));
 80076fe:	2208      	movs	r2, #8
 8007700:	2100      	movs	r1, #0
 8007702:	68f8      	ldr	r0, [r7, #12]
 8007704:	f000 fca3 	bl	800804e <memset>
      xfer->allocated = true;
 8007708:	68fb      	ldr	r3, [r7, #12]
 800770a:	2201      	movs	r2, #1
 800770c:	701a      	strb	r2, [r3, #0]
      return ch_id;
 800770e:	7c3b      	ldrb	r3, [r7, #16]
 8007710:	e007      	b.n	8007722 <edpt_xfer_kickoff+0x7e>
  for (uint8_t ch_id = 0; ch_id < max_channel; ch_id++) {
 8007712:	7c3b      	ldrb	r3, [r7, #16]
 8007714:	3301      	adds	r3, #1
 8007716:	743b      	strb	r3, [r7, #16]
 8007718:	7c7a      	ldrb	r2, [r7, #17]
 800771a:	7c3b      	ldrb	r3, [r7, #16]
 800771c:	429a      	cmp	r2, r3
 800771e:	d8e1      	bhi.n	80076e4 <edpt_xfer_kickoff+0x40>
  return TUSB_INDEX_INVALID_8;
 8007720:	23ff      	movs	r3, #255	@ 0xff
  uint8_t ch_id = channel_alloc(dwc2);
 8007722:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  TU_ASSERT(ch_id < 16); // all channel are in used
 8007726:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800772a:	2b0f      	cmp	r3, #15
 800772c:	d90a      	bls.n	8007744 <edpt_xfer_kickoff+0xa0>
 800772e:	4b12      	ldr	r3, [pc, #72]	@ (8007778 <edpt_xfer_kickoff+0xd4>)
 8007730:	61fb      	str	r3, [r7, #28]
 8007732:	69fb      	ldr	r3, [r7, #28]
 8007734:	681b      	ldr	r3, [r3, #0]
 8007736:	f003 0301 	and.w	r3, r3, #1
 800773a:	2b00      	cmp	r3, #0
 800773c:	d000      	beq.n	8007740 <edpt_xfer_kickoff+0x9c>
 800773e:	be00      	bkpt	0x0000
 8007740:	2300      	movs	r3, #0
 8007742:	e012      	b.n	800776a <edpt_xfer_kickoff+0xc6>
  hcd_xfer_t* xfer = &_hcd_data.xfer[ch_id];
 8007744:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8007748:	00db      	lsls	r3, r3, #3
 800774a:	4a0a      	ldr	r2, [pc, #40]	@ (8007774 <edpt_xfer_kickoff+0xd0>)
 800774c:	4413      	add	r3, r2
 800774e:	623b      	str	r3, [r7, #32]
  xfer->ep_id = ep_id;
 8007750:	6a3b      	ldr	r3, [r7, #32]
 8007752:	78fa      	ldrb	r2, [r7, #3]
 8007754:	705a      	strb	r2, [r3, #1]
  xfer->result = XFER_RESULT_INVALID;
 8007756:	6a3b      	ldr	r3, [r7, #32]
 8007758:	2204      	movs	r2, #4
 800775a:	70da      	strb	r2, [r3, #3]

  return channel_xfer_start(dwc2, ch_id);
 800775c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8007760:	4619      	mov	r1, r3
 8007762:	6878      	ldr	r0, [r7, #4]
 8007764:	f7ff fd60 	bl	8007228 <channel_xfer_start>
 8007768:	4603      	mov	r3, r0
}
 800776a:	4618      	mov	r0, r3
 800776c:	3728      	adds	r7, #40	@ 0x28
 800776e:	46bd      	mov	sp, r7
 8007770:	bd80      	pop	{r7, pc}
 8007772:	bf00      	nop
 8007774:	20000bc0 	.word	0x20000bc0
 8007778:	e000edf0 	.word	0xe000edf0

0800777c <hcd_edpt_xfer>:

// Submit a transfer, when complete hcd_event_xfer_complete() must be invoked
bool hcd_edpt_xfer(uint8_t rhport, uint8_t dev_addr, uint8_t ep_addr, uint8_t * buffer, uint16_t buflen) {
 800777c:	b580      	push	{r7, lr}
 800777e:	b08a      	sub	sp, #40	@ 0x28
 8007780:	af00      	add	r7, sp, #0
 8007782:	603b      	str	r3, [r7, #0]
 8007784:	4603      	mov	r3, r0
 8007786:	71fb      	strb	r3, [r7, #7]
 8007788:	460b      	mov	r3, r1
 800778a:	71bb      	strb	r3, [r7, #6]
 800778c:	4613      	mov	r3, r2
 800778e:	717b      	strb	r3, [r7, #5]
 8007790:	79fb      	ldrb	r3, [r7, #7]
 8007792:	737b      	strb	r3, [r7, #13]
  if (rhport >= DWC2_CONTROLLER_COUNT) {
 8007794:	7b7b      	ldrb	r3, [r7, #13]
 8007796:	2b01      	cmp	r3, #1
 8007798:	d901      	bls.n	800779e <hcd_edpt_xfer+0x22>
    rhport = 0;
 800779a:	2300      	movs	r3, #0
 800779c:	737b      	strb	r3, [r7, #13]
  return (dwc2_regs_t*)_dwc2_controller[rhport].reg_base;
 800779e:	7b7b      	ldrb	r3, [r7, #13]
 80077a0:	4a47      	ldr	r2, [pc, #284]	@ (80078c0 <hcd_edpt_xfer+0x144>)
 80077a2:	011b      	lsls	r3, r3, #4
 80077a4:	4413      	add	r3, r2
 80077a6:	681b      	ldr	r3, [r3, #0]
  dwc2_regs_t* dwc2 = DWC2_REG(rhport);
 80077a8:	627b      	str	r3, [r7, #36]	@ 0x24
 80077aa:	797b      	ldrb	r3, [r7, #5]
 80077ac:	73bb      	strb	r3, [r7, #14]
  return (uint8_t)(addr & (~TUSB_DIR_IN_MASK));
 80077ae:	7bbb      	ldrb	r3, [r7, #14]
 80077b0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80077b4:	b2db      	uxtb	r3, r3
  const uint8_t ep_num = tu_edpt_number(ep_addr);
 80077b6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80077ba:	797b      	ldrb	r3, [r7, #5]
 80077bc:	73fb      	strb	r3, [r7, #15]
  return (addr & TUSB_DIR_IN_MASK) ? TUSB_DIR_IN : TUSB_DIR_OUT;
 80077be:	7bfb      	ldrb	r3, [r7, #15]
 80077c0:	09db      	lsrs	r3, r3, #7
 80077c2:	b2db      	uxtb	r3, r3
  const uint8_t ep_dir = tu_edpt_dir(ep_addr);
 80077c4:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 80077c8:	79bb      	ldrb	r3, [r7, #6]
 80077ca:	75fb      	strb	r3, [r7, #23]
 80077cc:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80077d0:	75bb      	strb	r3, [r7, #22]
 80077d2:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 80077d6:	757b      	strb	r3, [r7, #21]
  for (uint8_t i = 0; i < (uint8_t)CFG_TUH_DWC2_ENDPOINT_MAX; i++) {
 80077d8:	2300      	movs	r3, #0
 80077da:	753b      	strb	r3, [r7, #20]
 80077dc:	e032      	b.n	8007844 <hcd_edpt_xfer+0xc8>
    const dwc2_channel_char_t* hcchar_bm = &_hcd_data.edpt[i].hcchar_bm;
 80077de:	7d3a      	ldrb	r2, [r7, #20]
 80077e0:	4613      	mov	r3, r2
 80077e2:	005b      	lsls	r3, r3, #1
 80077e4:	4413      	add	r3, r2
 80077e6:	00db      	lsls	r3, r3, #3
 80077e8:	3380      	adds	r3, #128	@ 0x80
 80077ea:	4a36      	ldr	r2, [pc, #216]	@ (80078c4 <hcd_edpt_xfer+0x148>)
 80077ec:	4413      	add	r3, r2
 80077ee:	613b      	str	r3, [r7, #16]
    if (hcchar_bm->enable && hcchar_bm->dev_addr == dev_addr &&
 80077f0:	693b      	ldr	r3, [r7, #16]
 80077f2:	78db      	ldrb	r3, [r3, #3]
 80077f4:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 80077f8:	b2db      	uxtb	r3, r3
 80077fa:	2b00      	cmp	r3, #0
 80077fc:	d01f      	beq.n	800783e <hcd_edpt_xfer+0xc2>
 80077fe:	693b      	ldr	r3, [r7, #16]
 8007800:	885b      	ldrh	r3, [r3, #2]
 8007802:	f3c3 1386 	ubfx	r3, r3, #6, #7
 8007806:	b2db      	uxtb	r3, r3
 8007808:	461a      	mov	r2, r3
 800780a:	7dfb      	ldrb	r3, [r7, #23]
 800780c:	4293      	cmp	r3, r2
 800780e:	d116      	bne.n	800783e <hcd_edpt_xfer+0xc2>
        hcchar_bm->ep_num == ep_num && (ep_num == 0 || hcchar_bm->ep_dir == ep_dir)) {
 8007810:	693b      	ldr	r3, [r7, #16]
 8007812:	785b      	ldrb	r3, [r3, #1]
 8007814:	f3c3 03c3 	ubfx	r3, r3, #3, #4
 8007818:	b2db      	uxtb	r3, r3
 800781a:	461a      	mov	r2, r3
    if (hcchar_bm->enable && hcchar_bm->dev_addr == dev_addr &&
 800781c:	7dbb      	ldrb	r3, [r7, #22]
 800781e:	4293      	cmp	r3, r2
 8007820:	d10d      	bne.n	800783e <hcd_edpt_xfer+0xc2>
        hcchar_bm->ep_num == ep_num && (ep_num == 0 || hcchar_bm->ep_dir == ep_dir)) {
 8007822:	7dbb      	ldrb	r3, [r7, #22]
 8007824:	2b00      	cmp	r3, #0
 8007826:	d008      	beq.n	800783a <hcd_edpt_xfer+0xbe>
 8007828:	693b      	ldr	r3, [r7, #16]
 800782a:	785b      	ldrb	r3, [r3, #1]
 800782c:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8007830:	b2db      	uxtb	r3, r3
 8007832:	461a      	mov	r2, r3
 8007834:	7d7b      	ldrb	r3, [r7, #21]
 8007836:	4293      	cmp	r3, r2
 8007838:	d101      	bne.n	800783e <hcd_edpt_xfer+0xc2>
      return i;
 800783a:	7d3b      	ldrb	r3, [r7, #20]
 800783c:	e006      	b.n	800784c <hcd_edpt_xfer+0xd0>
  for (uint8_t i = 0; i < (uint8_t)CFG_TUH_DWC2_ENDPOINT_MAX; i++) {
 800783e:	7d3b      	ldrb	r3, [r7, #20]
 8007840:	3301      	adds	r3, #1
 8007842:	753b      	strb	r3, [r7, #20]
 8007844:	7d3b      	ldrb	r3, [r7, #20]
 8007846:	2b0f      	cmp	r3, #15
 8007848:	d9c9      	bls.n	80077de <hcd_edpt_xfer+0x62>
  return TUSB_INDEX_INVALID_8;
 800784a:	23ff      	movs	r3, #255	@ 0xff

  uint8_t ep_id = edpt_find_opened(dev_addr, ep_num, ep_dir);
 800784c:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
  TU_ASSERT(ep_id < CFG_TUH_DWC2_ENDPOINT_MAX);
 8007850:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8007854:	2b0f      	cmp	r3, #15
 8007856:	d90a      	bls.n	800786e <hcd_edpt_xfer+0xf2>
 8007858:	4b1b      	ldr	r3, [pc, #108]	@ (80078c8 <hcd_edpt_xfer+0x14c>)
 800785a:	61bb      	str	r3, [r7, #24]
 800785c:	69bb      	ldr	r3, [r7, #24]
 800785e:	681b      	ldr	r3, [r3, #0]
 8007860:	f003 0301 	and.w	r3, r3, #1
 8007864:	2b00      	cmp	r3, #0
 8007866:	d000      	beq.n	800786a <hcd_edpt_xfer+0xee>
 8007868:	be00      	bkpt	0x0000
 800786a:	2300      	movs	r3, #0
 800786c:	e024      	b.n	80078b8 <hcd_edpt_xfer+0x13c>
  hcd_endpoint_t* edpt = &_hcd_data.edpt[ep_id];
 800786e:	f897 2021 	ldrb.w	r2, [r7, #33]	@ 0x21
 8007872:	4613      	mov	r3, r2
 8007874:	005b      	lsls	r3, r3, #1
 8007876:	4413      	add	r3, r2
 8007878:	00db      	lsls	r3, r3, #3
 800787a:	3380      	adds	r3, #128	@ 0x80
 800787c:	4a11      	ldr	r2, [pc, #68]	@ (80078c4 <hcd_edpt_xfer+0x148>)
 800787e:	4413      	add	r3, r2
 8007880:	61fb      	str	r3, [r7, #28]

  edpt->buffer = buffer;
 8007882:	69fb      	ldr	r3, [r7, #28]
 8007884:	683a      	ldr	r2, [r7, #0]
 8007886:	611a      	str	r2, [r3, #16]
  edpt->buflen = buflen;
 8007888:	69fb      	ldr	r3, [r7, #28]
 800788a:	8e3a      	ldrh	r2, [r7, #48]	@ 0x30
 800788c:	829a      	strh	r2, [r3, #20]

  if (ep_num == 0) {
 800788e:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8007892:	2b00      	cmp	r3, #0
 8007894:	d109      	bne.n	80078aa <hcd_edpt_xfer+0x12e>
    // update ep_dir since control endpoint can switch direction
    edpt->hcchar_bm.ep_dir = ep_dir;
 8007896:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 800789a:	f003 0301 	and.w	r3, r3, #1
 800789e:	b2d9      	uxtb	r1, r3
 80078a0:	69fa      	ldr	r2, [r7, #28]
 80078a2:	7853      	ldrb	r3, [r2, #1]
 80078a4:	f361 13c7 	bfi	r3, r1, #7, #1
 80078a8:	7053      	strb	r3, [r2, #1]
  }

  return edpt_xfer_kickoff(dwc2, ep_id);
 80078aa:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 80078ae:	4619      	mov	r1, r3
 80078b0:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80078b2:	f7ff fef7 	bl	80076a4 <edpt_xfer_kickoff>
 80078b6:	4603      	mov	r3, r0
}
 80078b8:	4618      	mov	r0, r3
 80078ba:	3728      	adds	r7, #40	@ 0x28
 80078bc:	46bd      	mov	sp, r7
 80078be:	bd80      	pop	{r7, pc}
 80078c0:	08008130 	.word	0x08008130
 80078c4:	20000bc0 	.word	0x20000bc0
 80078c8:	e000edf0 	.word	0xe000edf0

080078cc <hcd_edpt_abort_xfer>:

// Abort a queued transfer. Note: it can only abort transfer that has not been started
// Return true if a queued transfer is aborted, false if there is no transfer to abort
bool hcd_edpt_abort_xfer(uint8_t rhport, uint8_t dev_addr, uint8_t ep_addr) {
 80078cc:	b480      	push	{r7}
 80078ce:	b099      	sub	sp, #100	@ 0x64
 80078d0:	af00      	add	r7, sp, #0
 80078d2:	4603      	mov	r3, r0
 80078d4:	71fb      	strb	r3, [r7, #7]
 80078d6:	460b      	mov	r3, r1
 80078d8:	71bb      	strb	r3, [r7, #6]
 80078da:	4613      	mov	r3, r2
 80078dc:	717b      	strb	r3, [r7, #5]
 80078de:	79fb      	ldrb	r3, [r7, #7]
 80078e0:	f887 3049 	strb.w	r3, [r7, #73]	@ 0x49
  if (rhport >= DWC2_CONTROLLER_COUNT) {
 80078e4:	f897 3049 	ldrb.w	r3, [r7, #73]	@ 0x49
 80078e8:	2b01      	cmp	r3, #1
 80078ea:	d902      	bls.n	80078f2 <hcd_edpt_abort_xfer+0x26>
    rhport = 0;
 80078ec:	2300      	movs	r3, #0
 80078ee:	f887 3049 	strb.w	r3, [r7, #73]	@ 0x49
  return (dwc2_regs_t*)_dwc2_controller[rhport].reg_base;
 80078f2:	f897 3049 	ldrb.w	r3, [r7, #73]	@ 0x49
 80078f6:	4a9b      	ldr	r2, [pc, #620]	@ (8007b64 <hcd_edpt_abort_xfer+0x298>)
 80078f8:	011b      	lsls	r3, r3, #4
 80078fa:	4413      	add	r3, r2
 80078fc:	681b      	ldr	r3, [r3, #0]
  dwc2_regs_t* dwc2 = DWC2_REG(rhport);
 80078fe:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8007900:	797b      	ldrb	r3, [r7, #5]
 8007902:	f887 304a 	strb.w	r3, [r7, #74]	@ 0x4a
  return (uint8_t)(addr & (~TUSB_DIR_IN_MASK));
 8007906:	f897 304a 	ldrb.w	r3, [r7, #74]	@ 0x4a
 800790a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800790e:	b2db      	uxtb	r3, r3
  const uint8_t ep_num = tu_edpt_number(ep_addr);
 8007910:	f887 305b 	strb.w	r3, [r7, #91]	@ 0x5b
 8007914:	797b      	ldrb	r3, [r7, #5]
 8007916:	f887 304b 	strb.w	r3, [r7, #75]	@ 0x4b
  return (addr & TUSB_DIR_IN_MASK) ? TUSB_DIR_IN : TUSB_DIR_OUT;
 800791a:	f897 304b 	ldrb.w	r3, [r7, #75]	@ 0x4b
 800791e:	09db      	lsrs	r3, r3, #7
 8007920:	b2db      	uxtb	r3, r3
  const uint8_t ep_dir = tu_edpt_dir(ep_addr);
 8007922:	f887 305a 	strb.w	r3, [r7, #90]	@ 0x5a
 8007926:	79bb      	ldrb	r3, [r7, #6]
 8007928:	f887 3053 	strb.w	r3, [r7, #83]	@ 0x53
 800792c:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 8007930:	f887 3052 	strb.w	r3, [r7, #82]	@ 0x52
 8007934:	f897 305a 	ldrb.w	r3, [r7, #90]	@ 0x5a
 8007938:	f887 3051 	strb.w	r3, [r7, #81]	@ 0x51
  for (uint8_t i = 0; i < (uint8_t)CFG_TUH_DWC2_ENDPOINT_MAX; i++) {
 800793c:	2300      	movs	r3, #0
 800793e:	f887 3050 	strb.w	r3, [r7, #80]	@ 0x50
 8007942:	e03a      	b.n	80079ba <hcd_edpt_abort_xfer+0xee>
    const dwc2_channel_char_t* hcchar_bm = &_hcd_data.edpt[i].hcchar_bm;
 8007944:	f897 2050 	ldrb.w	r2, [r7, #80]	@ 0x50
 8007948:	4613      	mov	r3, r2
 800794a:	005b      	lsls	r3, r3, #1
 800794c:	4413      	add	r3, r2
 800794e:	00db      	lsls	r3, r3, #3
 8007950:	3380      	adds	r3, #128	@ 0x80
 8007952:	4a85      	ldr	r2, [pc, #532]	@ (8007b68 <hcd_edpt_abort_xfer+0x29c>)
 8007954:	4413      	add	r3, r2
 8007956:	64fb      	str	r3, [r7, #76]	@ 0x4c
    if (hcchar_bm->enable && hcchar_bm->dev_addr == dev_addr &&
 8007958:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800795a:	78db      	ldrb	r3, [r3, #3]
 800795c:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8007960:	b2db      	uxtb	r3, r3
 8007962:	2b00      	cmp	r3, #0
 8007964:	d024      	beq.n	80079b0 <hcd_edpt_abort_xfer+0xe4>
 8007966:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007968:	885b      	ldrh	r3, [r3, #2]
 800796a:	f3c3 1386 	ubfx	r3, r3, #6, #7
 800796e:	b2db      	uxtb	r3, r3
 8007970:	461a      	mov	r2, r3
 8007972:	f897 3053 	ldrb.w	r3, [r7, #83]	@ 0x53
 8007976:	4293      	cmp	r3, r2
 8007978:	d11a      	bne.n	80079b0 <hcd_edpt_abort_xfer+0xe4>
        hcchar_bm->ep_num == ep_num && (ep_num == 0 || hcchar_bm->ep_dir == ep_dir)) {
 800797a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800797c:	785b      	ldrb	r3, [r3, #1]
 800797e:	f3c3 03c3 	ubfx	r3, r3, #3, #4
 8007982:	b2db      	uxtb	r3, r3
 8007984:	461a      	mov	r2, r3
    if (hcchar_bm->enable && hcchar_bm->dev_addr == dev_addr &&
 8007986:	f897 3052 	ldrb.w	r3, [r7, #82]	@ 0x52
 800798a:	4293      	cmp	r3, r2
 800798c:	d110      	bne.n	80079b0 <hcd_edpt_abort_xfer+0xe4>
        hcchar_bm->ep_num == ep_num && (ep_num == 0 || hcchar_bm->ep_dir == ep_dir)) {
 800798e:	f897 3052 	ldrb.w	r3, [r7, #82]	@ 0x52
 8007992:	2b00      	cmp	r3, #0
 8007994:	d009      	beq.n	80079aa <hcd_edpt_abort_xfer+0xde>
 8007996:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007998:	785b      	ldrb	r3, [r3, #1]
 800799a:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 800799e:	b2db      	uxtb	r3, r3
 80079a0:	461a      	mov	r2, r3
 80079a2:	f897 3051 	ldrb.w	r3, [r7, #81]	@ 0x51
 80079a6:	4293      	cmp	r3, r2
 80079a8:	d102      	bne.n	80079b0 <hcd_edpt_abort_xfer+0xe4>
      return i;
 80079aa:	f897 3050 	ldrb.w	r3, [r7, #80]	@ 0x50
 80079ae:	e009      	b.n	80079c4 <hcd_edpt_abort_xfer+0xf8>
  for (uint8_t i = 0; i < (uint8_t)CFG_TUH_DWC2_ENDPOINT_MAX; i++) {
 80079b0:	f897 3050 	ldrb.w	r3, [r7, #80]	@ 0x50
 80079b4:	3301      	adds	r3, #1
 80079b6:	f887 3050 	strb.w	r3, [r7, #80]	@ 0x50
 80079ba:	f897 3050 	ldrb.w	r3, [r7, #80]	@ 0x50
 80079be:	2b0f      	cmp	r3, #15
 80079c0:	d9c0      	bls.n	8007944 <hcd_edpt_abort_xfer+0x78>
  return TUSB_INDEX_INVALID_8;
 80079c2:	23ff      	movs	r3, #255	@ 0xff
  const uint8_t ep_id = edpt_find_opened(dev_addr, ep_num, ep_dir);
 80079c4:	f887 3059 	strb.w	r3, [r7, #89]	@ 0x59
  TU_VERIFY(ep_id < CFG_TUH_DWC2_ENDPOINT_MAX);
 80079c8:	f897 3059 	ldrb.w	r3, [r7, #89]	@ 0x59
 80079cc:	2b0f      	cmp	r3, #15
 80079ce:	d901      	bls.n	80079d4 <hcd_edpt_abort_xfer+0x108>
 80079d0:	2300      	movs	r3, #0
 80079d2:	e0c1      	b.n	8007b58 <hcd_edpt_abort_xfer+0x28c>
 80079d4:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80079d6:	647b      	str	r3, [r7, #68]	@ 0x44
 80079d8:	79bb      	ldrb	r3, [r7, #6]
 80079da:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80079de:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 80079e2:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 80079e6:	f897 305a 	ldrb.w	r3, [r7, #90]	@ 0x5a
 80079ea:	f887 3041 	strb.w	r3, [r7, #65]	@ 0x41
 80079ee:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80079f0:	63fb      	str	r3, [r7, #60]	@ 0x3c
  const dwc2_ghwcfg2_t ghwcfg2 = {.value = dwc2->ghwcfg2};
 80079f2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80079f4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80079f6:	61fb      	str	r3, [r7, #28]
  return tu_min8(ghwcfg2.num_host_ch + 1, DWC2_CHANNEL_COUNT_MAX);
 80079f8:	69fb      	ldr	r3, [r7, #28]
 80079fa:	f3c3 3383 	ubfx	r3, r3, #14, #4
 80079fe:	b2db      	uxtb	r3, r3
 8007a00:	3301      	adds	r3, #1
 8007a02:	b2db      	uxtb	r3, r3
 8007a04:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
 8007a08:	2310      	movs	r3, #16
 8007a0a:	f887 303a 	strb.w	r3, [r7, #58]	@ 0x3a
 8007a0e:	f897 203b 	ldrb.w	r2, [r7, #59]	@ 0x3b
 8007a12:	f897 303a 	ldrb.w	r3, [r7, #58]	@ 0x3a
 8007a16:	4293      	cmp	r3, r2
 8007a18:	bf28      	it	cs
 8007a1a:	4613      	movcs	r3, r2
 8007a1c:	b2db      	uxtb	r3, r3
  const uint8_t max_channel = dwc2_channel_count(dwc2);
 8007a1e:	f887 3039 	strb.w	r3, [r7, #57]	@ 0x39
  for (uint8_t ch_id = 0; ch_id < max_channel; ch_id++) {
 8007a22:	2300      	movs	r3, #0
 8007a24:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38
 8007a28:	e036      	b.n	8007a98 <hcd_edpt_abort_xfer+0x1cc>
    if (_hcd_data.xfer[ch_id].allocated) {
 8007a2a:	f897 3038 	ldrb.w	r3, [r7, #56]	@ 0x38
 8007a2e:	4a4e      	ldr	r2, [pc, #312]	@ (8007b68 <hcd_edpt_abort_xfer+0x29c>)
 8007a30:	f812 3033 	ldrb.w	r3, [r2, r3, lsl #3]
 8007a34:	b2db      	uxtb	r3, r3
 8007a36:	2b00      	cmp	r3, #0
 8007a38:	d029      	beq.n	8007a8e <hcd_edpt_abort_xfer+0x1c2>
      const dwc2_channel_char_t hcchar = {.value = dwc2->channel[ch_id].hcchar};
 8007a3a:	f897 3038 	ldrb.w	r3, [r7, #56]	@ 0x38
 8007a3e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007a40:	3328      	adds	r3, #40	@ 0x28
 8007a42:	015b      	lsls	r3, r3, #5
 8007a44:	4413      	add	r3, r2
 8007a46:	681b      	ldr	r3, [r3, #0]
 8007a48:	61bb      	str	r3, [r7, #24]
      if (hcchar.dev_addr == dev_addr && hcchar.ep_num == ep_num && (ep_num == 0 || hcchar.ep_dir == ep_dir)) {
 8007a4a:	8b7b      	ldrh	r3, [r7, #26]
 8007a4c:	f3c3 1386 	ubfx	r3, r3, #6, #7
 8007a50:	b2db      	uxtb	r3, r3
 8007a52:	461a      	mov	r2, r3
 8007a54:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8007a58:	4293      	cmp	r3, r2
 8007a5a:	d118      	bne.n	8007a8e <hcd_edpt_abort_xfer+0x1c2>
 8007a5c:	7e7b      	ldrb	r3, [r7, #25]
 8007a5e:	f3c3 03c3 	ubfx	r3, r3, #3, #4
 8007a62:	b2db      	uxtb	r3, r3
 8007a64:	461a      	mov	r2, r3
 8007a66:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
 8007a6a:	4293      	cmp	r3, r2
 8007a6c:	d10f      	bne.n	8007a8e <hcd_edpt_abort_xfer+0x1c2>
 8007a6e:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
 8007a72:	2b00      	cmp	r3, #0
 8007a74:	d008      	beq.n	8007a88 <hcd_edpt_abort_xfer+0x1bc>
 8007a76:	7e7b      	ldrb	r3, [r7, #25]
 8007a78:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8007a7c:	b2db      	uxtb	r3, r3
 8007a7e:	461a      	mov	r2, r3
 8007a80:	f897 3041 	ldrb.w	r3, [r7, #65]	@ 0x41
 8007a84:	4293      	cmp	r3, r2
 8007a86:	d102      	bne.n	8007a8e <hcd_edpt_abort_xfer+0x1c2>
        return ch_id;
 8007a88:	f897 3038 	ldrb.w	r3, [r7, #56]	@ 0x38
 8007a8c:	e00b      	b.n	8007aa6 <hcd_edpt_abort_xfer+0x1da>
  for (uint8_t ch_id = 0; ch_id < max_channel; ch_id++) {
 8007a8e:	f897 3038 	ldrb.w	r3, [r7, #56]	@ 0x38
 8007a92:	3301      	adds	r3, #1
 8007a94:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38
 8007a98:	f897 2039 	ldrb.w	r2, [r7, #57]	@ 0x39
 8007a9c:	f897 3038 	ldrb.w	r3, [r7, #56]	@ 0x38
 8007aa0:	429a      	cmp	r2, r3
 8007aa2:	d8c2      	bhi.n	8007a2a <hcd_edpt_abort_xfer+0x15e>
  return TUSB_INDEX_INVALID_8;
 8007aa4:	23ff      	movs	r3, #255	@ 0xff

  // hcd_int_disable(rhport);

  // Find enabled channeled and disable it, channel will be de-allocated in the interrupt handler
  const uint8_t ch_id = channel_find_enabled(dwc2, dev_addr, ep_num, ep_dir);
 8007aa6:	f887 3058 	strb.w	r3, [r7, #88]	@ 0x58
  if (ch_id < 16) {
 8007aaa:	f897 3058 	ldrb.w	r3, [r7, #88]	@ 0x58
 8007aae:	2b0f      	cmp	r3, #15
 8007ab0:	d851      	bhi.n	8007b56 <hcd_edpt_abort_xfer+0x28a>
    dwc2_channel_t* channel = &dwc2->channel[ch_id];
 8007ab2:	f897 3058 	ldrb.w	r3, [r7, #88]	@ 0x58
 8007ab6:	3328      	adds	r3, #40	@ 0x28
 8007ab8:	015b      	lsls	r3, r3, #5
 8007aba:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8007abc:	4413      	add	r3, r2
 8007abe:	657b      	str	r3, [r7, #84]	@ 0x54
 8007ac0:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007ac2:	637b      	str	r3, [r7, #52]	@ 0x34
 8007ac4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007ac6:	633b      	str	r3, [r7, #48]	@ 0x30
  TU_ASSERT(req_queue_avail(dwc2, channel_is_periodic(channel->hcchar)));
 8007ac8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007aca:	681b      	ldr	r3, [r3, #0]
 8007acc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  const dwc2_channel_char_t hcchar_bm = {.value = hcchar};
 8007ace:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007ad0:	617b      	str	r3, [r7, #20]
  return hcchar_bm.ep_type == HCCHAR_EPTYPE_INTERRUPT || hcchar_bm.ep_type == HCCHAR_EPTYPE_ISOCHRONOUS;
 8007ad2:	7dbb      	ldrb	r3, [r7, #22]
 8007ad4:	f003 030c 	and.w	r3, r3, #12
 8007ad8:	b2db      	uxtb	r3, r3
 8007ada:	2b0c      	cmp	r3, #12
 8007adc:	d005      	beq.n	8007aea <hcd_edpt_abort_xfer+0x21e>
 8007ade:	7dbb      	ldrb	r3, [r7, #22]
 8007ae0:	f003 030c 	and.w	r3, r3, #12
 8007ae4:	b2db      	uxtb	r3, r3
 8007ae6:	2b04      	cmp	r3, #4
 8007ae8:	d101      	bne.n	8007aee <hcd_edpt_abort_xfer+0x222>
 8007aea:	2301      	movs	r3, #1
 8007aec:	e000      	b.n	8007af0 <hcd_edpt_abort_xfer+0x224>
 8007aee:	2300      	movs	r3, #0
 8007af0:	f003 0301 	and.w	r3, r3, #1
 8007af4:	b2da      	uxtb	r2, r3
 8007af6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007af8:	62bb      	str	r3, [r7, #40]	@ 0x28
 8007afa:	4613      	mov	r3, r2
 8007afc:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  if (is_period) {
 8007b00:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8007b04:	2b00      	cmp	r3, #0
 8007b06:	d008      	beq.n	8007b1a <hcd_edpt_abort_xfer+0x24e>
    const dwc2_hptxsts_t hptxsts = {.value = dwc2->hptxsts};
 8007b08:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007b0a:	f8d3 3410 	ldr.w	r3, [r3, #1040]	@ 0x410
 8007b0e:	613b      	str	r3, [r7, #16]
    return hptxsts.req_queue_available;
 8007b10:	7cbb      	ldrb	r3, [r7, #18]
 8007b12:	f3c3 0306 	ubfx	r3, r3, #0, #7
 8007b16:	b2db      	uxtb	r3, r3
 8007b18:	e003      	b.n	8007b22 <hcd_edpt_abort_xfer+0x256>
    const dwc2_hnptxsts_t hnptxsts = {.value = dwc2->hnptxsts};
 8007b1a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007b1c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007b1e:	60fb      	str	r3, [r7, #12]
    return hnptxsts.req_queue_available;
 8007b20:	7bbb      	ldrb	r3, [r7, #14]
  TU_ASSERT(req_queue_avail(dwc2, channel_is_periodic(channel->hcchar)));
 8007b22:	2b00      	cmp	r3, #0
 8007b24:	d109      	bne.n	8007b3a <hcd_edpt_abort_xfer+0x26e>
 8007b26:	4b11      	ldr	r3, [pc, #68]	@ (8007b6c <hcd_edpt_abort_xfer+0x2a0>)
 8007b28:	623b      	str	r3, [r7, #32]
 8007b2a:	6a3b      	ldr	r3, [r7, #32]
 8007b2c:	681b      	ldr	r3, [r3, #0]
 8007b2e:	f003 0301 	and.w	r3, r3, #1
 8007b32:	2b00      	cmp	r3, #0
 8007b34:	d00e      	beq.n	8007b54 <hcd_edpt_abort_xfer+0x288>
 8007b36:	be00      	bkpt	0x0000
 8007b38:	e00c      	b.n	8007b54 <hcd_edpt_abort_xfer+0x288>
  channel->hcintmsk |= HCINT_HALTED;
 8007b3a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007b3c:	68db      	ldr	r3, [r3, #12]
 8007b3e:	f043 0202 	orr.w	r2, r3, #2
 8007b42:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007b44:	60da      	str	r2, [r3, #12]
  channel->hcchar |= HCCHAR_CHDIS | HCCHAR_CHENA; // must set both CHDIS and CHENA
 8007b46:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007b48:	681b      	ldr	r3, [r3, #0]
 8007b4a:	f043 4240 	orr.w	r2, r3, #3221225472	@ 0xc0000000
 8007b4e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007b50:	601a      	str	r2, [r3, #0]
  return true;
 8007b52:	e000      	b.n	8007b56 <hcd_edpt_abort_xfer+0x28a>
  TU_ASSERT(req_queue_avail(dwc2, channel_is_periodic(channel->hcchar)));
 8007b54:	bf00      	nop
    channel_disable(dwc2, channel);
  }

  // hcd_int_enable(rhport);

  return true;
 8007b56:	2301      	movs	r3, #1
}
 8007b58:	4618      	mov	r0, r3
 8007b5a:	3764      	adds	r7, #100	@ 0x64
 8007b5c:	46bd      	mov	sp, r7
 8007b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b62:	4770      	bx	lr
 8007b64:	08008130 	.word	0x08008130
 8007b68:	20000bc0 	.word	0x20000bc0
 8007b6c:	e000edf0 	.word	0xe000edf0

08007b70 <hcd_setup_send>:

// Submit a special transfer to send 8-byte Setup Packet, when complete hcd_event_xfer_complete() must be invoked
bool hcd_setup_send(uint8_t rhport, uint8_t dev_addr, const uint8_t setup_packet[8]) {
 8007b70:	b580      	push	{r7, lr}
 8007b72:	b08a      	sub	sp, #40	@ 0x28
 8007b74:	af02      	add	r7, sp, #8
 8007b76:	4603      	mov	r3, r0
 8007b78:	603a      	str	r2, [r7, #0]
 8007b7a:	71fb      	strb	r3, [r7, #7]
 8007b7c:	460b      	mov	r3, r1
 8007b7e:	71bb      	strb	r3, [r7, #6]
 8007b80:	79bb      	ldrb	r3, [r7, #6]
 8007b82:	74fb      	strb	r3, [r7, #19]
 8007b84:	2300      	movs	r3, #0
 8007b86:	74bb      	strb	r3, [r7, #18]
 8007b88:	2300      	movs	r3, #0
 8007b8a:	747b      	strb	r3, [r7, #17]
  for (uint8_t i = 0; i < (uint8_t)CFG_TUH_DWC2_ENDPOINT_MAX; i++) {
 8007b8c:	2300      	movs	r3, #0
 8007b8e:	743b      	strb	r3, [r7, #16]
 8007b90:	e032      	b.n	8007bf8 <hcd_setup_send+0x88>
    const dwc2_channel_char_t* hcchar_bm = &_hcd_data.edpt[i].hcchar_bm;
 8007b92:	7c3a      	ldrb	r2, [r7, #16]
 8007b94:	4613      	mov	r3, r2
 8007b96:	005b      	lsls	r3, r3, #1
 8007b98:	4413      	add	r3, r2
 8007b9a:	00db      	lsls	r3, r3, #3
 8007b9c:	3380      	adds	r3, #128	@ 0x80
 8007b9e:	4a2d      	ldr	r2, [pc, #180]	@ (8007c54 <hcd_setup_send+0xe4>)
 8007ba0:	4413      	add	r3, r2
 8007ba2:	60fb      	str	r3, [r7, #12]
    if (hcchar_bm->enable && hcchar_bm->dev_addr == dev_addr &&
 8007ba4:	68fb      	ldr	r3, [r7, #12]
 8007ba6:	78db      	ldrb	r3, [r3, #3]
 8007ba8:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8007bac:	b2db      	uxtb	r3, r3
 8007bae:	2b00      	cmp	r3, #0
 8007bb0:	d01f      	beq.n	8007bf2 <hcd_setup_send+0x82>
 8007bb2:	68fb      	ldr	r3, [r7, #12]
 8007bb4:	885b      	ldrh	r3, [r3, #2]
 8007bb6:	f3c3 1386 	ubfx	r3, r3, #6, #7
 8007bba:	b2db      	uxtb	r3, r3
 8007bbc:	461a      	mov	r2, r3
 8007bbe:	7cfb      	ldrb	r3, [r7, #19]
 8007bc0:	4293      	cmp	r3, r2
 8007bc2:	d116      	bne.n	8007bf2 <hcd_setup_send+0x82>
        hcchar_bm->ep_num == ep_num && (ep_num == 0 || hcchar_bm->ep_dir == ep_dir)) {
 8007bc4:	68fb      	ldr	r3, [r7, #12]
 8007bc6:	785b      	ldrb	r3, [r3, #1]
 8007bc8:	f3c3 03c3 	ubfx	r3, r3, #3, #4
 8007bcc:	b2db      	uxtb	r3, r3
 8007bce:	461a      	mov	r2, r3
    if (hcchar_bm->enable && hcchar_bm->dev_addr == dev_addr &&
 8007bd0:	7cbb      	ldrb	r3, [r7, #18]
 8007bd2:	4293      	cmp	r3, r2
 8007bd4:	d10d      	bne.n	8007bf2 <hcd_setup_send+0x82>
        hcchar_bm->ep_num == ep_num && (ep_num == 0 || hcchar_bm->ep_dir == ep_dir)) {
 8007bd6:	7cbb      	ldrb	r3, [r7, #18]
 8007bd8:	2b00      	cmp	r3, #0
 8007bda:	d008      	beq.n	8007bee <hcd_setup_send+0x7e>
 8007bdc:	68fb      	ldr	r3, [r7, #12]
 8007bde:	785b      	ldrb	r3, [r3, #1]
 8007be0:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8007be4:	b2db      	uxtb	r3, r3
 8007be6:	461a      	mov	r2, r3
 8007be8:	7c7b      	ldrb	r3, [r7, #17]
 8007bea:	4293      	cmp	r3, r2
 8007bec:	d101      	bne.n	8007bf2 <hcd_setup_send+0x82>
      return i;
 8007bee:	7c3b      	ldrb	r3, [r7, #16]
 8007bf0:	e006      	b.n	8007c00 <hcd_setup_send+0x90>
  for (uint8_t i = 0; i < (uint8_t)CFG_TUH_DWC2_ENDPOINT_MAX; i++) {
 8007bf2:	7c3b      	ldrb	r3, [r7, #16]
 8007bf4:	3301      	adds	r3, #1
 8007bf6:	743b      	strb	r3, [r7, #16]
 8007bf8:	7c3b      	ldrb	r3, [r7, #16]
 8007bfa:	2b0f      	cmp	r3, #15
 8007bfc:	d9c9      	bls.n	8007b92 <hcd_setup_send+0x22>
  return TUSB_INDEX_INVALID_8;
 8007bfe:	23ff      	movs	r3, #255	@ 0xff
  uint8_t ep_id = edpt_find_opened(dev_addr, 0, TUSB_DIR_OUT);
 8007c00:	77fb      	strb	r3, [r7, #31]
  TU_ASSERT(ep_id < CFG_TUH_DWC2_ENDPOINT_MAX); // no opened endpoint
 8007c02:	7ffb      	ldrb	r3, [r7, #31]
 8007c04:	2b0f      	cmp	r3, #15
 8007c06:	d90a      	bls.n	8007c1e <hcd_setup_send+0xae>
 8007c08:	4b13      	ldr	r3, [pc, #76]	@ (8007c58 <hcd_setup_send+0xe8>)
 8007c0a:	617b      	str	r3, [r7, #20]
 8007c0c:	697b      	ldr	r3, [r7, #20]
 8007c0e:	681b      	ldr	r3, [r3, #0]
 8007c10:	f003 0301 	and.w	r3, r3, #1
 8007c14:	2b00      	cmp	r3, #0
 8007c16:	d000      	beq.n	8007c1a <hcd_setup_send+0xaa>
 8007c18:	be00      	bkpt	0x0000
 8007c1a:	2300      	movs	r3, #0
 8007c1c:	e016      	b.n	8007c4c <hcd_setup_send+0xdc>
  hcd_endpoint_t* edpt = &_hcd_data.edpt[ep_id];
 8007c1e:	7ffa      	ldrb	r2, [r7, #31]
 8007c20:	4613      	mov	r3, r2
 8007c22:	005b      	lsls	r3, r3, #1
 8007c24:	4413      	add	r3, r2
 8007c26:	00db      	lsls	r3, r3, #3
 8007c28:	3380      	adds	r3, #128	@ 0x80
 8007c2a:	4a0a      	ldr	r2, [pc, #40]	@ (8007c54 <hcd_setup_send+0xe4>)
 8007c2c:	4413      	add	r3, r2
 8007c2e:	61bb      	str	r3, [r7, #24]
  edpt->next_pid = HCTSIZ_PID_SETUP;
 8007c30:	69ba      	ldr	r2, [r7, #24]
 8007c32:	7a93      	ldrb	r3, [r2, #10]
 8007c34:	f043 0330 	orr.w	r3, r3, #48	@ 0x30
 8007c38:	7293      	strb	r3, [r2, #10]

  return hcd_edpt_xfer(rhport, dev_addr, 0, (uint8_t*)(uintptr_t) setup_packet, 8);
 8007c3a:	79b9      	ldrb	r1, [r7, #6]
 8007c3c:	79f8      	ldrb	r0, [r7, #7]
 8007c3e:	2308      	movs	r3, #8
 8007c40:	9300      	str	r3, [sp, #0]
 8007c42:	683b      	ldr	r3, [r7, #0]
 8007c44:	2200      	movs	r2, #0
 8007c46:	f7ff fd99 	bl	800777c <hcd_edpt_xfer>
 8007c4a:	4603      	mov	r3, r0
}
 8007c4c:	4618      	mov	r0, r3
 8007c4e:	3720      	adds	r7, #32
 8007c50:	46bd      	mov	sp, r7
 8007c52:	bd80      	pop	{r7, pc}
 8007c54:	20000bc0 	.word	0x20000bc0
 8007c58:	e000edf0 	.word	0xe000edf0

08007c5c <tusb_time_delay_ms_api>:

//--------------------------------------------------------------------
// Weak/Default API, can be overwritten by Application
//--------------------------------------------------------------------

TU_ATTR_WEAK void tusb_time_delay_ms_api(uint32_t ms) {
 8007c5c:	b580      	push	{r7, lr}
 8007c5e:	b084      	sub	sp, #16
 8007c60:	af00      	add	r7, sp, #0
 8007c62:	6078      	str	r0, [r7, #4]
#if CFG_TUSB_OS != OPT_OS_NONE
  osal_task_delay(ms);
#else
  // delay using millis() (if implemented) and/or frame number if possible
  const uint32_t time_ms = tusb_time_millis_api();
 8007c64:	f7f8 fe92 	bl	800098c <tusb_time_millis_api>
 8007c68:	60f8      	str	r0, [r7, #12]
  while ((tusb_time_millis_api() - time_ms) < ms) {}
 8007c6a:	bf00      	nop
 8007c6c:	f7f8 fe8e 	bl	800098c <tusb_time_millis_api>
 8007c70:	4602      	mov	r2, r0
 8007c72:	68fb      	ldr	r3, [r7, #12]
 8007c74:	1ad3      	subs	r3, r2, r3
 8007c76:	687a      	ldr	r2, [r7, #4]
 8007c78:	429a      	cmp	r2, r3
 8007c7a:	d8f7      	bhi.n	8007c6c <tusb_time_delay_ms_api+0x10>
#endif
}
 8007c7c:	bf00      	nop
 8007c7e:	bf00      	nop
 8007c80:	3710      	adds	r7, #16
 8007c82:	46bd      	mov	sp, r7
 8007c84:	bd80      	pop	{r7, pc}
	...

08007c88 <tusb_rhport_init>:

//--------------------------------------------------------------------+
// Public API
//--------------------------------------------------------------------+
bool tusb_rhport_init(uint8_t rhport, const tusb_rhport_init_t* rh_init) {
 8007c88:	b580      	push	{r7, lr}
 8007c8a:	b084      	sub	sp, #16
 8007c8c:	af00      	add	r7, sp, #0
 8007c8e:	4603      	mov	r3, r0
 8007c90:	6039      	str	r1, [r7, #0]
 8007c92:	71fb      	strb	r3, [r7, #7]
    return true;
  }
  #endif

  // new API with explicit rhport and role
  TU_ASSERT(rhport < TUP_USBIP_CONTROLLER_NUM && rh_init->role != TUSB_ROLE_INVALID);
 8007c94:	79fb      	ldrb	r3, [r7, #7]
 8007c96:	2b01      	cmp	r3, #1
 8007c98:	d803      	bhi.n	8007ca2 <tusb_rhport_init+0x1a>
 8007c9a:	683b      	ldr	r3, [r7, #0]
 8007c9c:	781b      	ldrb	r3, [r3, #0]
 8007c9e:	2b00      	cmp	r3, #0
 8007ca0:	d10a      	bne.n	8007cb8 <tusb_rhport_init+0x30>
 8007ca2:	4b17      	ldr	r3, [pc, #92]	@ (8007d00 <tusb_rhport_init+0x78>)
 8007ca4:	60bb      	str	r3, [r7, #8]
 8007ca6:	68bb      	ldr	r3, [r7, #8]
 8007ca8:	681b      	ldr	r3, [r3, #0]
 8007caa:	f003 0301 	and.w	r3, r3, #1
 8007cae:	2b00      	cmp	r3, #0
 8007cb0:	d000      	beq.n	8007cb4 <tusb_rhport_init+0x2c>
 8007cb2:	be00      	bkpt	0x0000
 8007cb4:	2300      	movs	r3, #0
 8007cb6:	e01f      	b.n	8007cf8 <tusb_rhport_init+0x70>
  _tusb_rhport_role[rhport] = rh_init->role;
 8007cb8:	79fb      	ldrb	r3, [r7, #7]
 8007cba:	683a      	ldr	r2, [r7, #0]
 8007cbc:	7811      	ldrb	r1, [r2, #0]
 8007cbe:	4a11      	ldr	r2, [pc, #68]	@ (8007d04 <tusb_rhport_init+0x7c>)
 8007cc0:	54d1      	strb	r1, [r2, r3]
    TU_ASSERT(tud_rhport_init(rhport, rh_init));
  }
  #endif

  #if CFG_TUH_ENABLED
  if (rh_init->role == TUSB_ROLE_HOST) {
 8007cc2:	683b      	ldr	r3, [r7, #0]
 8007cc4:	781b      	ldrb	r3, [r3, #0]
 8007cc6:	2b02      	cmp	r3, #2
 8007cc8:	d115      	bne.n	8007cf6 <tusb_rhport_init+0x6e>
    TU_ASSERT(tuh_rhport_init(rhport, rh_init));
 8007cca:	79fb      	ldrb	r3, [r7, #7]
 8007ccc:	6839      	ldr	r1, [r7, #0]
 8007cce:	4618      	mov	r0, r3
 8007cd0:	f7fc fb40 	bl	8004354 <tuh_rhport_init>
 8007cd4:	4603      	mov	r3, r0
 8007cd6:	f083 0301 	eor.w	r3, r3, #1
 8007cda:	b2db      	uxtb	r3, r3
 8007cdc:	2b00      	cmp	r3, #0
 8007cde:	d00a      	beq.n	8007cf6 <tusb_rhport_init+0x6e>
 8007ce0:	4b07      	ldr	r3, [pc, #28]	@ (8007d00 <tusb_rhport_init+0x78>)
 8007ce2:	60fb      	str	r3, [r7, #12]
 8007ce4:	68fb      	ldr	r3, [r7, #12]
 8007ce6:	681b      	ldr	r3, [r3, #0]
 8007ce8:	f003 0301 	and.w	r3, r3, #1
 8007cec:	2b00      	cmp	r3, #0
 8007cee:	d000      	beq.n	8007cf2 <tusb_rhport_init+0x6a>
 8007cf0:	be00      	bkpt	0x0000
 8007cf2:	2300      	movs	r3, #0
 8007cf4:	e000      	b.n	8007cf8 <tusb_rhport_init+0x70>
  }
  #endif

  return true;
 8007cf6:	2301      	movs	r3, #1
}
 8007cf8:	4618      	mov	r0, r3
 8007cfa:	3710      	adds	r7, #16
 8007cfc:	46bd      	mov	sp, r7
 8007cfe:	bd80      	pop	{r7, pc}
 8007d00:	e000edf0 	.word	0xe000edf0
 8007d04:	20000dc0 	.word	0x20000dc0

08007d08 <tu_edpt_claim>:

//--------------------------------------------------------------------+
// Endpoint Helper for both Host and Device stack
//--------------------------------------------------------------------+

bool tu_edpt_claim(tu_edpt_state_t* ep_state, osal_mutex_t mutex) {
 8007d08:	b480      	push	{r7}
 8007d0a:	b085      	sub	sp, #20
 8007d0c:	af00      	add	r7, sp, #0
 8007d0e:	6078      	str	r0, [r7, #4]
 8007d10:	6039      	str	r1, [r7, #0]
  (void) mutex;

  // pre-check to help reducing mutex lock
  TU_VERIFY((ep_state->busy == 0) && (ep_state->claimed == 0));
 8007d12:	687b      	ldr	r3, [r7, #4]
 8007d14:	781b      	ldrb	r3, [r3, #0]
 8007d16:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8007d1a:	b2db      	uxtb	r3, r3
 8007d1c:	2b00      	cmp	r3, #0
 8007d1e:	d106      	bne.n	8007d2e <tu_edpt_claim+0x26>
 8007d20:	687b      	ldr	r3, [r7, #4]
 8007d22:	781b      	ldrb	r3, [r3, #0]
 8007d24:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8007d28:	b2db      	uxtb	r3, r3
 8007d2a:	2b00      	cmp	r3, #0
 8007d2c:	d001      	beq.n	8007d32 <tu_edpt_claim+0x2a>
 8007d2e:	2300      	movs	r3, #0
 8007d30:	e01e      	b.n	8007d70 <tu_edpt_claim+0x68>
  (void) osal_mutex_lock(mutex, OSAL_TIMEOUT_WAIT_FOREVER);

  // can only claim the endpoint if it is not busy and not claimed yet.
  bool const available = (ep_state->busy == 0) && (ep_state->claimed == 0);
 8007d32:	687b      	ldr	r3, [r7, #4]
 8007d34:	781b      	ldrb	r3, [r3, #0]
 8007d36:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8007d3a:	b2db      	uxtb	r3, r3
 8007d3c:	2b00      	cmp	r3, #0
 8007d3e:	d108      	bne.n	8007d52 <tu_edpt_claim+0x4a>
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	781b      	ldrb	r3, [r3, #0]
 8007d44:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8007d48:	b2db      	uxtb	r3, r3
 8007d4a:	2b00      	cmp	r3, #0
 8007d4c:	d101      	bne.n	8007d52 <tu_edpt_claim+0x4a>
 8007d4e:	2301      	movs	r3, #1
 8007d50:	e000      	b.n	8007d54 <tu_edpt_claim+0x4c>
 8007d52:	2300      	movs	r3, #0
 8007d54:	73fb      	strb	r3, [r7, #15]
 8007d56:	7bfb      	ldrb	r3, [r7, #15]
 8007d58:	f003 0301 	and.w	r3, r3, #1
 8007d5c:	73fb      	strb	r3, [r7, #15]
  if (available) {
 8007d5e:	7bfb      	ldrb	r3, [r7, #15]
 8007d60:	2b00      	cmp	r3, #0
 8007d62:	d004      	beq.n	8007d6e <tu_edpt_claim+0x66>
    ep_state->claimed = 1;
 8007d64:	687a      	ldr	r2, [r7, #4]
 8007d66:	7813      	ldrb	r3, [r2, #0]
 8007d68:	f043 0304 	orr.w	r3, r3, #4
 8007d6c:	7013      	strb	r3, [r2, #0]
  }

  (void) osal_mutex_unlock(mutex);
  return available;
 8007d6e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007d70:	4618      	mov	r0, r3
 8007d72:	3714      	adds	r7, #20
 8007d74:	46bd      	mov	sp, r7
 8007d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d7a:	4770      	bx	lr

08007d7c <tu_edpt_release>:

bool tu_edpt_release(tu_edpt_state_t* ep_state, osal_mutex_t mutex) {
 8007d7c:	b480      	push	{r7}
 8007d7e:	b085      	sub	sp, #20
 8007d80:	af00      	add	r7, sp, #0
 8007d82:	6078      	str	r0, [r7, #4]
 8007d84:	6039      	str	r1, [r7, #0]
  (void) mutex;
  (void) osal_mutex_lock(mutex, OSAL_TIMEOUT_WAIT_FOREVER);

  // can only release the endpoint if it is claimed and not busy
  bool const ret = (ep_state->claimed == 1) && (ep_state->busy == 0);
 8007d86:	687b      	ldr	r3, [r7, #4]
 8007d88:	781b      	ldrb	r3, [r3, #0]
 8007d8a:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8007d8e:	b2db      	uxtb	r3, r3
 8007d90:	2b01      	cmp	r3, #1
 8007d92:	d108      	bne.n	8007da6 <tu_edpt_release+0x2a>
 8007d94:	687b      	ldr	r3, [r7, #4]
 8007d96:	781b      	ldrb	r3, [r3, #0]
 8007d98:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8007d9c:	b2db      	uxtb	r3, r3
 8007d9e:	2b00      	cmp	r3, #0
 8007da0:	d101      	bne.n	8007da6 <tu_edpt_release+0x2a>
 8007da2:	2301      	movs	r3, #1
 8007da4:	e000      	b.n	8007da8 <tu_edpt_release+0x2c>
 8007da6:	2300      	movs	r3, #0
 8007da8:	73fb      	strb	r3, [r7, #15]
 8007daa:	7bfb      	ldrb	r3, [r7, #15]
 8007dac:	f003 0301 	and.w	r3, r3, #1
 8007db0:	73fb      	strb	r3, [r7, #15]
  if (ret) {
 8007db2:	7bfb      	ldrb	r3, [r7, #15]
 8007db4:	2b00      	cmp	r3, #0
 8007db6:	d004      	beq.n	8007dc2 <tu_edpt_release+0x46>
    ep_state->claimed = 0;
 8007db8:	687a      	ldr	r2, [r7, #4]
 8007dba:	7813      	ldrb	r3, [r2, #0]
 8007dbc:	f023 0304 	bic.w	r3, r3, #4
 8007dc0:	7013      	strb	r3, [r2, #0]
  }

  (void) osal_mutex_unlock(mutex);
  return ret;
 8007dc2:	7bfb      	ldrb	r3, [r7, #15]
}
 8007dc4:	4618      	mov	r0, r3
 8007dc6:	3714      	adds	r7, #20
 8007dc8:	46bd      	mov	sp, r7
 8007dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dce:	4770      	bx	lr

08007dd0 <tu_edpt_validate>:

bool tu_edpt_validate(tusb_desc_endpoint_t const* desc_ep, tusb_speed_t speed, bool is_host) {
 8007dd0:	b480      	push	{r7}
 8007dd2:	b08b      	sub	sp, #44	@ 0x2c
 8007dd4:	af00      	add	r7, sp, #0
 8007dd6:	6078      	str	r0, [r7, #4]
 8007dd8:	460b      	mov	r3, r1
 8007dda:	70fb      	strb	r3, [r7, #3]
 8007ddc:	4613      	mov	r3, r2
 8007dde:	70bb      	strb	r3, [r7, #2]
 8007de0:	687b      	ldr	r3, [r7, #4]
 8007de2:	60bb      	str	r3, [r7, #8]
TU_ATTR_ALWAYS_INLINE static inline uint8_t tu_edpt_addr(uint8_t num, uint8_t dir) {
  return (uint8_t)(num | (dir ? TUSB_DIR_IN_MASK : 0));
}

TU_ATTR_ALWAYS_INLINE static inline uint16_t tu_edpt_packet_size(tusb_desc_endpoint_t const* desc_ep) {
  return tu_le16toh(desc_ep->wMaxPacketSize) & 0x7FF;
 8007de4:	68bb      	ldr	r3, [r7, #8]
 8007de6:	889b      	ldrh	r3, [r3, #4]
 8007de8:	b29b      	uxth	r3, r3
 8007dea:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8007dee:	b29b      	uxth	r3, r3
  uint16_t const max_packet_size = tu_edpt_packet_size(desc_ep);
 8007df0:	84fb      	strh	r3, [r7, #38]	@ 0x26
  TU_LOG2("  Open EP %02X with Size = %u\r\n", desc_ep->bEndpointAddress, max_packet_size);

  switch (desc_ep->bmAttributes.xfer) {
 8007df2:	687b      	ldr	r3, [r7, #4]
 8007df4:	78db      	ldrb	r3, [r3, #3]
 8007df6:	f3c3 0301 	ubfx	r3, r3, #0, #2
 8007dfa:	b2db      	uxtb	r3, r3
 8007dfc:	2b03      	cmp	r3, #3
 8007dfe:	d059      	beq.n	8007eb4 <tu_edpt_validate+0xe4>
 8007e00:	2b03      	cmp	r3, #3
 8007e02:	dc6e      	bgt.n	8007ee2 <tu_edpt_validate+0x112>
 8007e04:	2b01      	cmp	r3, #1
 8007e06:	d002      	beq.n	8007e0e <tu_edpt_validate+0x3e>
 8007e08:	2b02      	cmp	r3, #2
 8007e0a:	d018      	beq.n	8007e3e <tu_edpt_validate+0x6e>
 8007e0c:	e069      	b.n	8007ee2 <tu_edpt_validate+0x112>
    case TUSB_XFER_ISOCHRONOUS: {
      uint16_t const spec_size = (speed == TUSB_SPEED_HIGH ? 1024 : 1023);
 8007e0e:	78fb      	ldrb	r3, [r7, #3]
 8007e10:	2b02      	cmp	r3, #2
 8007e12:	d102      	bne.n	8007e1a <tu_edpt_validate+0x4a>
 8007e14:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8007e18:	e001      	b.n	8007e1e <tu_edpt_validate+0x4e>
 8007e1a:	f240 33ff 	movw	r3, #1023	@ 0x3ff
 8007e1e:	827b      	strh	r3, [r7, #18]
      TU_ASSERT(max_packet_size <= spec_size);
 8007e20:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 8007e22:	8a7b      	ldrh	r3, [r7, #18]
 8007e24:	429a      	cmp	r2, r3
 8007e26:	d95e      	bls.n	8007ee6 <tu_edpt_validate+0x116>
 8007e28:	4b35      	ldr	r3, [pc, #212]	@ (8007f00 <tu_edpt_validate+0x130>)
 8007e2a:	60fb      	str	r3, [r7, #12]
 8007e2c:	68fb      	ldr	r3, [r7, #12]
 8007e2e:	681b      	ldr	r3, [r3, #0]
 8007e30:	f003 0301 	and.w	r3, r3, #1
 8007e34:	2b00      	cmp	r3, #0
 8007e36:	d000      	beq.n	8007e3a <tu_edpt_validate+0x6a>
 8007e38:	be00      	bkpt	0x0000
 8007e3a:	2300      	movs	r3, #0
 8007e3c:	e059      	b.n	8007ef2 <tu_edpt_validate+0x122>
      break;
    }

    case TUSB_XFER_BULK:
      if (speed == TUSB_SPEED_HIGH) {
 8007e3e:	78fb      	ldrb	r3, [r7, #3]
 8007e40:	2b02      	cmp	r3, #2
 8007e42:	d10e      	bne.n	8007e62 <tu_edpt_validate+0x92>
        // Bulk highspeed must be EXACTLY 512
        TU_ASSERT(max_packet_size == 512);
 8007e44:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8007e46:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007e4a:	d04e      	beq.n	8007eea <tu_edpt_validate+0x11a>
 8007e4c:	4b2c      	ldr	r3, [pc, #176]	@ (8007f00 <tu_edpt_validate+0x130>)
 8007e4e:	617b      	str	r3, [r7, #20]
 8007e50:	697b      	ldr	r3, [r7, #20]
 8007e52:	681b      	ldr	r3, [r3, #0]
 8007e54:	f003 0301 	and.w	r3, r3, #1
 8007e58:	2b00      	cmp	r3, #0
 8007e5a:	d000      	beq.n	8007e5e <tu_edpt_validate+0x8e>
 8007e5c:	be00      	bkpt	0x0000
 8007e5e:	2300      	movs	r3, #0
 8007e60:	e047      	b.n	8007ef2 <tu_edpt_validate+0x122>
      } else {
        // Bulk fullspeed can only be 8, 16, 32, 64
        if (is_host && max_packet_size == 512) {
 8007e62:	78bb      	ldrb	r3, [r7, #2]
 8007e64:	2b00      	cmp	r3, #0
 8007e66:	d00e      	beq.n	8007e86 <tu_edpt_validate+0xb6>
 8007e68:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8007e6a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007e6e:	d10a      	bne.n	8007e86 <tu_edpt_validate+0xb6>
          // HACK: while in host mode, some device incorrectly always report 512 regardless of link speed
          // overwrite descriptor to force 64
          TU_LOG1("  WARN: EP max packet size is 512 in fullspeed, force to 64\r\n");
          tusb_desc_endpoint_t* hacked_ep = (tusb_desc_endpoint_t*) (uintptr_t) desc_ep;
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	61fb      	str	r3, [r7, #28]
          hacked_ep->wMaxPacketSize = tu_htole16(64);
 8007e74:	69fb      	ldr	r3, [r7, #28]
 8007e76:	2200      	movs	r2, #0
 8007e78:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8007e7c:	711a      	strb	r2, [r3, #4]
 8007e7e:	2200      	movs	r2, #0
 8007e80:	715a      	strb	r2, [r3, #5]
        if (is_host && max_packet_size == 512) {
 8007e82:	bf00      	nop
        } else {
          TU_ASSERT(max_packet_size == 8  || max_packet_size == 16 ||
                    max_packet_size == 32 || max_packet_size == 64);
        }
      }
      break;
 8007e84:	e031      	b.n	8007eea <tu_edpt_validate+0x11a>
          TU_ASSERT(max_packet_size == 8  || max_packet_size == 16 ||
 8007e86:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8007e88:	2b08      	cmp	r3, #8
 8007e8a:	d02e      	beq.n	8007eea <tu_edpt_validate+0x11a>
 8007e8c:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8007e8e:	2b10      	cmp	r3, #16
 8007e90:	d02b      	beq.n	8007eea <tu_edpt_validate+0x11a>
 8007e92:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8007e94:	2b20      	cmp	r3, #32
 8007e96:	d028      	beq.n	8007eea <tu_edpt_validate+0x11a>
 8007e98:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8007e9a:	2b40      	cmp	r3, #64	@ 0x40
 8007e9c:	d025      	beq.n	8007eea <tu_edpt_validate+0x11a>
 8007e9e:	4b18      	ldr	r3, [pc, #96]	@ (8007f00 <tu_edpt_validate+0x130>)
 8007ea0:	61bb      	str	r3, [r7, #24]
 8007ea2:	69bb      	ldr	r3, [r7, #24]
 8007ea4:	681b      	ldr	r3, [r3, #0]
 8007ea6:	f003 0301 	and.w	r3, r3, #1
 8007eaa:	2b00      	cmp	r3, #0
 8007eac:	d000      	beq.n	8007eb0 <tu_edpt_validate+0xe0>
 8007eae:	be00      	bkpt	0x0000
 8007eb0:	2300      	movs	r3, #0
 8007eb2:	e01e      	b.n	8007ef2 <tu_edpt_validate+0x122>

    case TUSB_XFER_INTERRUPT: {
      uint16_t const spec_size = (speed == TUSB_SPEED_HIGH ? 1024 : 64);
 8007eb4:	78fb      	ldrb	r3, [r7, #3]
 8007eb6:	2b02      	cmp	r3, #2
 8007eb8:	d102      	bne.n	8007ec0 <tu_edpt_validate+0xf0>
 8007eba:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8007ebe:	e000      	b.n	8007ec2 <tu_edpt_validate+0xf2>
 8007ec0:	2340      	movs	r3, #64	@ 0x40
 8007ec2:	84bb      	strh	r3, [r7, #36]	@ 0x24
      TU_ASSERT(max_packet_size <= spec_size);
 8007ec4:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 8007ec6:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8007ec8:	429a      	cmp	r2, r3
 8007eca:	d910      	bls.n	8007eee <tu_edpt_validate+0x11e>
 8007ecc:	4b0c      	ldr	r3, [pc, #48]	@ (8007f00 <tu_edpt_validate+0x130>)
 8007ece:	623b      	str	r3, [r7, #32]
 8007ed0:	6a3b      	ldr	r3, [r7, #32]
 8007ed2:	681b      	ldr	r3, [r3, #0]
 8007ed4:	f003 0301 	and.w	r3, r3, #1
 8007ed8:	2b00      	cmp	r3, #0
 8007eda:	d000      	beq.n	8007ede <tu_edpt_validate+0x10e>
 8007edc:	be00      	bkpt	0x0000
 8007ede:	2300      	movs	r3, #0
 8007ee0:	e007      	b.n	8007ef2 <tu_edpt_validate+0x122>
      break;
    }

    default:
      return false;
 8007ee2:	2300      	movs	r3, #0
 8007ee4:	e005      	b.n	8007ef2 <tu_edpt_validate+0x122>
      break;
 8007ee6:	bf00      	nop
 8007ee8:	e002      	b.n	8007ef0 <tu_edpt_validate+0x120>
      break;
 8007eea:	bf00      	nop
 8007eec:	e000      	b.n	8007ef0 <tu_edpt_validate+0x120>
      break;
 8007eee:	bf00      	nop
  }

  return true;
 8007ef0:	2301      	movs	r3, #1
}
 8007ef2:	4618      	mov	r0, r3
 8007ef4:	372c      	adds	r7, #44	@ 0x2c
 8007ef6:	46bd      	mov	sp, r7
 8007ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007efc:	4770      	bx	lr
 8007efe:	bf00      	nop
 8007f00:	e000edf0 	.word	0xe000edf0

08007f04 <tu_edpt_bind_driver>:

void tu_edpt_bind_driver(uint8_t ep2drv[][2], tusb_desc_interface_t const* desc_itf, uint16_t desc_len,
                         uint8_t driver_id) {
 8007f04:	b480      	push	{r7}
 8007f06:	b08d      	sub	sp, #52	@ 0x34
 8007f08:	af00      	add	r7, sp, #0
 8007f0a:	60f8      	str	r0, [r7, #12]
 8007f0c:	60b9      	str	r1, [r7, #8]
 8007f0e:	4611      	mov	r1, r2
 8007f10:	461a      	mov	r2, r3
 8007f12:	460b      	mov	r3, r1
 8007f14:	80fb      	strh	r3, [r7, #6]
 8007f16:	4613      	mov	r3, r2
 8007f18:	717b      	strb	r3, [r7, #5]
  uint8_t const* p_desc = (uint8_t const*) desc_itf;
 8007f1a:	68bb      	ldr	r3, [r7, #8]
 8007f1c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint8_t const* desc_end = p_desc + desc_len;
 8007f1e:	88fb      	ldrh	r3, [r7, #6]
 8007f20:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007f22:	4413      	add	r3, r2
 8007f24:	62bb      	str	r3, [r7, #40]	@ 0x28

  while (p_desc < desc_end) {
 8007f26:	e027      	b.n	8007f78 <tu_edpt_bind_driver+0x74>
 8007f28:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007f2a:	623b      	str	r3, [r7, #32]
  return ((uint8_t const*) desc)[DESC_OFFSET_LEN];
}

// get descriptor type
TU_ATTR_ALWAYS_INLINE static inline uint8_t tu_desc_type(void const* desc) {
  return ((uint8_t const*) desc)[DESC_OFFSET_TYPE];
 8007f2c:	6a3b      	ldr	r3, [r7, #32]
 8007f2e:	3301      	adds	r3, #1
 8007f30:	781b      	ldrb	r3, [r3, #0]
    if (TUSB_DESC_ENDPOINT == tu_desc_type(p_desc)) {
 8007f32:	2b05      	cmp	r3, #5
 8007f34:	d116      	bne.n	8007f64 <tu_edpt_bind_driver+0x60>
      uint8_t const ep_addr = ((tusb_desc_endpoint_t const*) p_desc)->bEndpointAddress;
 8007f36:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007f38:	789b      	ldrb	r3, [r3, #2]
 8007f3a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8007f3e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8007f42:	77bb      	strb	r3, [r7, #30]
  return (uint8_t)(addr & (~TUSB_DIR_IN_MASK));
 8007f44:	7fbb      	ldrb	r3, [r7, #30]
 8007f46:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007f4a:	b2db      	uxtb	r3, r3
      TU_LOG(2, "  Bind EP %02x to driver id %u\r\n", ep_addr, driver_id);
      ep2drv[tu_edpt_number(ep_addr)][tu_edpt_dir(ep_addr)] = driver_id;
 8007f4c:	005b      	lsls	r3, r3, #1
 8007f4e:	68fa      	ldr	r2, [r7, #12]
 8007f50:	4413      	add	r3, r2
 8007f52:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 8007f56:	77fa      	strb	r2, [r7, #31]
  return (addr & TUSB_DIR_IN_MASK) ? TUSB_DIR_IN : TUSB_DIR_OUT;
 8007f58:	7ffa      	ldrb	r2, [r7, #31]
 8007f5a:	09d2      	lsrs	r2, r2, #7
 8007f5c:	b2d2      	uxtb	r2, r2
 8007f5e:	4611      	mov	r1, r2
 8007f60:	797a      	ldrb	r2, [r7, #5]
 8007f62:	545a      	strb	r2, [r3, r1]
 8007f64:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007f66:	61bb      	str	r3, [r7, #24]
  uint8_t const* desc8 = (uint8_t const*) desc;
 8007f68:	69bb      	ldr	r3, [r7, #24]
 8007f6a:	617b      	str	r3, [r7, #20]
  return desc8 + desc8[DESC_OFFSET_LEN];
 8007f6c:	697b      	ldr	r3, [r7, #20]
 8007f6e:	781b      	ldrb	r3, [r3, #0]
 8007f70:	461a      	mov	r2, r3
 8007f72:	697b      	ldr	r3, [r7, #20]
 8007f74:	4413      	add	r3, r2
    }
    p_desc = tu_desc_next(p_desc);
 8007f76:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while (p_desc < desc_end) {
 8007f78:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007f7a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007f7c:	429a      	cmp	r2, r3
 8007f7e:	d3d3      	bcc.n	8007f28 <tu_edpt_bind_driver+0x24>
  }
}
 8007f80:	bf00      	nop
 8007f82:	bf00      	nop
 8007f84:	3734      	adds	r7, #52	@ 0x34
 8007f86:	46bd      	mov	sp, r7
 8007f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f8c:	4770      	bx	lr

08007f8e <tu_desc_get_interface_total_len>:

uint16_t tu_desc_get_interface_total_len(tusb_desc_interface_t const* desc_itf, uint8_t itf_count, uint16_t max_len) {
 8007f8e:	b480      	push	{r7}
 8007f90:	b08f      	sub	sp, #60	@ 0x3c
 8007f92:	af00      	add	r7, sp, #0
 8007f94:	6078      	str	r0, [r7, #4]
 8007f96:	460b      	mov	r3, r1
 8007f98:	70fb      	strb	r3, [r7, #3]
 8007f9a:	4613      	mov	r3, r2
 8007f9c:	803b      	strh	r3, [r7, #0]
  uint8_t const* p_desc = (uint8_t const*) desc_itf;
 8007f9e:	687b      	ldr	r3, [r7, #4]
 8007fa0:	637b      	str	r3, [r7, #52]	@ 0x34
  uint16_t len = 0;
 8007fa2:	2300      	movs	r3, #0
 8007fa4:	867b      	strh	r3, [r7, #50]	@ 0x32

  while (itf_count--) {
 8007fa6:	e046      	b.n	8008036 <tu_desc_get_interface_total_len+0xa8>
 8007fa8:	687b      	ldr	r3, [r7, #4]
 8007faa:	627b      	str	r3, [r7, #36]	@ 0x24
  return ((uint8_t const*) desc)[DESC_OFFSET_LEN];
 8007fac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007fae:	781b      	ldrb	r3, [r3, #0]
    // Next on interface desc
    len += tu_desc_len(desc_itf);
 8007fb0:	461a      	mov	r2, r3
 8007fb2:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 8007fb4:	4413      	add	r3, r2
 8007fb6:	867b      	strh	r3, [r7, #50]	@ 0x32
 8007fb8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007fba:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint8_t const* desc8 = (uint8_t const*) desc;
 8007fbc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007fbe:	62bb      	str	r3, [r7, #40]	@ 0x28
  return desc8 + desc8[DESC_OFFSET_LEN];
 8007fc0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007fc2:	781b      	ldrb	r3, [r3, #0]
 8007fc4:	461a      	mov	r2, r3
 8007fc6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007fc8:	4413      	add	r3, r2
    p_desc = tu_desc_next(p_desc);
 8007fca:	637b      	str	r3, [r7, #52]	@ 0x34

    while (len < max_len) {
 8007fcc:	e02b      	b.n	8008026 <tu_desc_get_interface_total_len+0x98>
 8007fce:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007fd0:	623b      	str	r3, [r7, #32]
  return ((uint8_t const*) desc)[DESC_OFFSET_LEN];
 8007fd2:	6a3b      	ldr	r3, [r7, #32]
 8007fd4:	781b      	ldrb	r3, [r3, #0]
      if (tu_desc_len(p_desc) == 0) {
 8007fd6:	2b00      	cmp	r3, #0
 8007fd8:	d02a      	beq.n	8008030 <tu_desc_get_interface_total_len+0xa2>
 8007fda:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007fdc:	61fb      	str	r3, [r7, #28]
  return ((uint8_t const*) desc)[DESC_OFFSET_TYPE];
 8007fde:	69fb      	ldr	r3, [r7, #28]
 8007fe0:	3301      	adds	r3, #1
 8007fe2:	781b      	ldrb	r3, [r3, #0]
        // Escape infinite loop
        break;
      }
      // return on IAD regardless of itf count
      if (tu_desc_type(p_desc) == TUSB_DESC_INTERFACE_ASSOCIATION) {
 8007fe4:	2b0b      	cmp	r3, #11
 8007fe6:	d101      	bne.n	8007fec <tu_desc_get_interface_total_len+0x5e>
        return len;
 8007fe8:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 8007fea:	e02a      	b.n	8008042 <tu_desc_get_interface_total_len+0xb4>
 8007fec:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007fee:	61bb      	str	r3, [r7, #24]
 8007ff0:	69bb      	ldr	r3, [r7, #24]
 8007ff2:	3301      	adds	r3, #1
 8007ff4:	781b      	ldrb	r3, [r3, #0]
      }
      if ((tu_desc_type(p_desc) == TUSB_DESC_INTERFACE) &&
 8007ff6:	2b04      	cmp	r3, #4
 8007ff8:	d103      	bne.n	8008002 <tu_desc_get_interface_total_len+0x74>
          ((tusb_desc_interface_t const*) p_desc)->bAlternateSetting == 0) {
 8007ffa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007ffc:	78db      	ldrb	r3, [r3, #3]
      if ((tu_desc_type(p_desc) == TUSB_DESC_INTERFACE) &&
 8007ffe:	2b00      	cmp	r3, #0
 8008000:	d018      	beq.n	8008034 <tu_desc_get_interface_total_len+0xa6>
 8008002:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008004:	60fb      	str	r3, [r7, #12]
  return ((uint8_t const*) desc)[DESC_OFFSET_LEN];
 8008006:	68fb      	ldr	r3, [r7, #12]
 8008008:	781b      	ldrb	r3, [r3, #0]
        break;
      }

      len += tu_desc_len(p_desc);
 800800a:	461a      	mov	r2, r3
 800800c:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 800800e:	4413      	add	r3, r2
 8008010:	867b      	strh	r3, [r7, #50]	@ 0x32
 8008012:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008014:	617b      	str	r3, [r7, #20]
  uint8_t const* desc8 = (uint8_t const*) desc;
 8008016:	697b      	ldr	r3, [r7, #20]
 8008018:	613b      	str	r3, [r7, #16]
  return desc8 + desc8[DESC_OFFSET_LEN];
 800801a:	693b      	ldr	r3, [r7, #16]
 800801c:	781b      	ldrb	r3, [r3, #0]
 800801e:	461a      	mov	r2, r3
 8008020:	693b      	ldr	r3, [r7, #16]
 8008022:	4413      	add	r3, r2
      p_desc = tu_desc_next(p_desc);
 8008024:	637b      	str	r3, [r7, #52]	@ 0x34
    while (len < max_len) {
 8008026:	8e7a      	ldrh	r2, [r7, #50]	@ 0x32
 8008028:	883b      	ldrh	r3, [r7, #0]
 800802a:	429a      	cmp	r2, r3
 800802c:	d3cf      	bcc.n	8007fce <tu_desc_get_interface_total_len+0x40>
 800802e:	e002      	b.n	8008036 <tu_desc_get_interface_total_len+0xa8>
        break;
 8008030:	bf00      	nop
 8008032:	e000      	b.n	8008036 <tu_desc_get_interface_total_len+0xa8>
        break;
 8008034:	bf00      	nop
  while (itf_count--) {
 8008036:	78fb      	ldrb	r3, [r7, #3]
 8008038:	1e5a      	subs	r2, r3, #1
 800803a:	70fa      	strb	r2, [r7, #3]
 800803c:	2b00      	cmp	r3, #0
 800803e:	d1b3      	bne.n	8007fa8 <tu_desc_get_interface_total_len+0x1a>
    }
  }

  return len;
 8008040:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
}
 8008042:	4618      	mov	r0, r3
 8008044:	373c      	adds	r7, #60	@ 0x3c
 8008046:	46bd      	mov	sp, r7
 8008048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800804c:	4770      	bx	lr

0800804e <memset>:
 800804e:	4402      	add	r2, r0
 8008050:	4603      	mov	r3, r0
 8008052:	4293      	cmp	r3, r2
 8008054:	d100      	bne.n	8008058 <memset+0xa>
 8008056:	4770      	bx	lr
 8008058:	f803 1b01 	strb.w	r1, [r3], #1
 800805c:	e7f9      	b.n	8008052 <memset+0x4>
	...

08008060 <__libc_init_array>:
 8008060:	b570      	push	{r4, r5, r6, lr}
 8008062:	4d0d      	ldr	r5, [pc, #52]	@ (8008098 <__libc_init_array+0x38>)
 8008064:	4c0d      	ldr	r4, [pc, #52]	@ (800809c <__libc_init_array+0x3c>)
 8008066:	1b64      	subs	r4, r4, r5
 8008068:	10a4      	asrs	r4, r4, #2
 800806a:	2600      	movs	r6, #0
 800806c:	42a6      	cmp	r6, r4
 800806e:	d109      	bne.n	8008084 <__libc_init_array+0x24>
 8008070:	4d0b      	ldr	r5, [pc, #44]	@ (80080a0 <__libc_init_array+0x40>)
 8008072:	4c0c      	ldr	r4, [pc, #48]	@ (80080a4 <__libc_init_array+0x44>)
 8008074:	f000 f826 	bl	80080c4 <_init>
 8008078:	1b64      	subs	r4, r4, r5
 800807a:	10a4      	asrs	r4, r4, #2
 800807c:	2600      	movs	r6, #0
 800807e:	42a6      	cmp	r6, r4
 8008080:	d105      	bne.n	800808e <__libc_init_array+0x2e>
 8008082:	bd70      	pop	{r4, r5, r6, pc}
 8008084:	f855 3b04 	ldr.w	r3, [r5], #4
 8008088:	4798      	blx	r3
 800808a:	3601      	adds	r6, #1
 800808c:	e7ee      	b.n	800806c <__libc_init_array+0xc>
 800808e:	f855 3b04 	ldr.w	r3, [r5], #4
 8008092:	4798      	blx	r3
 8008094:	3601      	adds	r6, #1
 8008096:	e7f2      	b.n	800807e <__libc_init_array+0x1e>
 8008098:	08008158 	.word	0x08008158
 800809c:	08008158 	.word	0x08008158
 80080a0:	08008158 	.word	0x08008158
 80080a4:	0800815c 	.word	0x0800815c

080080a8 <memcpy>:
 80080a8:	440a      	add	r2, r1
 80080aa:	4291      	cmp	r1, r2
 80080ac:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 80080b0:	d100      	bne.n	80080b4 <memcpy+0xc>
 80080b2:	4770      	bx	lr
 80080b4:	b510      	push	{r4, lr}
 80080b6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80080ba:	f803 4f01 	strb.w	r4, [r3, #1]!
 80080be:	4291      	cmp	r1, r2
 80080c0:	d1f9      	bne.n	80080b6 <memcpy+0xe>
 80080c2:	bd10      	pop	{r4, pc}

080080c4 <_init>:
 80080c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80080c6:	bf00      	nop
 80080c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80080ca:	bc08      	pop	{r3}
 80080cc:	469e      	mov	lr, r3
 80080ce:	4770      	bx	lr

080080d0 <_fini>:
 80080d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80080d2:	bf00      	nop
 80080d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80080d6:	bc08      	pop	{r3}
 80080d8:	469e      	mov	lr, r3
 80080da:	4770      	bx	lr
